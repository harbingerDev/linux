{
  "openapi": "3.0.1",
  "info": {
    "title": "Fischer Identity Portal API",
    "description": "Identity Portal API by Fischer Identity LLC - Build: Fii.Api.1.1.0-alpha146-c294ec1348a2c6eaf52f147457da42365c2b3f7c",
    "termsOfService": "https://fischeridentity.com/terms",
    "contact": {
      "name": "John Doe",
      "url": "https://support.fischeridentity.com",
      "email": "John.Doe@gmail.com"
    },
    "license": {
      "name": "Fischer Identity Portal API LICX",
      "url": "https://api.fischeridenity.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/api/v1/configuration/aliases/domains": {
      "get": {
        "tags": [
          "Alias"
        ],
        "summary": "API to get a list of alias domain records",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Alias</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasDomainConfig"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasDomainConfig"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasDomainConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/aliases/configurations": {
      "get": {
        "tags": [
          "Alias"
        ],
        "summary": "API to get a list of alias configurations",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasRuntimeConfig"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasRuntimeConfig"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasRuntimeConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/aliases": {
      "get": {
        "tags": [
          "Alias"
        ],
        "summary": "API to get a list of the users' current aliases.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose aliases are desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfileAlias"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfileAlias"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserProfileAlias"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Alias"
        ],
        "summary": "API to create an alias.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Add</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Add</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user getting a new alias.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The id of the configuration used, id of the domain being used, the alias being created, and if\r\ndestination is added email address of the destination.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AliasCreation"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AliasCreation"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AliasCreation"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AliasCreation"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AliasCreation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasCreation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasCreation"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/aliases/details": {
      "get": {
        "tags": [
          "Alias"
        ],
        "summary": "API to get the list of details that are used for creating an alias and what is available.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose configurations will be used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasSuggestions"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasSuggestions"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasSuggestions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/aliases/{id}": {
      "patch": {
        "tags": [
          "Alias"
        ],
        "summary": "API to update an alias to add a destination or make primary.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose alias will be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the alias being modified",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileAlias"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileAlias"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileAlias"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Alias"
        ],
        "summary": "API to delete an alias.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose alias will be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the alias record that is being deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileAlias"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileAlias"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileAlias"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/aliases/deliverables": {
      "get": {
        "tags": [
          "Alias"
        ],
        "summary": "API to get the list of the current deliverables available.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose deliverables are desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasDeliverable"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasDeliverable"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AliasDeliverable"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Alias"
        ],
        "summary": "API to create a deliverable.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Add</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Add</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "email and label of deliverable.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateAliasDeliverable"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateAliasDeliverable"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateAliasDeliverable"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateAliasDeliverable"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AliasDeliverable"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasDeliverable"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasDeliverable"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/aliases/deliverables/send": {
      "post": {
        "tags": [
          "Alias"
        ],
        "summary": "API to send a confirmation PIN to a proposed new deliverable.",
        "description": "Use the /api/v1/runtime/pins/{pinId}/verify API to validate the PIN that was sent before\r\ncalling the create deliverable API. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The email address that will receive the pin",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AliasSendDeliverablePin"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AliasSendDeliverablePin"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AliasSendDeliverablePin"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AliasSendDeliverablePin"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AliasPinDeliverableResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasPinDeliverableResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasPinDeliverableResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/aliases/deliverables/{id}": {
      "delete": {
        "tags": [
          "Alias"
        ],
        "summary": "API to delete a current deliverable.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Aliases</td><td></td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageAliases</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user who contains the deliverable.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the deliverable that will be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AliasDeliverable"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasDeliverable"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasDeliverable"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/configurations/approvals": {
      "get": {
        "tags": [
          "ApprovalConfig"
        ],
        "summary": "Api for obtaining the approvals configuration.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/certifications/users/{userId}/counts": {
      "get": {
        "tags": [
          "Certification"
        ],
        "summary": "Return the count (pending and total) of the number of compliance certification requests the user has.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Compliance</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserMatchCount"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMatchCount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMatchCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/connected-systems": {
      "get": {
        "tags": [
          "ConnectedSystem"
        ],
        "summary": "Api for obtaining a list of connected systems.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Systems</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: owners",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectedSystem"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectedSystem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectedSystem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/connected-systems/{id}": {
      "get": {
        "tags": [
          "ConnectedSystem"
        ],
        "summary": "Api for obtaining the details of a specific Connected System.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>Administrator</td><td>Systems</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Connected System to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedSystem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedSystem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedSystem"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/connected-systems/types": {
      "get": {
        "tags": [
          "ConnectedSystem"
        ],
        "summary": "Api for obtaining a list of the types of connected systems.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Systems</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectedSystemType"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectedSystemType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectedSystemType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/connected-systems/types/{id}": {
      "get": {
        "tags": [
          "ConnectedSystem"
        ],
        "summary": "Api for obtaining the details of a specific Connected System Type.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Systems</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Connected System Type to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedSystemType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedSystemType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedSystemType"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/connected-systems/{id}/nodes": {
      "get": {
        "tags": [
          "ConnectedSystem"
        ],
        "summary": "Api to obtain a list of LDAP tree nodes",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Systems</td><td></td><td>Read</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Add</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the connected system to fetch the LDAP tree nodes from",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dn",
            "in": "query",
            "description": "The sub node whose children should be listed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: nodes",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapFilter",
            "in": "query",
            "description": "Ldap filter to filter the nodes returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LdapTreeNode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapTreeNode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapTreeNode"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/connected-systems/{id}/ldap-group-members": {
      "post": {
        "tags": [
          "ConnectedSystem"
        ],
        "summary": "Api to obtain a list of LDAP group members",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Systems</td><td></td><td>Read</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Add</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the connected system to fetch the group members from",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search criteria that defines where the LDAP group is located",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LdapConnectedSystemSearch"
                  }
                ],
                "description": "The search criteria for an LDAP query."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LdapConnectedSystemSearch"
                  }
                ],
                "description": "The search criteria for an LDAP query."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LdapConnectedSystemSearch"
                  }
                ],
                "description": "The search criteria for an LDAP query."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LdapConnectedSystemSearch"
                  }
                ],
                "description": "The search criteria for an LDAP query."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/cache/entries/{prefix}/{showDetails}": {
      "get": {
        "tags": [
          "DataCache"
        ],
        "summary": "Api for obtaining the details of a specific ProductAttribute.",
        "description": "Flag that indicates whether the cached values should be returned in the response.",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "description": "The prefix of the cache key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showDetails",
            "in": "path",
            "description": "Flag that indicates whether the cached values should be returned in the response.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataCacheSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCacheSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCacheSummary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/cache/keys/{prefix}": {
      "get": {
        "tags": [
          "DataCache"
        ],
        "summary": "Internal/dev Api for the cache",
        "description": "",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "description": "The prefix of the cache key to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/cache/keys": {
      "put": {
        "tags": [
          "DataCache"
        ],
        "summary": "Internal/dev Api for the cache",
        "description": "",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CacheClearAction"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CacheClearAction"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CacheClearAction"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CacheClearAction"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/screens/detail-screen/{screenId}": {
      "get": {
        "tags": [
          "DetailScreensRuntime"
        ],
        "summary": "Api for obtaining the definition of a dynamic detail screen.",
        "description": "",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "description": "The id of the screen.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DetailScreen"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailScreen"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailScreen"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/screens/detail-screen/types/{screenType}": {
      "get": {
        "tags": [
          "DetailScreensRuntime"
        ],
        "summary": "Api for obtaining the definition of a dynamic screen based on its type.",
        "description": "Returns the detail of the screen if there is only one instance of that screen type. If no screen of that type\r\nis configured, or more than one screen of that type is configured, then a status of 404 will be returned.",
        "parameters": [
          {
            "name": "screenType",
            "in": "path",
            "description": "The screen type of the screen whose details are desired.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DetailScreenType"
                }
              ],
              "description": "The type of detail screen."
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DetailScreen"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailScreen"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailScreen"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/screens/report-edit-attempt": {
      "post": {
        "tags": [
          "DetailScreensRuntime"
        ],
        "summary": "Notify administrators that an illegal attempt to edit non editable screen elements was attempted.",
        "description": "",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the screen elements that were illegally modified",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IllegalScreenEditDetail"
                  }
                ],
                "description": "Details of an attempt to edit one or more non editable screen elements."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IllegalScreenEditDetail"
                  }
                ],
                "description": "Details of an attempt to edit one or more non editable screen elements."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IllegalScreenEditDetail"
                  }
                ],
                "description": "Details of an attempt to edit one or more non editable screen elements."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IllegalScreenEditDetail"
                  }
                ],
                "description": "Details of an attempt to edit one or more non editable screen elements."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/duo": {
      "post": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to activate DuoSecurity authentication",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The phone or hardware token to be assigned to the user when registered.\r\nPhone or Token may be specified, but not both.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoActivateUser"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoActivateUser"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoActivateUser"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoActivateUser"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivateUserResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivateUserResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivateUserResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to deactivate DuoSecurity authentication.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/duo/devices": {
      "get": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to list the devices assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoPhone"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoPhone"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoPhone"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to associate a new device to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data that describes the new phone.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreatePhone"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreatePhone"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreatePhone"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreatePhone"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/duo/devices/{id}": {
      "get": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to get a specific device assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the phone to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoPhone"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoPhone"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoPhone"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to modify a specific device assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the phone to modify.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The phone to associate with the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreatePhone"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreatePhone"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreatePhone"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreatePhone"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoPhone"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoPhone"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoPhone"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to disassociate a specific device assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the phone to remove from the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/duo/devices/{id}/send-activation-code": {
      "post": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to send an activation code for device registration to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the phone to send an activation code to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The activation parameters.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoPhoneActivationCode"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoPhoneActivationCode"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoPhoneActivationCode"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoPhoneActivationCode"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/duo/tokens": {
      "get": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to list the tokens assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageDuoTokens</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoToken"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoToken"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoToken"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to assign a hardware token to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageDuoTokens</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The token to assign.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreateToken"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreateToken"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreateToken"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreateToken"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoToken"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoToken"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/duo/tokens/{id}": {
      "get": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to get a specific token assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageDuoTokens</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the token to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoToken"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoToken"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to unassign a hardware token from a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageDuoTokens</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the token to unassign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to resynchronize the codes generated by a hardware token.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user who has the token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the token to resync.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Three consecutive codes generated by the token",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuoActivationCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/duo/bypasscodes": {
      "get": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to list the bypass codes assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageDuoBypassCodes</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageDuoBypassCodes</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoBypassCode"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoBypassCode"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuoBypassCode"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to generate a set of bypass codes for a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageDuoBypassCodes</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageDuoBypassCodes</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data defining how the codes should be assigned to the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreateBypassCode"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreateBypassCode"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreateBypassCode"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DuoCreateBypassCode"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to remove all of the bypass codes assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageDuoBypassCodes</td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageDuoBypassCodes</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/duo/bypasscodes/{id}": {
      "delete": {
        "tags": [
          "DuoSecurity"
        ],
        "summary": "Api to remove all of the bypass codes assigned to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageDuoBypassCodes</td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageDuoBypassCodes</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the bypass code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/features": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "Api to obtain a list of feature records.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/features/{id}": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "Api to obtain a specific feature record.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the desired feature record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/kiosk/send-continue-notification": {
      "post": {
        "tags": [
          "ForgotPassword"
        ],
        "summary": "Api for sending a user a continue reset login id password process email notification so\r\nthey can continue the reset process as an authenticated user.",
        "description": "The PORTAL_URL substitution value is required.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user trying to reset their login password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The notification information for sending the message.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendContinueNotification"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendContinueNotification"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendContinueNotification"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendContinueNotification"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/KioskSendNotificationToAttributeResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KioskSendNotificationToAttributeResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/KioskSendNotificationToAttributeResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/kiosk/send-pin-notification": {
      "post": {
        "tags": [
          "ForgotPassword"
        ],
        "summary": "Api for sending a notification that contains a PIN value that must be verified before the user\r\ncan continue the reset password process.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user trying to reset their login password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The id of the user type that defines the notification information for sending the message.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/kiosk/user-forgot-password": {
      "get": {
        "tags": [
          "ForgotPassword"
        ],
        "summary": "Api for obtaining the kiosk forgot password configuration.",
        "description": "",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Api for obtaining a list of groups.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: ldapFilter, dynamicFilter, groupOfGroupConfiguration",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserGroup]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserGroup]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserGroup]"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Api for allowing creation of a user group.",
        "description": "Groups of type Persona can only be created via the Persona POST API. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Add</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group information.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserGroup"
                  }
                ],
                "description": "The properties that can be specified to create an Identity Group."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserGroup"
                  }
                ],
                "description": "The properties that can be specified to create an Identity Group."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserGroup"
                  }
                ],
                "description": "The properties that can be specified to create an Identity Group."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserGroup"
                  }
                ],
                "description": "The properties that can be specified to create an Identity Group."
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Api for obtaining the details of a specific Group.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Api to allow Modification of an existing user group.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the specific user group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Type and value of user group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                ],
                "description": "Details of the identity user group."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                ],
                "description": "Details of the identity user group."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                ],
                "description": "Details of the identity user group."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                ],
                "description": "Details of the identity user group."
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Api to allow deletion/removal of a user group.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the specific user group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Api to allow modification of an existing group.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the specific group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The changes to be applied to the groups.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/groups/test-dynamic-filter": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "API to return the list of users who qualify for a dynamic group filter.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Add</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "dynamicGroupFilter",
            "in": "query",
            "description": "The filter expression that qualifies the users",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/groups/{id}/members": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Api for obtaining a list of the members of a group.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group to list the members of",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: profile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserMember]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserMember]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserMember]"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Api for adding multiple members to a static group.",
        "description": "This Api is only available for Groups of type Static.  If the group represented by 'id'\r\nis not of type Static, then a 400 error will be returned. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group to add members too",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of userIds that should be added as members of the group",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Api for deleting multiple members of a static group.",
        "description": "This Api is only available for Groups of type Static.  If the group represented by 'id'\r\nis not of type Static, then a 400 error will be returned. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Groups</td><td></td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group to remove members from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of userIds that should be removed as members of the group",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/claim": {
      "post": {
        "tags": [
          "IdentityClaim"
        ],
        "summary": "Api for changing the claimed status of a user's Identity.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user claiming their account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The id of the user type that was used to claim the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaimAccount"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to claim the account."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaimAccount"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to claim the account."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaimAccount"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to claim the account."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaimAccount"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to claim the account."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/claim/send-continue-notification": {
      "post": {
        "tags": [
          "IdentityClaim"
        ],
        "summary": "Api for sending the user a continue claim process email notification or already claimed notification\r\ndepending on the user's account claim status.",
        "description": "<br>\r\n                    If the user account is not claimed, the continue claim notification is sent for the claim process.<br />\r\n                    If the user is claimed, the Identity Already Claimed Notification is sent for the claim process.\r\n                \r\n<br>\r\n                    The PORTAL_URL substitution value is required for Continue Claim Notification.\r\n                ",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user claiming their account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The notification information for sending the message.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendClaimContinueNotification"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to complete the authentication process."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendClaimContinueNotification"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to complete the authentication process."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendClaimContinueNotification"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to complete the authentication process."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendClaimContinueNotification"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to complete the authentication process."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/claim/send-pin-notification": {
      "post": {
        "tags": [
          "IdentityClaim"
        ],
        "summary": "Api for sending a notification that contains a PIN value that must be verified before the user\r\ncan continue the identity claim process.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user claiming their account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The id of the claim user type that defines the notification information\r\nfor sending the message.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendClaimPinNotification"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to complete the user authorization process."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendClaimPinNotification"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to complete the user authorization process."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendClaimPinNotification"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to complete the user authorization process."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendClaimPinNotification"
                  }
                ],
                "description": "The data necessary to send an email to the user that allows them to complete the user authorization process."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/kiosk/user-claim": {
      "get": {
        "tags": [
          "IdentityClaim"
        ],
        "summary": "Api for obtaining the Identity Claim configuration.",
        "description": "",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityClaimConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityClaimConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityClaimConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/schemas/identity-schemas": {
      "get": {
        "tags": [
          "IdentitySchema"
        ],
        "summary": "Api for obtaining the list of Product Attributes.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>All Features</td><td></td><td>Read</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Read</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentitySchema"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentitySchema"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentitySchema"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/schemas/identity-schemas/types/{type}": {
      "get": {
        "tags": [
          "IdentitySchema"
        ],
        "summary": "Api for listing product attributes of a specific type.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>All Features</td><td></td><td>Read</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Read</td></tr> <tr><td>Administrator</td><td>Groups</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "The schema type to filter the attribute list on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentitySchema"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentitySchema"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentitySchema"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/core/images": {
      "post": {
        "tags": [
          "Image"
        ],
        "summary": "Upload an image file",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Image",
                  "Type"
                ],
                "type": "object",
                "properties": {
                  "Image": {
                    "type": "string",
                    "description": "The details of the image file uploaded.",
                    "format": "binary"
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageFeatureType"
                      }
                    ],
                    "description": "The feature type for which the image is used.",
                    "example": "Avatar"
                  }
                }
              },
              "encoding": {
                "Image": {
                  "style": "form"
                },
                "Type": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v1/runtime/core/images/{id}": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Retrieve an image file by id.",
        "description": "Returns image file. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the image file",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Image"
        ],
        "summary": "Delete an image based on its id",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the image file",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/v1/runtime/screens/list-screen/{screenId}": {
      "get": {
        "tags": [
          "ListScreensRuntime"
        ],
        "summary": "Api for obtaining the definition of a dynamic listing screen.",
        "description": "",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "description": "The Id of the screen that contains the listing screen definition.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListScreen"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListScreen"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListScreen"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/screens/list-screen/types/{screenType}": {
      "get": {
        "tags": [
          "ListScreensRuntime"
        ],
        "summary": "Api for obtaining the definition of a dynamic listing screen based on its type.",
        "description": "Returns the listing of the screen if there is only one instance of that screen type. If no screen of that type\r\nis configured, or more than one screen of that type is configured, then a status of 404 will be returned.",
        "parameters": [
          {
            "name": "screenType",
            "in": "path",
            "description": "The type of the screen that contains the dynamic listing screen",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ListingScreenType"
                }
              ],
              "description": "The type of dynamic listing screen."
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListScreen"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListScreen"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListScreen"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/locales": {
      "get": {
        "tags": [
          "LocaleConfig"
        ],
        "summary": "Api for obtaining the list of configured locales.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Organizations</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductLocale"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductLocale"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductLocale"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/locate/{context}": {
      "get": {
        "tags": [
          "LocateUser"
        ],
        "summary": "Api for locating a user.",
        "description": "",
        "parameters": [
          {
            "name": "context",
            "in": "path",
            "description": "The context in which the user is trying to be located.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LocateUserContext"
                }
              ],
              "description": "The context in which the user is trying to be located."
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocatedUserProfile"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocatedUserProfile"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocatedUserProfile"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/helpdesk-notes": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Api for obtaining a list of notes.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CallHistory</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user the help desk was working with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Api to create note record with or without a tag.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CallHistory</td><td>Add</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNote"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNote"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNote"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNote"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/helpdesk-notes/{id}": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Api to retrieve a specific note record based on the Id.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CallHistory</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user the help desk was working with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the note record.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/notifications": {
      "get": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for obtaining a list of notification events.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Events</td><td>Notifications</td><td>Read</td></tr> <tr><td>Administrator</td><td>Notifications</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[NotificationEvent]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[NotificationEvent]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[NotificationEvent]"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/notifications/{id}": {
      "get": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for obtaining a specific notification event.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Events</td><td>Notifications</td><td>Read</td></tr> <tr><td>Administrator</td><td>Notifications</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the notification to be found",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/notifications/stop": {
      "post": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for stopping the delivery of one or more notification events.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Events</td><td>Notifications</td><td>Update</td></tr> <tr><td>Administrator</td><td>Notifications</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of notification event ids to be stopped.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/notifications/delete": {
      "post": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for deleting one or more notification events.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Events</td><td>Notifications</td><td>Delete</td></tr> <tr><td>Administrator</td><td>Notifications</td><td></td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of notification event ids to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/notifications/resend": {
      "post": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for resending one or more notification events to their existing destinations.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Events</td><td>Notifications</td><td>Update</td></tr> <tr><td>Administrator</td><td>Notifications</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of notification event ids to resend.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/notifications/{id}/stop": {
      "post": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for stopping the delivery of a notification event.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Events</td><td>Notifications</td><td>Update</td></tr> <tr><td>Administrator</td><td>Notifications</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the notification event to be stopped.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/notifications/{id}/delete": {
      "delete": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for deleting one or more notification events.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Events</td><td>Notifications</td><td>Delete</td></tr> <tr><td>Administrator</td><td>Notifications</td><td></td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the notification event to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/notifications/{id}/resend": {
      "post": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for attempting to resend a notification event.",
        "description": "If a new destination is not provided, notification will be sent to current destination <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Events</td><td>Notifications</td><td>Update</td></tr> <tr><td>Administrator</td><td>Notifications</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the notification event to be resend.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Destinations to resend the notification to.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationEventResend"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationEventResend"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationEventResend"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationEventResend"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/notifications": {
      "get": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for obtaining a list of notification events sent to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>Notifications</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user who the notification events were sent to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[NotificationEvent]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[NotificationEvent]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[NotificationEvent]"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/notifications/{id}": {
      "get": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for obtaining a specific notification event.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>Notifications</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user who the notification event was sent to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the notification to be found",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEvent"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/notifications/{id}/resend": {
      "post": {
        "tags": [
          "NotificationEvents"
        ],
        "summary": "Api for attempting to resend a notification event.",
        "description": "If a new destination is not provided, notification will be sent to current destination <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>Notifications</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user who the notification event was sent to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the notification event to be resent.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Destinations to resend the notification to.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationEventResend"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationEventResend"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationEventResend"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationEventResend"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Api for obtaining the list of installed Organizations.",
        "description": "Returns a list of organizations <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Organizations</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: admins",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/organizations/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Api for obtaining the details of a specific Organization.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Organizations</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: admins",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/organizations/{id}/admins": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Api for obtaining the list of administrators of an Organization.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Organizations</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IUserProfileSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IUserProfileSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IUserProfileSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/password-enforcements": {
      "get": {
        "tags": [
          "PasswordEnforcement"
        ],
        "summary": "Api for obtaining a list of password policy enforcements.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: systems, notifications, groups",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordEnforcement"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordEnforcement"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordEnforcement"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/password-enforcements/{id}": {
      "get": {
        "tags": [
          "PasswordEnforcement"
        ],
        "summary": "Api for obtaining the details of a specific password policy enforcement.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the item to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordEnforcement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordEnforcement"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordEnforcement"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/password-policies": {
      "get": {
        "tags": [
          "PasswordPolicy"
        ],
        "summary": "Api for obtaining a list of password policies.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: details",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordPolicy"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordPolicy"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordPolicy"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/password-policies/{id}": {
      "get": {
        "tags": [
          "PasswordPolicy"
        ],
        "summary": "Api for obtaining the details of a specific password policies.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the item to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicy"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicy"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicy"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/personas": {
      "get": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for obtaining the list of personas.",
        "description": "Returns a list of personas. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: features, groups",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[Persona]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[Persona]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[Persona]"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Persona"
        ],
        "summary": "Api to create a new persona.",
        "description": "This api will create a persona with the 'en' locale text. To configure the persona locale\r\ntexts in other locales, use the /api/v1/configuration/persona/{personaId}/locales endpoint.\r\nOnly features of the same type may be assigned to the persona.\r\nPersona's of type Identity may not have any features associated with them. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Add</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New persona details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaCreate"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaCreate"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaCreate"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaCreate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/personas/{id}": {
      "get": {
        "tags": [
          "Persona"
        ],
        "summary": "Api to retrieve a specific persona record based on the Id.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the persona record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for the modification of an existing persona record.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the persona record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The changes being applied to the record.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaUpdate"
                  }
                ],
                "description": "Details of an identity persona that can be modified."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaUpdate"
                  }
                ],
                "description": "Details of an identity persona that can be modified."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaUpdate"
                  }
                ],
                "description": "Details of an identity persona that can be modified."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaUpdate"
                  }
                ],
                "description": "Details of an identity persona that can be modified."
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for the deletion/removal of a persona record.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the persona record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for the modification of an existing persona record.",
        "description": "Only Name, Priority, Enabled, Type, Features, and Groups are modifiable fields.\r\n<br>\r\n    If the path is /features, then the value must be an array of FeaturePermissionCreateUpdate objects that\r\n    represent the new set of features associated with this persona.\r\n<br>\r\n    If the path is /groups, then the value must be an array of group ids that represent the new set of\r\n    groups that qualify membership in this persona.\r\n <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the persona record the user desires to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The changes being applied to the record.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Persona"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/personas/{id}/members": {
      "get": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for obtaining a list of members of the persona.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the persona",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: profile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserMember]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserMember]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserMember]"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/personas/{id}/locales": {
      "get": {
        "tags": [
          "Persona"
        ],
        "summary": "Api to retrieve a locale text of a persona record.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the persona record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for the creation of one or more persona locale texts.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the persona record to add locale text to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of locale texts (display name and description) to be created.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/personas/{personaId}/locales/{id}": {
      "get": {
        "tags": [
          "Persona"
        ],
        "summary": "Api to retrieve a locale text of a persona record.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "personaId",
            "in": "path",
            "description": "The Id of the persona record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the persona locale record to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for the modification of a specific persona locale text.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "personaId",
            "in": "path",
            "description": "The Id of the persona record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the persona locale record to modify.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The modified locale text (display name and description) to be set on the persona.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                ],
                "description": "The locale specific information associated with a persona."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                ],
                "description": "The locale specific information associated with a persona."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                ],
                "description": "The locale specific information associated with a persona."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonaLocale"
                  }
                ],
                "description": "The locale specific information associated with a persona."
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for the modification of an existing persona locale text.",
        "description": "Only DisplayName and Description are modifiable fields. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "personaId",
            "in": "path",
            "description": "The Id of the persona record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the persona locale record to modify.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The modified locale text (display name and description) to be set on the persona.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Persona"
        ],
        "summary": "Api for the deletion of a specific persona locale text.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>Administrator</td><td>Personas</td><td></td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "personaId",
            "in": "path",
            "description": "The Id of the persona record to delete a locale text from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the persona locale record to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonaLocale"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/helpdesk/send-pin-notification": {
      "post": {
        "tags": [
          "Pin"
        ],
        "summary": "Api for sending a notification that contains a PIN value that must be verified before the help desk\r\ncan perform any actions on the user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user that the help desk user is assisting",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The id of attribute that contains the destination address of the notification, and any substitution\r\nvalues that should be inserted into the notification template.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HelpDeskSendVerifyPinRequest"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HelpDeskSendVerifyPinRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HelpDeskSendVerifyPinRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HelpDeskSendVerifyPinRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/pins/{pinId}/verify": {
      "post": {
        "tags": [
          "Pin"
        ],
        "summary": "Api to verify that the pin matches what was generated.",
        "description": "",
        "parameters": [
          {
            "name": "pinId",
            "in": "path",
            "description": "Id of the pin record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The pin that was sent to the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/resources/{resourceId}/attributes/{attributeId}/validate": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Api for performing the validation of a custom resource attribute based on an external system query.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "The id of the resource where the attributes are associated with.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The id of the custom attribute whose value is being validated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The profile attributes that should be substituted for dynamic queries.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/screens/{screenId}/elements/{id}/initial-value": {
      "post": {
        "tags": [
          "ScreenElementsRuntime"
        ],
        "summary": "Api for obtaining the initial value of a dynamic screen element that is based on an external system query.",
        "description": "The DetailScreensRuntime API should be called prior to calling this API to see if the initial value depends on\r\nother Product Attribute values.These values can be obtained from the\r\nDetailScreen.elements[x].attribute.references.initialValues\r\nof the API.\r\nIf the initial value is dependent, then the UserId of the user whose values should be\r\nsubstituted (for example a manager) or the actual dependent Product Attribute values if they are on the same screen\r\nmust be supplied when making this call.",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "description": "The id of the screen that contains the screen element.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the screen element",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The profile attributes that should be substituted for dynamic queries",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InitialValueResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitialValueResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitialValueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/screens/{screenId}/elements/{id}/validate": {
      "post": {
        "tags": [
          "ScreenElementsRuntime"
        ],
        "summary": "Api for performing the validation of a dynamic screen element value based on an external system query or uniqueness\r\ncheck.",
        "description": "The DetailScreensRuntime API should be called prior to calling this API, to see if\r\nthe validators depend on other Product Attribute values.\r\nThese values can be obtained from the DetailScreen.elements[x].attribute.references.validations\r\nof the API. If the validators are dependent, then\r\nthe UserId of the user whose values should be substituted (for\r\nexample a manager)  or actual dependent Product Attribute values must be supplied when making this call.",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "description": "The id of the screen that contains the screen element.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the screen element",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The profile attributes that should be substituted for dynamic queries",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/screens/{screenId}/elements/{id}/values": {
      "post": {
        "tags": [
          "ScreenElementsRuntime"
        ],
        "summary": "Api for obtaining the list of values associated with the screen element.",
        "description": "This API should be called only when the ScreenElement.valueType is not \"InputValue\".\r\nThe list of values will be generated from the Product Attribute configuration of the attribute\r\nassociated with this element. The DetailScreensRuntime API should be called prior to calling this API\r\nto see if the value list depends on other Product Attribute values.\r\nThese values can be obtained from the DetailScreen.elements[x].attribute.references.values\r\nof the API. If the value list is dependent, then the UserId of the user whose values should be\r\nsubstituted (for example a manager) or actual dependent Product Attribute values must be supplied when making this\r\ncall. Note, if the screen element values are defined as static in the Product Attribute configuration, then\r\nthe DetailScreensRuntime API will have already returned the values for this element as part of the screen\r\ndefinition.",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "description": "The id of the screen that contains the screen element.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the screen element",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The profile attributes that should be substituted for dynamic queries",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RemoteQuery"
                  }
                ],
                "description": "Screen element initial value query input"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "Remote query event response.  Results will be a list (table rows) of one or more Dictionary objects (result set\r\ncolumn/value pairs)."
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "Remote query event response.  Results will be a list (table rows) of one or more Dictionary objects (result set\r\ncolumn/value pairs)."
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "Remote query event response.  Results will be a list (table rows) of one or more Dictionary objects (result set\r\ncolumn/value pairs)."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/screens/{screenId}/elements/{id}/start-workflow": {
      "post": {
        "tags": [
          "ScreenElementsRuntime"
        ],
        "summary": "Api for starting a workflow that is represented by a screen element.",
        "description": "",
        "parameters": [
          {
            "name": "screenId",
            "in": "path",
            "description": "The id of the screen that contains a workflow button.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the workflow button screen element",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data that the workflow should be started with.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v1/configuration/kiosk/user-registration": {
      "get": {
        "tags": [
          "SelfRegistration"
        ],
        "summary": "Api for obtaining the self-registration configuration.",
        "description": "",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SelfRegistrationConfiguration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfRegistrationConfiguration"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfRegistrationConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/signups": {
      "post": {
        "tags": [
          "SelfRegistration"
        ],
        "summary": "Api for submitting a new user self-registration request.",
        "description": "",
        "requestBody": {
          "description": "Details for a self-registration request.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SelfRegistration"
                  }
                ],
                "description": "Details of a self registration request."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SelfRegistration"
                  }
                ],
                "description": "Details of a self registration request."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SelfRegistration"
                  }
                ],
                "description": "Details of a self registration request."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SelfRegistration"
                  }
                ],
                "description": "Details of a self registration request."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/user/signups/{userId}": {
      "get": {
        "tags": [
          "SelfRegistration"
        ],
        "summary": "Api to fetch user data for a user that is pending provisioning.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user that is pending provisioning.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: managers",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "A map of profile based Product Attributes that define an identity that is pending provisioning."
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "A map of profile based Product Attributes that define an identity that is pending provisioning."
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "A map of profile based Product Attributes that define an identity that is pending provisioning."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/self-service/url": {
      "get": {
        "tags": [
          "SelfServiceUrlConfig"
        ],
        "summary": "Api for obtaining the url of the self-service autologin page.",
        "description": "",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SelfServiceUrlConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfServiceUrlConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfServiceUrlConfig"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/tags/helpdesk-notes": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Api to get a list of tags.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CallHistory</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteTag"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteTag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteTag"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Api to create a tag record for notes.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CreateCallHistoryTag</td><td>Add</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the new tag",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNoteTag"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNoteTag"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNoteTag"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNoteTag"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/tags/helpdesk-notes/{id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Api to get a tag by id.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CallHistory</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CreateCallHistoryTag</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the tag record.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTag"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTag"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTag"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Api to delete a tag record.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CreateCallHistoryTag</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the tag record.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tags"
        ],
        "summary": "Api to update a specific tag record.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>CreateCallHistoryTag</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the tag record the user wants to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTag"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTag"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteTag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/totp": {
      "post": {
        "tags": [
          "TotpSecurity"
        ],
        "summary": "API to activate TOTP authentication.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TotpResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotpResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TotpSecurity"
        ],
        "summary": "API to deactivate TOTP authentication.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td>ManageSecurity</td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/totp/pin": {
      "post": {
        "tags": [
          "TotpSecurity"
        ],
        "summary": "Api to verify the pin provided for TOTP.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The six digit code on authenticator.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security/totp/qrcode": {
      "get": {
        "tags": [
          "TotpSecurity"
        ],
        "summary": "Api to get the QR code for totp.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ManageSecurity</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user whose QR code for TOTP should be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/alerts/acceptable-use/{context}": {
      "get": {
        "tags": [
          "UserAcceptableUses"
        ],
        "summary": "Api for obtaining the acceptable use policies of the user whose acceptable uses should be read.",
        "description": "Returns a list of alerts that the user should see.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose acceptable uses should be listed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "path",
            "description": "The feature that is requesting the policies.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LoginContext"
                }
              ],
              "description": "The Portal feature that the request is originating from."
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IAcceptableUse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IAcceptableUse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IAcceptableUse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/alerts/acceptable-use/{id}/{policyAction}": {
      "post": {
        "tags": [
          "UserAcceptableUses"
        ],
        "summary": "Api for indicating the user has read and accepted the acceptable use policy.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user accepting or denying the acceptable use policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the acceptable use",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "policyAction",
            "in": "path",
            "description": "The user's response to seeing the acceptable use policy.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AcceptableUsePolicyAction"
                }
              ]
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/accounts": {
      "get": {
        "tags": [
          "UserAccounts"
        ],
        "summary": "Api for obtaining a list of accounts belonging to a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>EnableAccounts</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>DisableAccounts</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ValidateAccounts</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ViewUserAccess</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the account owner.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserAccount]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserAccount]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserAccount]"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/accounts/{id}": {
      "get": {
        "tags": [
          "UserAccounts"
        ],
        "summary": "Api for obtaining the details of a specific account.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>EnableAccounts</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>DisableAccounts</td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ViewUserAccess</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the account owner.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the account to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccount"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/accounts/status": {
      "get": {
        "tags": [
          "UserAccounts"
        ],
        "summary": "Api for obtaining the system defined status of accounts associated with a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ValidateAccounts</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the account owner.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIds",
            "in": "query",
            "description": "The ids of the accounts whose statuses are desired.  If null, or empty the status of all of the user's\r\naccounts will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountStatus"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountStatus"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/accounts/{id}/{actionType}": {
      "post": {
        "tags": [
          "UserAccounts"
        ],
        "summary": "Api for performing an action on one or more user accounts.",
        "description": "The password field is only applicable if ActionType is ValidatePassword. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>EnableAccounts</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>DisableAccounts</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ValidateAccounts</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the owner of the account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the account to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "actionType",
            "in": "path",
            "description": "The action to perform on the account.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountActionType"
                }
              ],
              "description": "The type of actions that can be performed on an account."
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The account password to verify.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/accounts/{actionType}": {
      "post": {
        "tags": [
          "UserAccounts"
        ],
        "summary": "Api for performing an action on one or more user accounts.",
        "description": "The password field is only applicable if ActionType is ValidatePassword. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>EnableAccounts</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>DisableAccounts</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ValidateAccounts</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId of the owner of the account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionType",
            "in": "path",
            "description": "The action to perform on the accounts.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountActionType"
                }
              ],
              "description": "The type of actions that can be performed on an account."
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of account ids that should be enabled.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountActions"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountActions"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountActions"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountActions"
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/delegation": {
      "get": {
        "tags": [
          "UserApprovalDelegation"
        ],
        "summary": "Api to get the details of the approval delegation.",
        "description": "Returns Approval delegation state. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td>ApprovalDelegation</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user that contains the details of the approval delegation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalDelegation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalDelegation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalDelegation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserApprovalDelegation"
        ],
        "summary": "Api to update the Approval Delegation status and details for a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td>ApprovalDelegation</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose delegation details are desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new delegation state of the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalDelegationUpdate"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalDelegationUpdate"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalDelegationUpdate"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalDelegationUpdate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/delegation/approvers": {
      "get": {
        "tags": [
          "UserApprovalDelegation"
        ],
        "summary": "Api to get the details of who is delegating their approvals to a user.",
        "description": "Returns Approver Details For Delegation ViewModel <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td>ApprovalDelegation</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user who delegated approvals to a user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DelegatedApprovalDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegatedApprovalDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegatedApprovalDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals": {
      "get": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for obtaining a list of approvals the user needs to process.",
        "description": "Returns a list of approvals that the user should see. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose approvals are desired",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[Approval]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[Approval]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[Approval]"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/count": {
      "get": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for obtaining the number of open approvals the user needs to process.",
        "description": "Returns the users approval count and delegated approval count. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose approval count is desired",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalCount"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalCount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}": {
      "get": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for obtaining the details of an approval.",
        "description": "Returns the approval details. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose approval details is desired",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the approval",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Approval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Approval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Approval"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/resources": {
      "get": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for obtaining a list of resources on a specific approval.",
        "description": "Returns a list of resources that are on the approval. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose approval resources are desired",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the approval",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: history",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IApprovalDetail"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IApprovalDetail"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IApprovalDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/resources/{resourceId}": {
      "get": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for obtaining the details of a resource that is on a specific approval.",
        "description": "Returns the resource details <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose approval resources are desired",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the approval",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Id of resource on the approval to query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IApprovalDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IApprovalDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IApprovalDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/resources/{resourceId}/rfi": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "API to create a request for more information about a specific approval resource.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td>RequestForInformation</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the owner of the approval.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of approval to request more information on.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Id of resource on the approval to request more information on",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the request being sent out containing what is needed and which user should be\r\nreceiving it.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalInformation"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalInformation"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalInformation"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalInformation"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/resources/{resourceId}/escalate": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for escalating the approval request for a specific approval resource.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id of the user who is escalating the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Id of the resource on the approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the escalate request event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalAction"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalAction"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalAction"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalAction"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/resources/{resourceId}/deny": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for denying the approval request for a specific approval resource.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id of the user who is denying the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Id of the resource on the approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the deny request event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalAction"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalAction"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalAction"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalAction"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/resources/{resourceId}/approve": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for approving the approval request for a specific approval resource.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id of the user who is approving the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Id of the resource on the approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the approve request event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApproveAction"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApproveAction"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApproveAction"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApproveAction"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/resources/{resourceId}/reassign": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for reassigning the approval request for a specific approval resource.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id of the user who is reassigning the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Id of the resource on the approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the reassign request event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalReassign"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalReassign"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalReassign"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalReassign"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/escalate": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for escalating approvals in bulk. All resources that are still pending on the approval will be escalated.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id of the user who is escalating the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the bulk escalate request event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkAction"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkAction"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkAction"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkAction"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/deny": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for denying approvals in bulk. All resources that are still pending on the approval will be denied.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id of the user who is denying the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the bulk deny request event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkAction"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkAction"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkAction"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkAction"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/approve": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for approving approvals in bulk. All resources that are still pending on the approval will be approved.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id of the user who is approving the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the bulk approve request event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BulkApproveAction"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BulkApproveAction"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BulkApproveAction"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BulkApproveAction"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/{id}/reassign": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for re-assigning approvals in bulk. All resources that are still pending on the approval will be re-assigned.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id who the approval request is assigned to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Approval.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the bulk reassign request event.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkReassignAction"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkReassignAction"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkReassignAction"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalBulkReassignAction"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/rfis/{rfiId}/reply": {
      "post": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "API to reply to a request for information.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td>RequestForInformation</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of user who received a request for information",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rfiId",
            "in": "path",
            "description": "The id of the approval request info that is being replied to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Information being sent out in response to RFI.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalReply"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalReply"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalReply"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApprovalReply"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/approvals/rfis": {
      "get": {
        "tags": [
          "UserApprovals"
        ],
        "summary": "Api for obtaining a list of RFI's on an approval resource.",
        "description": "Returns a list of RFI's on an approval resource. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Approvals</td><td>RequestForInformation</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose RFI details are desired",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApprovalRfi"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApprovalRfi"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApprovalRfi"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/apps": {
      "get": {
        "tags": [
          "UserApps"
        ],
        "summary": "Api for obtaining the list of apps the user qualifies for.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Apps</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose apps are desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppSystem"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppSystem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppSystem"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "UserApps"
        ],
        "summary": "Api to allow modification of an existing user's list of apps.",
        "description": "The pinned state and last accessed datetime are the only properties of an app that can be\r\nupdated. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Apps</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's UserId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The changes to be applied to the apps.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JsonPatchDocument`1"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JsonPatchDocument`1"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JsonPatchDocument`1"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JsonPatchDocument`1"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/apps/{id}": {
      "get": {
        "tags": [
          "UserApps"
        ],
        "summary": "Api for obtaining the details of a specific app.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Apps</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user who has access to the app.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the app whose details are desired.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "UserApps"
        ],
        "summary": "Api to allow modification of an existing user app.",
        "description": "The pinned state and last accessed datetime are the only properties of an app that can be\r\nupdated. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Apps</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the specific user app.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The user's UserId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The changes to be applied to the app.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSystem"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/attribute-verifications": {
      "get": {
        "tags": [
          "UserAttributeVerification"
        ],
        "summary": "Api for obtaining all of a user's verified attributes.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose verified attributes are desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAttributeVerification"
        ],
        "summary": "Api that creates an attribute verification record to indicate that a specific user's attribute value\r\nhas been verified.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose attribute has been verified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attribute and value that was verified as belonging to the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserAttributeVerification"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserAttributeVerification"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserAttributeVerification"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateUserAttributeVerification"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/attribute-verifications/{id}": {
      "get": {
        "tags": [
          "UserAttributeVerification"
        ],
        "summary": "Api for obtaining a specific user attribute id verification.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the specific verified attribute.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserAttributeVerification"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAttributeVerification"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAttributeVerification"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserAttributeVerification"
        ],
        "summary": "Api to allow the deletion/removal of a user attribute verification.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Delete</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user attribute verification being deleted/removed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/configurations/reset-password": {
      "get": {
        "tags": [
          "UserConfigurations"
        ],
        "summary": "Api for obtaining password enforcement configuration details of a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>EnableAccounts</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>DisableAccounts</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ValidateAccounts</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose password configuration is desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetConfiguration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetConfiguration"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/configurations/profile": {
      "get": {
        "tags": [
          "UserConfigurations"
        ],
        "summary": "Api for obtaining the self profile update configuration.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose self profile update configuration is desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SelfProfileUpdateConfiguration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfProfileUpdateConfiguration"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfProfileUpdateConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/configurations/help-desk": {
      "get": {
        "tags": [
          "UserConfigurations"
        ],
        "summary": "Api for obtaining the help-desk configuration of a beneficiary.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user being managed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileUpdateConfiguration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileUpdateConfiguration"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileUpdateConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/entitlments": {
      "get": {
        "tags": [
          "UserEntitlement"
        ],
        "summary": "API to get a list of the user's entitlements.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ViewUserAccess</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose entitlements are desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntitlement"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntitlement"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntitlement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/entitlments/{id}": {
      "get": {
        "tags": [
          "UserEntitlement"
        ],
        "summary": "API to get a user entitlement by id.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ViewUserAccess</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose entitlement is desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user entitlement.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntitlement"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntitlement"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntitlement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/recover-id": {
      "post": {
        "tags": [
          "UserIdRecovery"
        ],
        "summary": "Api to request that a user's userId be sent to them.",
        "description": "The PORTAL_URL substitution value is required.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user who is requesting their login id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Notification delivery configuration parameters",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/recover-id/send-continue-notification": {
      "post": {
        "tags": [
          "UserIdRecovery"
        ],
        "summary": "Api for sending the user a continue recover id email notification that contains a link that when\r\nclicked will complete the user verification process.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user trying to recover their user login id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The notification information for sending the message.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendContinueNotification"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendContinueNotification"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendContinueNotification"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendContinueNotification"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/KioskSendNotificationToAttributeResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KioskSendNotificationToAttributeResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/KioskSendNotificationToAttributeResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/recover-id/send-pin-notification": {
      "post": {
        "tags": [
          "UserIdRecovery"
        ],
        "summary": "Api for sending a notification that contains a PIN value that must be verified before the user\r\ncan continue the recover user id process.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user claiming their account.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The id of the claim user type that defines the notification information\r\nfor sending the message.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KioskSendRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinNotificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/kiosk/user-recover-id": {
      "get": {
        "tags": [
          "UserIdRecovery"
        ],
        "summary": "Api for obtaining the user id recovery configuration.",
        "description": "",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserIdRecoveryConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIdRecoveryConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIdRecoveryConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/login/{context}": {
      "get": {
        "tags": [
          "UserLogin"
        ],
        "summary": "Api to get the login state/personas of a user by UserId.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user containing the login info to obtain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "path",
            "description": "The Portal feature that the request is originating from.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LoginContext"
                }
              ],
              "description": "The Portal feature that the request is originating from."
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userName}/login/username/{context}": {
      "get": {
        "tags": [
          "UserLogin"
        ],
        "summary": "Api to get the login state/personas of a user by the user's userName.",
        "description": "",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "The username of the user containing the login info to obtain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "path",
            "description": "The Portal feature that the request is originating from.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LoginContext"
                }
              ],
              "description": "The Portal feature that the request is originating from."
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/last-login-date": {
      "get": {
        "tags": [
          "UserLogin"
        ],
        "summary": "Api to get the date and time of the user's last login to the Identity system.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user's who last login time is desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/alerts/information/{context}": {
      "get": {
        "tags": [
          "UserLoginAlerts"
        ],
        "summary": "Api for obtaining the information alerts that a user should read.",
        "description": "Returns a list of alerts that the user should see.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose login alerts are desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "path",
            "description": "Feature that is trying to display the alerts for a user",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LoginContext"
                }
              ],
              "description": "The Portal feature that the request is originating from."
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IInformationAlert"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IInformationAlert"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IInformationAlert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/alerts/information/{id}/{alertAction}": {
      "post": {
        "tags": [
          "UserLoginAlerts"
        ],
        "summary": "Api for indicating the user has seen an information alert.",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user marking that they have seen the information alert",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the information alert",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "alertAction",
            "in": "path",
            "description": "The user's response to seeing the information alert.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/InformationAlertAction"
                }
              ]
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/login-history": {
      "get": {
        "tags": [
          "UserLoginHistory"
        ],
        "summary": "Api for obtaining the login history of a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ViewLoginHistory</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user containing the login history to obtain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[LoginHistory]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[LoginHistory]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[LoginHistory]"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/user-matches/count": {
      "get": {
        "tags": [
          "UserMatch"
        ],
        "summary": "Api for obtaining the count of a user's user match requests.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>User Match</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserMatchCount"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMatchCount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMatchCount"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/passwords/reset": {
      "post": {
        "tags": [
          "UserPasswordManager"
        ],
        "summary": "Api for resetting the password on one or more user accounts.",
        "description": "If the account qualifies for a password policy, the password will be validated against the policy before the\r\naccount is reset.  If the password does not meet the policy, the account will not be reset.\r\nThe Password Rule Statuses will only be returned if the password does not meet the policy. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Password reset details containing new password and accountId of desired account or\r\naccounts.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PasswordReset"
                  }
                ],
                "description": "Reset Password command view model"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PasswordReset"
                  }
                ],
                "description": "Reset Password command view model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PasswordReset"
                  }
                ],
                "description": "Reset Password command view model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PasswordReset"
                  }
                ],
                "description": "Reset Password command view model"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordResetResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordResetResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordResetResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/passwords/change": {
      "post": {
        "tags": [
          "UserPasswordManager"
        ],
        "summary": "Api for resetting the password on a single user account where the existing password is required to reset\r\nthe password.",
        "description": "If the account qualifies for a password policy, the password will be validated against the\r\npolicy before the account is reset.  If the password does not meet the policy, the account will not be reset. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Change password details containing existing and new password for desired account.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangePasswordRequest"
                  }
                ],
                "description": "Change Password command view model"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangePasswordRequest"
                  }
                ],
                "description": "Change Password command view model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangePasswordRequest"
                  }
                ],
                "description": "Change Password command view model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangePasswordRequest"
                  }
                ],
                "description": "Change Password command view model"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordRuleStatus"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordRuleStatus"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordRuleStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/passwords/generate": {
      "post": {
        "tags": [
          "UserPasswordManager"
        ],
        "summary": "Api for generating a password that satisfies the password policies that govern the accounts passed in.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Ids of the accounts that meet password policies.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeneratePassword"
                  }
                ],
                "description": "Generate Password command view model"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeneratePassword"
                  }
                ],
                "description": "Generate Password command view model"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeneratePassword"
                  }
                ],
                "description": "Generate Password command view model"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeneratePassword"
                  }
                ],
                "description": "Generate Password command view model"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratePasswordResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratePasswordResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratePasswordResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/passwords/{id}/generate": {
      "post": {
        "tags": [
          "UserPasswordManager"
        ],
        "summary": "Api for generating a password that satisfies the specified password policy id.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the password policy.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratePasswordResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratePasswordResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratePasswordResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/passwords/{id}/validate": {
      "post": {
        "tags": [
          "UserPasswordManager"
        ],
        "summary": "Api for testing a password to see if it satisfies the specified password policy id.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ResetPasswords</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the password policy.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The password to test against the password policy.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ValidatePassword"
                  }
                ],
                "description": "Test a password against a password policy action"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ValidatePassword"
                  }
                ],
                "description": "Test a password against a password policy action"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ValidatePassword"
                  }
                ],
                "description": "Test a password against a password policy action"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ValidatePassword"
                  }
                ],
                "description": "Test a password against a password policy action"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordRuleStatus"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordRuleStatus"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordRuleStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/{actionType}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Api to request enable or disable a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>DelegatedAdministrator</td><td>Users</td><td>EnableDisableUserAccess</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user whose access will be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionType",
            "in": "path",
            "description": "Type of action being requested enable or disable.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserActionType"
                }
              ],
              "description": "The type of actions that can be performed on a user."
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The reason why the user is being enabled or disabled.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RequestEnableDisableAccess"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RequestEnableDisableAccess"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RequestEnableDisableAccess"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RequestEnableDisableAccess"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SelfServiceRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfServiceRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfServiceRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Api for obtaining a list of users.",
        "description": "If context is specified, then the context specific search criteria will be added to\r\nany filter clause that was specified. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>ProfileDetails</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "The context of the user list",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserListContext"
                }
              ],
              "description": "The context from which the GET /users API is being called from."
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[UserProfile]"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Api for obtaining a user's details.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>ProfileDetails</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id (pbwuserid) of the user to find.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: job-Managers",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "A map of profile based Product Attributes that define an identity."
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "A map of profile based Product Attributes that define an identity."
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { },
                  "description": "A map of profile based Product Attributes that define an identity."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Api for updating a user's details.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td>UpdateProfile</td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new user details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { },
                "description": "A map of profile based Product Attributes that define an identity."
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { },
                "description": "A map of profile based Product Attributes that define an identity."
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { },
                "description": "A map of profile based Product Attributes that define an identity."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": { },
                "description": "A map of profile based Product Attributes that define an identity."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Api for obtaining the qualified groups of a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: details",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[IItemListIdDetailResult[UserGroup]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[IItemListIdDetailResult[UserGroup]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[IItemListIdDetailResult[UserGroup]]"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/personas": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Api for obtaining the qualified personas of a user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: details",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The number of the page to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[IItemListIdDetailResult[Persona]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[IItemListIdDetailResult[Persona]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagedList[IItemListIdDetailResult[Persona]]"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/attribute-categories": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Api to return the attributes of each profile attribute category.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/policies": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "API to list a user's policy memberships.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>ViewPolicyMembership</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user needing list of policy memberships.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyMembership"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyMembership"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyMembership"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/policies/{policyId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Api to list the resources associated with a policy that have been provisioned by the user.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user needing list of policy resources.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "Id of the policy to get the resources from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyResource"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/settings": {
      "get": {
        "tags": [
          "UserSettings"
        ],
        "summary": "Api for obtaining all of a user's settings.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Preferences</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the specified user to obtain that user's settings.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserSettings"
        ],
        "summary": "Api for allowing creation of a user setting.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Preferences</td><td></td><td>Add</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's UserId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Type and value of user setting.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                ],
                "description": "A user specific configuration setting that was set in the Portal UI."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                ],
                "description": "A user specific configuration setting that was set in the Portal UI."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                ],
                "description": "A user specific configuration setting that was set in the Portal UI."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                ],
                "description": "A user specific configuration setting that was set in the Portal UI."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserSettings"
        ],
        "summary": "Api to allow Modification of an existing user setting.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Preferences</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's UserId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Type and value of user setting.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                ],
                "description": "A user specific configuration setting that was set in the Portal UI."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                ],
                "description": "A user specific configuration setting that was set in the Portal UI."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                ],
                "description": "A user specific configuration setting that was set in the Portal UI."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                ],
                "description": "A user specific configuration setting that was set in the Portal UI."
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/settings/{id}": {
      "delete": {
        "tags": [
          "UserSettings"
        ],
        "summary": "Api to allow deletion/removal of a user setting.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Preferences</td><td></td><td>Delete</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the specific user setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "UserSettings"
        ],
        "summary": "Api to allow Modification of an existing user setting.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Preferences</td><td></td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the specific user setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The user's UserId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Type and value of user setting.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/security": {
      "get": {
        "tags": [
          "UsersSecurity"
        ],
        "summary": "Api for obtaining a list of a user's security factors.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Security</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td></td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose security factors are desired.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API. If the header is not specified, then the userId in the route must be the id of a user who is in an unclaimed state.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurity"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/users/verifications": {
      "get": {
        "tags": [
          "UserVerificationConfig"
        ],
        "summary": "Api for obtaining a list of data validation configuration items.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "A filter used to limit the results that are returned. For more information see [Filter]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Include extended data in the response.<br/><br/><i>Available values</i>: attributes",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A list of field names and direction that indicate how the result should be sorted. For more information see [OrderBy]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataValidation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataValidation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataValidation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/configuration/users/verifications/{id}": {
      "get": {
        "tags": [
          "UserVerificationConfig"
        ],
        "summary": "Api for obtaining the details of a specific data validation configuration item.",
        "description": " <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Read</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Read</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the item to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataValidation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValidation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataValidation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/runtime/users/{userId}/verifications/{id}/send": {
      "post": {
        "tags": [
          "UserVerifications"
        ],
        "summary": "API for sending a PIN to the user to verify they authorized a change in profile data.",
        "description": "A PIN will be sent to each changed attribute found in changes that is configured in the\r\nUserVerification configuration represented by id.  The PINs that are sent out should be\r\nverified before the profile is updated. Use the /api/v1/runtime/pins/{pinId}/verify API\r\nto validate the PIN that was sent. <p><b>Authorization requirements:</b><table> <thead><th>Persona Type</th><th>Feature</th><th>Sub Feature</th><th>Permission</th></thead><tbody> <tr><td>EndUser</td><td>My Profile</td><td></td><td>Update</td></tr> <tr><td>DelegatedAdministrator</td><td>Users</td><td>UpdateProfile</td><td>Update</td></tr></tbody></table></p>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UserId of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the UserVerification configuration",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Fii-UserId",
            "in": "header",
            "description": "The UserId of the current logged in user, or the Id of the user that is performing the operation. This userId will be used to determine API authorization and will be the user that appears in any audit events generated by the API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Map of profile attributes that have changed and their new values.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataVerification"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataVerification"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataVerification"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataVerification"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PinNotificationResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PinNotificationResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PinNotificationResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptableUsePolicyAction": {
        "enum": [
          "Decline",
          "Accept"
        ],
        "type": "string"
      },
      "AccountActionType": {
        "enum": [
          "Lock",
          "Unlock",
          "ValidateAccount",
          "ValidatePassword",
          "Enable",
          "Disable"
        ],
        "type": "string",
        "description": "The type of actions that can be performed on an account."
      },
      "AccountActions": {
        "required": [
          "accountId"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "description": "The id of the accounts which should be acted upon.",
            "format": "int32"
          },
          "password": {
            "type": "string",
            "description": "The password being validated.",
            "nullable": true,
            "example": "Password1"
          }
        },
        "additionalProperties": false,
        "description": "Perform an action on one or more user accounts."
      },
      "AccountCreationMethod": {
        "enum": [
          "Automated",
          "Administrative",
          "Claimed",
          "PriviledgedAccess",
          "Legacy"
        ],
        "type": "string"
      },
      "AccountResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "description": "Id of account that was enabled/disabled.",
            "format": "int32",
            "example": 108
          },
          "succeeded": {
            "type": "boolean",
            "readOnly": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminRole": {
        "enum": [
          "ReadOnly",
          "Owner",
          "Administrator",
          "ApplicationManager",
          "UserManager",
          "Billing",
          "PhishingManager"
        ],
        "type": "string"
      },
      "AdminStatus": {
        "enum": [
          "Disabled",
          "Active",
          "Expired",
          "PendingActivation"
        ],
        "type": "string"
      },
      "AdministrationRestrictionType": {
        "enum": [
          "None",
          "Groups",
          "Integrations",
          "GroupsAndIntegrations"
        ],
        "type": "string"
      },
      "AliasCreation": {
        "required": [
          "alias",
          "configId"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "minLength": 1,
            "type": "string",
            "description": "The full email alias.",
            "format": "email",
            "example": "Doe.John@alias.com"
          },
          "configId": {
            "type": "integer",
            "description": "Id of the alias configuration record",
            "format": "int32",
            "example": 10001
          },
          "destinationAddress": {
            "type": "string",
            "description": "Email of the destination address",
            "format": "email",
            "nullable": true,
            "example": "Fii.com"
          }
        },
        "additionalProperties": false
      },
      "AliasDeliverable": {
        "required": [
          "email",
          "label"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "Email of the destination",
            "format": "email",
            "example": "alias@email.com"
          },
          "label": {
            "minLength": 1,
            "type": "string",
            "description": "Label for the deliverable",
            "example": "Help Desk"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AliasDomain": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Domain of the alias",
            "nullable": true,
            "example": "Fii.com"
          },
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of aliases available",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AliasDomainConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the alias domain record.",
            "format": "int32",
            "example": 10001
          },
          "name": {
            "type": "string",
            "description": "Name of the alias domain",
            "nullable": true,
            "example": "fischeridentity.com"
          }
        },
        "additionalProperties": false
      },
      "AliasPinDeliverableResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the record where the pin is stored.",
            "format": "int32",
            "example": 10001
          },
          "pinLength": {
            "type": "integer",
            "description": "The length of the generated pin.",
            "format": "int32",
            "example": 6
          },
          "expiresOn": {
            "type": "string",
            "description": "The date and time at which the PIN will expire.",
            "format": "date-time",
            "example": "2023-04-18 20:31:46.216"
          }
        },
        "additionalProperties": false
      },
      "AliasRuntimeConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the alias configuration record.",
            "format": "int32",
            "example": 10001
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AliasType"
              }
            ],
            "description": "Type of alias generation.",
            "example": "Manual"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of aliases of this type a profile can have.",
            "format": "int32",
            "example": 4
          },
          "visibleToEndUser": {
            "type": "boolean",
            "description": "Flag to indicate whether or not this configuration can be seen by an end user. Only applicable\r\nwhen Type is GeneratedSelectable or Manual.",
            "example": false
          },
          "generationCount": {
            "type": "integer",
            "description": "Number of aliases to be generated. Only applicable when Type is GeneratedSelectable.",
            "format": "int32",
            "example": 4
          },
          "destinationConfigurable": {
            "type": "boolean",
            "description": "Indicator deciding whether user will be able to configure destination address.",
            "example": 1
          },
          "primaryConfigurable": {
            "type": "boolean",
            "description": "Indicator deciding whether user will be able to configure primary alias.",
            "example": 1
          },
          "domain": {
            "type": "string",
            "description": "Domain name to be used when Type is GeneratedAssigned for generating the alias.",
            "nullable": true,
            "example": "fii.com"
          },
          "domains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AliasDomainConfig"
            },
            "description": "The list of domains associated with this configuration.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the configuration.",
            "nullable": true,
            "example": "Alias set for new users"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the alias configuration.",
            "nullable": true,
            "example": "New User Alias Set"
          },
          "name": {
            "type": "string",
            "description": "Name of the alias configuration",
            "nullable": true,
            "example": "New User Alias Set"
          }
        },
        "additionalProperties": false
      },
      "AliasSendDeliverablePin": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "Email of the destination",
            "format": "email",
            "example": "alias@email.com"
          }
        },
        "additionalProperties": false
      },
      "AliasSuggestions": {
        "type": "object",
        "properties": {
          "aliasPolicy": {
            "type": "string",
            "description": "Name of the alias policy",
            "nullable": true,
            "example": "Alias Set"
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AliasDomain"
            },
            "description": "List of suggeseted aliases for this policy.",
            "nullable": true
          },
          "destinations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of destination addresses",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AliasType": {
        "enum": [
          "Manual",
          "GeneratedSelectable",
          "GeneratedAssigned"
        ],
        "type": "string"
      },
      "AppPinnedState": {
        "type": "object",
        "properties": {
          "pinned": {
            "type": "boolean",
            "description": "Flag that indicates whether the app is pinned or not.",
            "example": true
          },
          "order": {
            "type": "integer",
            "description": "The order in which the app should be displayed in the pinned app group.  Order starts at 1.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "AppSystem": {
        "required": [
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "pinned": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AppPinnedState"
              }
            ],
            "description": "Order the application should be listed if it has been pinned by the user.",
            "nullable": true
          },
          "fischerApp": {
            "type": "boolean",
            "description": "Flag indicating whether the App is a \"Fischer App\" that represents a redirect to a self-service page.",
            "example": true
          },
          "lastAccessed": {
            "type": "string",
            "description": "The date/time when the user last accessed this app from Identity.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-03T13:45:28.841Z"
          },
          "default": {
            "type": "boolean",
            "description": "Flag that indicates whether the app is the default app in its configuration.",
            "example": true
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "A description of the application.",
            "nullable": true,
            "example": "Google Drive is a file storage and synchronization service."
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether the app is enabled for use.",
            "example": true
          },
          "imageId": {
            "type": "integer",
            "description": "The id to the image. The /api/v1/runtime/core/image/{id} API can be used to retrieve the image associated with this\r\nid.",
            "format": "int32",
            "example": 10013
          },
          "name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The name of the application.",
            "example": "Google Drive"
          },
          "order": {
            "type": "integer",
            "description": "The order in which the app should be displayed in it app configuration group",
            "format": "int32",
            "example": 1
          },
          "url": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The url to the sso page of the application.",
            "example": "testapp.com"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Approval": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The id of the approval event",
            "format": "int32",
            "example": 216
          },
          "resourceDisplayNames": {
            "type": "string",
            "description": "A comma separated list of resource display names that need approval.",
            "nullable": true,
            "example": "Identity Account"
          },
          "delegationState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalDelegationState"
              }
            ],
            "description": "Flag that indicates whether the approval item was delegated to the user.",
            "example": "NotDelegated"
          },
          "createDate": {
            "type": "string",
            "description": "The datetime when the approval was created.",
            "format": "date-time"
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalPriority"
              }
            ],
            "description": "The importance of processing this approval request.",
            "example": "Medium"
          },
          "requestor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IUserProfileSummary"
              }
            ],
            "description": "User profile attributes of the Requestor.",
            "nullable": true
          },
          "recipient": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IUserProfileSummary"
              }
            ],
            "description": "User profile attributes of the Request recipient.",
            "nullable": true
          },
          "typeDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IApprovalType"
              }
            ],
            "description": "Describes the type of approval.",
            "nullable": true
          },
          "statusDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IApprovalStatus"
              }
            ],
            "description": "Describes the account status",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ApprovalAction": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Comment for the action.",
            "nullable": true,
            "example": "Sample Comment"
          }
        },
        "additionalProperties": false
      },
      "ApprovalBulkAction": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Comment for the action.",
            "nullable": true,
            "example": "Sample Comment"
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of resource ids for the approval action.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApprovalBulkReassignAction": {
        "type": "object",
        "properties": {
          "reAssignToUserId": {
            "type": "string",
            "description": "User id who the approval request is assigned to .",
            "nullable": true,
            "example": "-5381197172083136038145596963650931316"
          },
          "comments": {
            "type": "string",
            "description": "Comment for the action.",
            "nullable": true,
            "example": "Sample Comment"
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of resource ids for the approval action.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApprovalCommunicationType": {
        "enum": [
          "Request",
          "Reply"
        ],
        "type": "string"
      },
      "ApprovalConfig": {
        "type": "object",
        "properties": {
          "delegationAllowed": {
            "type": "boolean",
            "description": "Can approvers delegate requests to other approvers."
          },
          "delegationRequiresApproval": {
            "type": "boolean",
            "description": "Does enabling delegation for a user require an approval."
          },
          "requestForInformationAllowed": {
            "type": "boolean",
            "description": "Can approver request more information from requestor or beneficiary before\r\nprocessing the request."
          },
          "historyConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HistoryConfiguration"
              }
            ],
            "description": "Control how a history table should be displayed in the ui."
          },
          "commentRequirement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommentRequirement"
              }
            ],
            "description": "Control whether comments are optional/required/not shown in the ui."
          },
          "reassignConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReassignConfiguration"
              }
            ],
            "description": "Approval reassignment destination options configuration."
          },
          "delegationEditConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelegationEditConfiguration"
              }
            ],
            "description": "Approval edit configuration for Delegation requests."
          }
        },
        "additionalProperties": false
      },
      "ApprovalCount": {
        "type": "object",
        "properties": {
          "pending": {
            "type": "integer",
            "description": "The number of approval requests assigned (directly or via delegation) to this user.",
            "format": "int32",
            "example": 3
          },
          "total": {
            "type": "integer",
            "description": "The total number of approval requests assigned to this user.",
            "format": "int32",
            "example": 7
          }
        },
        "additionalProperties": false
      },
      "ApprovalDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The Start Date of the Approval Access Period.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-01T15:19:47.348Z"
          },
          "endDate": {
            "type": "string",
            "description": "The End Date of the Approval Access Period. If the End Date is null, the access is Permanent.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-03T15:19:47.348Z"
          }
        },
        "additionalProperties": false
      },
      "ApprovalDelegation": {
        "required": [
          "id",
          "period",
          "startDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelegationStatus"
              }
            ],
            "description": "Status of Delegation.",
            "example": "OnPendingApproval"
          },
          "period": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalDelegationPeriod"
              }
            ],
            "description": "Type of approval delegation: temporary or permanent.",
            "example": "Permanent"
          },
          "scope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelegationScope"
              }
            ],
            "description": "Scope of the delegations.",
            "example": "AllRequests"
          },
          "startDate": {
            "type": "string",
            "description": "The starting date of the delegation period.",
            "format": "date-time",
            "example": "2022-06-06T12:44:20.838Z"
          },
          "endDate": {
            "type": "string",
            "description": "The ending date of the delegation period. If null, then delegation is permanent.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-06T12:44:20.838Z"
          },
          "delegateUser": {
            "type": "object",
            "additionalProperties": { },
            "description": "A map of profile based Product Attributes that define an identity.",
            "nullable": true
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IActionHistory"
            },
            "description": "The approval history on this resource.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApprovalDelegationPeriod": {
        "enum": [
          "Temporary",
          "Permanent"
        ],
        "type": "string",
        "description": "Period in which approval delegation is temporary or permanent."
      },
      "ApprovalDelegationState": {
        "enum": [
          "NotDelegated",
          "DelegatedOnly",
          "SelfAndDelegated"
        ],
        "type": "string"
      },
      "ApprovalDelegationUpdate": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelegationStatus"
              }
            ],
            "description": "Status of Delegation.",
            "example": "OnPendingApproval"
          },
          "period": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalDelegationPeriod"
              }
            ],
            "description": "Type of approval delegation: temporary or permanent.  Required if setting delegation to On.",
            "nullable": true,
            "example": "Permanent"
          },
          "scope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelegationScope"
              }
            ],
            "description": "Scope of the delegations.",
            "example": "AllRequests"
          },
          "delegateUserId": {
            "type": "string",
            "description": "The id of the user who will be processing delegated approvals.",
            "nullable": true,
            "example": "2098592358373598233"
          },
          "endDate": {
            "type": "string",
            "description": "The ending date of the delegation period. If null, then delegation is permanent.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-06T12:44:20.838Z"
          },
          "startDate": {
            "type": "string",
            "description": "The starting date of the delegation period.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-06T12:44:20.838Z"
          }
        },
        "additionalProperties": false
      },
      "ApprovalDetailType": {
        "enum": [
          "Group",
          "Resource",
          "Policy",
          "Delegation",
          "Hpam",
          "WorkflowResourceGroup",
          "WorkflowPolicyGroup",
          "WorkflowProfile",
          "SelfRegistration",
          "UpdateProfile",
          "NewUser"
        ],
        "type": "string"
      },
      "ApprovalInformation": {
        "required": [
          "recipientUserId"
        ],
        "type": "object",
        "properties": {
          "recipientUserId": {
            "minLength": 1,
            "type": "string",
            "description": "The user id of the person receiving the request for information.",
            "example": "3215648647654123"
          },
          "comments": {
            "type": "string",
            "description": "Message asking user for more information.",
            "nullable": true,
            "example": "More information is required."
          },
          "email": {
            "type": "string",
            "description": "The email of the user if approval is for a self-registration.",
            "nullable": true,
            "example": "Smith@email.com"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RfiType"
              }
            ],
            "description": "The type of approval REQUESTOR, BENEFICIARY, APPROVER",
            "example": "Approver"
          }
        },
        "additionalProperties": false
      },
      "ApprovalInitiatedFrom": {
        "enum": [
          "SelfServiceProvisioning",
          "Policy",
          "Workflow",
          "Hpam",
          "Delegation",
          "Designer",
          "SelfClaiming",
          "SelfRegistration",
          "ProfileManagement"
        ],
        "type": "string"
      },
      "ApprovalPriority": {
        "enum": [
          "Low",
          "Medium",
          "High"
        ],
        "type": "string"
      },
      "ApprovalReassign": {
        "type": "object",
        "properties": {
          "reAssignToUserId": {
            "type": "string",
            "description": "User id who the approval request should be reassigned to.",
            "nullable": true,
            "example": "-5381197172083136038145596963650931316"
          },
          "comments": {
            "type": "string",
            "description": "Comment for the action.",
            "nullable": true,
            "example": "Sample Comment"
          }
        },
        "additionalProperties": false
      },
      "ApprovalReply": {
        "type": "object",
        "properties": {
          "comment": {
            "maxLength": 1024,
            "type": "string",
            "description": "The information to send back to the requestor in response to their request.",
            "nullable": true,
            "example": "Jane is temporarily assuming Jack's duties and needs access to the HR system while he is out."
          },
          "email": {
            "type": "string",
            "description": "The email of the user if approval is for a self-registration.",
            "nullable": true,
            "example": "testing@email.com"
          },
          "recipientUserId": {
            "type": "string",
            "description": "The user id of the person receiving the request for information.",
            "nullable": true,
            "example": "3215648647654123"
          },
          "substitutionValues": {
            "type": "object",
            "additionalProperties": { },
            "description": "The substitution variables and values that should be inserted into the notification\r\nbefore its sent.",
            "nullable": true,
            "example": {
              "Person-Firstname": "John",
              "Person-Lastname": "Smith"
            }
          }
        },
        "additionalProperties": false
      },
      "ApprovalRequestType": {
        "enum": [
          "Add",
          "Modify",
          "Delete",
          "TransferAccess"
        ],
        "type": "string"
      },
      "ApprovalRfi": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the RFI.",
            "format": "int32",
            "example": 201
          },
          "workItemId": {
            "type": "integer",
            "description": "The id of the workitem.",
            "format": "int32",
            "example": 1001
          },
          "fromUserId": {
            "type": "string",
            "description": "UserId of the user who sent the message.",
            "nullable": true,
            "example": "873657865763487659381476598"
          },
          "toUserId": {
            "type": "string",
            "description": "UserId of the user who received the message.",
            "nullable": true,
            "example": "-32464068786301657860606"
          },
          "actionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCommunicationType"
              }
            ],
            "description": "Action type of message sent whether it was a request or a reply.",
            "example": "Request"
          },
          "comment": {
            "type": "string",
            "description": "The message being sent by the user.",
            "nullable": true,
            "example": "Sample Comment"
          },
          "parentRequestInfoId": {
            "type": "integer",
            "description": "Id of the RFI that was replied too.",
            "format": "int32",
            "nullable": true,
            "example": 201
          },
          "createDate": {
            "type": "string",
            "description": "The day the RFI was created.",
            "format": "date-time",
            "example": "2022-06-03T15:19:47.348Z"
          }
        },
        "additionalProperties": false
      },
      "ApprovalStatus": {
        "enum": [
          "Completed",
          "Failed",
          "Stopped",
          "New",
          "PendingApproval",
          "Escalated",
          "Approved",
          "Terminated",
          "RequestForInformationSent",
          "RequestForInformationReceived",
          "Cancelled",
          "Reassigned",
          "Denied",
          "EscalatedViaTimeout",
          "DeniedViaTimeout",
          "Pending",
          "AutoApproved",
          "AutoDenied",
          "CancelledApproval",
          "DependencyError",
          "Expired",
          "SeeDetails",
          "InProcess"
        ],
        "type": "string"
      },
      "ApproveAction": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Comment for the action.",
            "nullable": true,
            "example": "Sample Comment"
          },
          "managers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApproveManager"
            },
            "description": "The list of managers for the resource.",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApproveActionAttribute"
            },
            "description": "The list of attributes and currently selected values.",
            "nullable": true
          },
          "sponsor": {
            "type": "string",
            "description": "The userId of the sponsor for the resource. Only applicable when the approval detail\r\ntype is Policy or Resource.",
            "nullable": true,
            "example": "8c377faf-ba73-4f28-a497-ad3e9f868324"
          },
          "delegate": {
            "type": "string",
            "description": "The userId of the user who will be the delegate for the user's approvals. Only\r\napplicable when the approval detail type is Delegation.",
            "nullable": true,
            "example": "8c377faf-ba73-4f28-a497-ad3e9f868324"
          },
          "accessPeriod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalDateRange"
              }
            ],
            "description": "The date range details of approval request access period.",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The details of the list of Permissions of the resource. Only\r\napplicable when the approval detail type is Resource.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApproveActionAttribute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the attribute. The attribute can be multi valued. These can be Product attribute id or the attribute ids\r\ndefined for the special attributes.",
            "format": "int32",
            "example": 101
          },
          "value": {
            "description": "The value of the attribute.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApproveActionResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the approval resource.",
            "format": "int32",
            "example": 10250
          },
          "managers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApproveManager"
            },
            "description": "The list of managers for the resource.",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApproveActionAttribute"
            },
            "description": "The list of attributes and currently selected values.",
            "nullable": true
          },
          "sponsor": {
            "type": "string",
            "description": "The userId of the sponsor for the resource. Only applicable when the approval detail\r\ntype is Policy or Resource.",
            "nullable": true,
            "example": "8c377faf-ba73-4f28-a497-ad3e9f868324"
          },
          "delegate": {
            "type": "string",
            "description": "The userId of the user who will be the delegate for the user's approvals. Only\r\napplicable when the approval detail type is Delegation.",
            "nullable": true,
            "example": "8c377faf-ba73-4f28-a497-ad3e9f868324"
          },
          "accessPeriod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalDateRange"
              }
            ],
            "description": "The date range details of approval request access period.",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The details of the list of Permissions of the resource. Only\r\napplicable when the approval detail type is Resource.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApproveManager": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The User Id of the manager.",
            "nullable": true,
            "example": "-5381197172083136038145596963650931316"
          },
          "primary": {
            "type": "boolean",
            "description": "The flag that indicates if this is the primary manager.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "Assembly": {
        "type": "object",
        "properties": {
          "definedTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "exportedTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "codeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "entryPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "imageRuntimeVersion": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isDynamic": {
            "type": "boolean",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectionOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "isFullyTrusted": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "escapedCodeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "manifestModule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Module"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Module"
            },
            "nullable": true,
            "readOnly": true
          },
          "globalAssemblyCache": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "hostContext": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "securityRuleSet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecurityRuleSet"
              }
            ],
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AttributeCategory": {
        "enum": [
          "AccessDeriving",
          "Authentication",
          "Authorization",
          "Biographical",
          "Email",
          "Phone"
        ],
        "type": "string"
      },
      "AttributeContentType": {
        "enum": [
          "Text",
          "Number",
          "Date",
          "Boolean",
          "Email",
          "Phone",
          "Manager"
        ],
        "type": "string",
        "description": "The content type or format of the product attribute."
      },
      "AttributeListSource": {
        "enum": [
          "Static",
          "Database",
          "Directory"
        ],
        "type": "string",
        "description": "The source of a list based attribute value."
      },
      "AttributeReference": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the ProductAttribute that is referenced.",
            "nullable": true,
            "example": "Person-Firstname"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeSourceType"
              }
            ],
            "description": "The source of an attribute value.",
            "example": "User"
          }
        },
        "additionalProperties": false,
        "description": "Defines the reference to a product attribute reference in a dynamic query string. The reference consists of\r\nthe name of the product attribute, and from where (manager, user, etc.) the attribute value should be obtained."
      },
      "AttributeReferences": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeReference"
            },
            "description": "The list of attributes whose value depends on other attribute's values.\r\nThe reference consists of the name of the dependent product attribute, and from where (manager, user, etc.)\r\nthe attribute value should be obtained.",
            "nullable": true
          },
          "initialValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeReference"
            },
            "description": "The list of attributes whose initial value depends on other attribute's values.\r\nThe reference consists of the name of the dependent product attribute, and from where (manager, user, etc.)\r\nthe attribute value should be obtained.",
            "nullable": true
          },
          "validations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeReference"
            },
            "description": "The list of attributes whose validation rules depends on other attribute's values.\r\nThe reference consists of the name of the dependent product attribute, and from where (manager, user, etc.)\r\nthe attribute value should be obtained.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Indicate which attributes on the screen have values or validations that depend on other attributes. When trying to\r\nobtain an attribute's initial value, value, or validation state, the values of these dependent attributes must be\r\npassed to the corresponding api. These dependent attribute values may come from a different user (the manager for\r\nexample), or from the value of another screen element located within the screen."
      },
      "AttributeSchemaValueType": {
        "enum": [
          "SingleValue",
          "MulitValue"
        ],
        "type": "string",
        "description": "The type that Indicates if the attribute is single or a multi-value attribute."
      },
      "AttributeSourceType": {
        "enum": [
          "Resource",
          "Requestor",
          "Manager",
          "User"
        ],
        "type": "string",
        "description": "The source of an attribute value."
      },
      "AttributeType": {
        "enum": [
          "Person",
          "Student",
          "Job",
          "Employee",
          "Account",
          "Location",
          "Transaction",
          "Working",
          "Identity",
          "Other1",
          "Other2",
          "Approval",
          "Resource",
          "Policy"
        ],
        "type": "string",
        "description": "The type of product attribute prefix value."
      },
      "AttributeValueProvider": {
        "enum": [
          "Input",
          "List",
          "Radio",
          "DynamicList",
          "Dynamic"
        ],
        "type": "string",
        "description": "The way a multi valued attribute value should be presented in a UI for input."
      },
      "AuthenticationMethod": {
        "enum": [
          "Passcode",
          "Push",
          "Token",
          "Landline",
          "WebAuthnPlatform",
          "WebAuthnRoming",
          "Sms",
          "PasswordLessPush",
          "PasswordLessWebAuthnPlatform",
          "PasswordLessWebAuthnRoming"
        ],
        "type": "string"
      },
      "AuthenticationOption": {
        "enum": [
          "None",
          "SecureLink",
          "Pin",
          "Totp",
          "Duo"
        ],
        "type": "string"
      },
      "BulkApproveAction": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Comment for the action.",
            "nullable": true,
            "example": "Sample Comment"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApproveActionResource"
            },
            "description": "List of details of resources for the approve action.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CacheClearAction": {
        "required": [
          "orgId",
          "table"
        ],
        "type": "object",
        "properties": {
          "orgId": {
            "type": "integer",
            "format": "int32"
          },
          "table": {
            "minLength": 1,
            "type": "string"
          },
          "ids": {
            "type": "array",
            "items": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CacheItemPriority": {
        "enum": [
          "Low",
          "Normal",
          "High",
          "NeverRemove"
        ],
        "type": "string"
      },
      "CallingConventions": {
        "enum": [
          "Standard",
          "VarArgs",
          "Any",
          "HasThis",
          "ExplicitThis"
        ],
        "type": "string"
      },
      "Captcha": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptchaType"
              }
            ],
            "description": "The type of the Captcha.",
            "example": "GoogleReCaptcha"
          },
          "siteKey": {
            "type": "string",
            "description": "The Google site Key to be used when the ReCaptcha API is invoked. Only applicable if Type is\r\nCaptchaType.GoogleReCaptcha.",
            "nullable": true,
            "example": "xyz"
          },
          "secretKey": {
            "type": "string",
            "description": "The Google secret key to be used when the ReCaptcha API is invoked. Only applicable if Type is\r\nCaptchaType.GoogleReCaptcha.",
            "nullable": true,
            "example": "xyz"
          },
          "scriptDomain": {
            "type": "string",
            "description": "The uri domain that should be used to load the recaptcha JavaScript api component. Only applicable if Type is\r\nCaptchaType.GoogleReCaptcha.",
            "nullable": true,
            "example": "www.google.com"
          }
        },
        "additionalProperties": false,
        "description": "Details about the Captcha."
      },
      "CaptchaType": {
        "enum": [
          "GoogleReCaptcha"
        ],
        "type": "string",
        "description": "The type of captcha."
      },
      "ChangePasswordRequest": {
        "required": [
          "accountId",
          "existingPassword",
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "existingPassword": {
            "minLength": 1,
            "type": "string",
            "description": "The existing account password of the account referenced by accountId.",
            "example": "TestPa$$word1"
          },
          "newPassword": {
            "minLength": 1,
            "type": "string",
            "description": "The new password to set on the account referenced by accountId. If the account referenced\r\nby AccountId is in a system that qualifies for a password reset configuration, then the\r\npassword must meet the password content rules defined in the configuration before the password\r\nwill be reset.  An error will be returned if the password does not meet the password content\r\nrules if they are configured.",
            "example": "ChangedPa$$word2"
          },
          "accountId": {
            "type": "integer",
            "description": "The id of the account whose password should be reset.",
            "format": "int32",
            "example": 102
          },
          "requestorNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be sent to the requestor when the password is reset.",
            "format": "int32",
            "example": 10003
          },
          "beneficiaryNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be sent to the account owner when the password is reset.",
            "format": "int32",
            "example": 10004
          }
        },
        "additionalProperties": false,
        "description": "Change Password command view model"
      },
      "Claim": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string",
            "nullable": true
          },
          "originalIssuer": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "subject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimsIdentity"
              }
            ],
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClaimAccount": {
        "required": [
          "claimed",
          "claimUserTypeId"
        ],
        "type": "object",
        "properties": {
          "claimed": {
            "type": "boolean",
            "description": "Flag that indicates whether the identity is being claimed or not."
          },
          "claimUserTypeId": {
            "type": "integer",
            "description": "The id of the claim user type configuration that should be used to send the identity\r\nclaim beneficiary notification.  Only applicable if Claimed is true.",
            "format": "int32",
            "example": 58
          }
        },
        "additionalProperties": false,
        "description": "The data necessary to send an email to the user that allows them to claim the account."
      },
      "ClaimsIdentity": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "type": "string",
            "nullable": true
          },
          "isAuthenticated": {
            "type": "boolean",
            "readOnly": true
          },
          "actor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimsIdentity"
              }
            ],
            "nullable": true
          },
          "bootstrapContext": {
            "nullable": true
          },
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Claim"
            },
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "nameClaimType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "roleClaimType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CommentRequirement": {
        "enum": [
          "Optional",
          "Required",
          "Hide"
        ],
        "type": "string",
        "description": "Control whether comments are optional/required/not shown in the ui."
      },
      "ConfigAttributeType": {
        "enum": [
          "Text",
          "Numeric",
          "DateTime",
          "Boolean",
          "EncryptedPassword",
          "ImageFileName",
          "CommaSeparatedEmails",
          "MultiLineText",
          "Dropdown",
          "LocaleText",
          "FolderSelection",
          "FileSelection",
          "DnSelection",
          "Dynamic",
          "Delimited",
          "ApprovalNotification",
          "ApprovalRule",
          "PasswordNotification",
          "HpamNotification",
          "SelfServiceNotification",
          "PolicyNotification",
          "HaNotification",
          "LicenseNotification",
          "ResourceNotification",
          "PasswordExpiration",
          "UnixSshAutoDetect",
          "ApprovalFilter",
          "ColorPicker",
          "MultiList",
          "DynamicFilter",
          "WorkflowNotification",
          "InformationText",
          "PolicyEvaluationFilter",
          "IdpAuthentication",
          "GigAssociation",
          "NotificationSettings",
          "IdentityServerSelection",
          "InternalTime",
          "SmsPinResetSystem",
          "PrivilegedUserNotification",
          "WorkflowSelection",
          "ApprovalDelegationFilter",
          "SchedulerNotification",
          "XmlDuration",
          "ExtendedLdapSystem",
          "ConsolidatedNotification",
          "SmsNotification",
          "UserMatchExternalSystem",
          "ProductAttribute",
          "ApprovalReassignFilter",
          "CreateUserManagerFilter",
          "BoxConnectorAccessToken",
          "QrNotification",
          "Ssl",
          "EncryptedText",
          "DuoNotification",
          "BooleanEnvironmentSetting",
          "IdentityClaimContactConfiguration",
          "IdentityClaimProfileConfiguration",
          "TimeDuration",
          "ConnectorApiKey",
          "RsaPublicKey",
          "ClientSecret",
          "ClientCertificate"
        ],
        "type": "string",
        "description": "The type of a configuration property value. Used to determine how the value should be displayed, selected, and\r\nstored."
      },
      "ConnectedSystem": {
        "type": "object",
        "properties": {
          "productType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductType"
              }
            ],
            "description": "The type of services a connected system supports.",
            "example": "IdentityManagement"
          },
          "passwordResetBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PasswordResetBy"
              }
            ],
            "description": "Specifies who can reset the password.",
            "example": "External"
          },
          "provisionOption": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProvisionOption"
              }
            ],
            "description": "The provisioning option which specifies how the connected system functions.",
            "example": "Administrative"
          },
          "hpamAccountsAllowed": {
            "type": "boolean",
            "description": "Flag that indicates if Hpam support is enabled.\r\nThis can only be set to true when ProductType is IdentityManagement or IdentityAndProvisioning.",
            "example": true
          },
          "accountTransfersAllowed": {
            "type": "boolean",
            "description": "A flag that indicates if the accounts in the system are transferable.\r\nIf this value is set, Account and all the entitlements associated with the account\r\nare granted by Resource and can be transferred to another user.",
            "example": true
          },
          "remediationWorkflowId": {
            "type": "integer",
            "description": "The remediation workflow id if the Remediation Support is specified",
            "format": "int32",
            "nullable": true,
            "example": 100
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedSystemDetail"
            },
            "description": "Connector specific configuration properties.",
            "nullable": true
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedSystemOwner"
            },
            "description": "The list of users assigned as the owners of the system.",
            "nullable": true
          },
          "serverId": {
            "type": "integer",
            "description": "The id of the Gig cluster that hosts this connected system.\r\nIf null, then the Identity and/or the Provisioning server will host the connected system.",
            "format": "int32",
            "nullable": true,
            "example": 100
          },
          "shared": {
            "type": "boolean",
            "description": "Flag that indicates whether the connected system is shared across all organizations.",
            "example": true
          },
          "systemTypeId": {
            "type": "integer",
            "description": "System Type id of the connected system.",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "Description of the connected system. This is a locale specific value.",
            "nullable": true,
            "example": "The Connected system description"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name of the connected system. This is a locale specific value.",
            "nullable": true,
            "example": "Identity System"
          },
          "name": {
            "type": "string",
            "description": "Name of the connected system.",
            "nullable": true,
            "example": "Identity System"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The details of a connected system."
      },
      "ConnectedSystemDefinition": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformType"
              }
            ],
            "description": "Connected system platform or system type.",
            "example": "LDAP"
          },
          "nativeEnableDisableSupport": {
            "type": "boolean",
            "description": "Flag that indicates whether the connected system type has native support.",
            "example": true
          },
          "description": {
            "type": "string",
            "description": "Description of the connected system type definition.",
            "nullable": true,
            "example": "The Connected system definition description"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name of the connected system type.",
            "nullable": true,
            "example": "OpenLDAP Directory Server"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the connected system type definition.",
            "example": "OpenLDAP"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The connected system definitions for the connected system type."
      },
      "ConnectedSystemDetail": {
        "required": [
          "parameter",
          "productId",
          "systemId"
        ],
        "type": "object",
        "properties": {
          "systemId": {
            "type": "integer",
            "description": "The Id of the connected system.",
            "format": "int32",
            "example": 1008
          },
          "parameter": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the connected system specific configuration property.",
            "example": "PasswordExpirationType"
          },
          "dataType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigAttributeType"
              }
            ],
            "description": "The type of a configuration property value. Used to determine how the value should be displayed, selected, and\r\nstored.",
            "example": "Text"
          },
          "productId": {
            "type": "integer",
            "description": "Connected system product id.",
            "format": "int32",
            "example": 10001
          },
          "sectionId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The id of the configuration section that this property is a member of.",
            "nullable": true,
            "example": "10007"
          },
          "sectionName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the configuration section that this property is a member of.",
            "nullable": true,
            "example": "Definition"
          },
          "order": {
            "type": "integer",
            "description": "The order in which this property should be displayed within its configuration section.",
            "format": "int32",
            "example": 1
          },
          "value": {
            "type": "string",
            "description": "The value of the configuration property.",
            "nullable": true,
            "example": "cn=Directory Manager,dc=example,dc=com"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The definition of a connected system configuration property.\r\nThe property will be used by the connected system connector to control the behavior of connector."
      },
      "ConnectedSystemOwner": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the current user.",
            "nullable": true,
            "example": "1346353167654"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user from their user profile.",
            "nullable": true,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user from their user profile.",
            "nullable": true,
            "example": "Smith"
          },
          "middleName": {
            "type": "string",
            "description": "The middle name of the user from their user profile.",
            "nullable": true,
            "example": "J"
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the user.",
            "nullable": true,
            "example": "John J Smith"
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true,
            "example": "john@email.com"
          },
          "sourceProfileId": {
            "type": "string",
            "description": "Id of a specific user profile",
            "nullable": true,
            "example": "jsmith"
          },
          "jobDepartment": {
            "type": "string",
            "description": "A user's department at their company",
            "nullable": true,
            "example": "Sales"
          },
          "jobTitle": {
            "type": "string",
            "description": "A user's title at their company",
            "nullable": true,
            "example": "Developer"
          },
          "employeeId": {
            "type": "string",
            "description": "The users employment id number.",
            "nullable": true,
            "example": "2985739893"
          },
          "employeeType": {
            "type": "string",
            "description": "The type of employee.",
            "nullable": true,
            "example": "Hourly"
          }
        },
        "additionalProperties": false,
        "description": "Details of the users assigned as the owners of the system."
      },
      "ConnectedSystemType": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Version of the connected system type.",
            "nullable": true,
            "example": "1.0"
          },
          "definition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectedSystemDefinition"
              }
            ],
            "description": "The connected system definition of the system.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the connected system. This is a locale specific value.",
            "nullable": true,
            "example": "The Connected system description"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name of the connected system type.",
            "nullable": true,
            "example": "OpenLDAP Directory Server"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether the connected system type is enabled.",
            "example": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the connected system type.",
            "example": "OpenLDAP Directory Server"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The details of a connected system type."
      },
      "ConstructorInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberTypes"
              }
            ],
            "readOnly": true
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodAttributes"
              }
            ],
            "readOnly": true
          },
          "methodImplementationFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodImplAttributes"
              }
            ],
            "readOnly": true
          },
          "callingConvention": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CallingConventions"
              }
            ],
            "readOnly": true
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RuntimeMethodHandle"
              }
            ],
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectedType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "module": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Module"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CreateAliasDeliverable": {
        "required": [
          "email",
          "label"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "Email of the destination",
            "format": "email",
            "example": "alias@email.com"
          },
          "label": {
            "minLength": 1,
            "type": "string",
            "description": "Label for the deliverable",
            "example": "Help Desk"
          }
        },
        "additionalProperties": false
      },
      "CreateNote": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "The note text.",
            "example": "Verified user's identity and unlocked their account and sent a one time pin to let them reset their password."
          },
          "tagIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of tag ids associated with the note.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateNoteTag": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the note tag.",
            "nullable": true,
            "example": "User had locked their account and cannot login."
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The name of the note tag.",
            "example": "Locked Account"
          }
        },
        "additionalProperties": false
      },
      "CreateUserAttributeVerification": {
        "required": [
          "attributeId",
          "value"
        ],
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "integer",
            "description": "The id of the Product Attribute that requires validation.",
            "format": "int32",
            "example": 1
          },
          "value": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The value of the attribute that was verified.",
            "example": "test@email.com"
          }
        },
        "additionalProperties": false
      },
      "CreateUserGroup": {
        "required": [
          "accessPeriod",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityGroupType"
              }
            ],
            "description": "Flag that indicates how the group members are found/obtained.",
            "example": "Static"
          },
          "memberIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "When Type is GroupOfGroups, this is a list of identity group ids that member of this collection.\r\nWhen Type is Static, this the list of user ids that are the group members.",
            "nullable": true
          },
          "ldapFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LdapGroupConfiguration"
              }
            ],
            "description": "The details of the member group when GroupType is ExternalLdap.",
            "nullable": true
          },
          "accessPeriod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserGroupDateRange"
              }
            ],
            "description": "The date range when the member's association to the group starts and ends."
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "A description of the user group.",
            "nullable": true,
            "example": "Group for Sales - Security Administrators"
          },
          "filter": {
            "type": "string",
            "description": "The filter expression that defines the group members when GroupType is Dynamic.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether this identity group is active or not.",
            "example": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the user group.",
            "example": "Sales - Security Administrators"
          }
        },
        "additionalProperties": false,
        "description": "The properties that can be specified to create an Identity Group."
      },
      "CustomAttributeData": {
        "type": "object",
        "properties": {
          "attributeType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "constructor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConstructorInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "constructorArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypedArgument"
            },
            "nullable": true,
            "readOnly": true
          },
          "namedArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeNamedArgument"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeNamedArgument": {
        "type": "object",
        "properties": {
          "memberInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberInfo"
              }
            ],
            "nullable": true
          },
          "typedValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomAttributeTypedArgument"
              }
            ],
            "readOnly": true
          },
          "memberName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isField": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTypedArgument": {
        "type": "object",
        "properties": {
          "argumentType": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataCacheSummary": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "size": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "entries": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ICacheEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataOperationType": {
        "enum": [
          "List",
          "Read",
          "Create",
          "Update",
          "Patch",
          "Delete",
          "Execute"
        ],
        "type": "string"
      },
      "DataValidation": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataVerificationType"
              }
            ],
            "description": "The type of data validation configuration.",
            "example": "Contact"
          },
          "selfSmsNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be sent via SMS to a user when an attribute has been changed.",
            "format": "int32",
            "nullable": true,
            "example": 10001
          },
          "oboSmsNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be sent via SMS when an attribute has been changed by someone\r\nother than the user.",
            "format": "int32",
            "nullable": true,
            "example": 10002
          },
          "smsNotificationAttributes": {
            "maxLength": 255,
            "minLength": 0,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of attributes that, when changed, should generate a SMS message that contains a PIN\r\nthat must be verified before they can be changed.",
            "nullable": true,
            "example": [
              "Person-MobilePhone",
              "Employee-MobilePhone"
            ]
          },
          "selfEmailNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be sent via email to a user when an attribute has been changed.",
            "format": "int32",
            "nullable": true,
            "example": 10003
          },
          "oboEmailNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be sent via email when an attribute has been changed by someone\r\nother than the user.",
            "format": "int32",
            "nullable": true,
            "example": 10004
          },
          "emailNotificationAttributes": {
            "maxLength": 255,
            "minLength": 0,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of attributes that, when changed, should generate an email that contains a PIN\r\nthat must be verified before they can be changed.",
            "nullable": true,
            "example": [
              "Person-Email1",
              "Person-Email2",
              "Employee-Email2"
            ]
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataValidationAttribute"
            },
            "description": "The list of attributes that, when changed, should be verified via a PIN challenge before they\r\nare changed.",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "A description of the data validation configuration.",
            "nullable": true,
            "example": "Primary email address validation configuration"
          },
          "name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The name of the data validation configuration.",
            "example": "Email validation configuration"
          },
          "orgId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A configuration that defines which attributes must be verified before they can be modified\r\nand how a PIN challenge should be delivered when one or more of the configured attributes is\r\nchanged."
      },
      "DataValidationAttribute": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "integer",
            "description": "The id of the Product Attribute that requires validation.",
            "format": "int32",
            "example": 100048
          },
          "attributeName": {
            "type": "string",
            "description": "The name of the Product Attribute that requires validation.",
            "nullable": true,
            "example": "Person-Firstname"
          },
          "contentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeContentType"
              }
            ],
            "description": "The type of the Product Attribute that requires validation.",
            "example": "Email"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataVerification": {
        "required": [
          "changes"
        ],
        "type": "object",
        "properties": {
          "changes": {
            "type": "object",
            "additionalProperties": { },
            "description": "A map of the Product Attributes that are being changed and their new values.  The map\r\nkey is the Product Attribute name.",
            "example": {
              "Person-EmailAlias2": "new@email.address.com",
              "Employee-MobilePhone": "555-555-1234"
            }
          }
        },
        "additionalProperties": false
      },
      "DataVerificationType": {
        "enum": [
          "Contact",
          "Profile"
        ],
        "type": "string",
        "description": "The type of data validation configuration."
      },
      "DelegateNotifications": {
        "type": "object",
        "properties": {
          "beneficiary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelegateNotificationsIds"
              }
            ],
            "description": "The set of notifications to notify the beneficiary of an action on their Identity by\r\na Delegated Administrator.",
            "nullable": true
          },
          "requestor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelegateNotificationsIds"
              }
            ],
            "description": "The set of notifications to notify the requestor of an action on a user's Identity by\r\na Delegated Administrator.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The set of notifications used to notify the beneficiary and beneficiary when an action on a user's\r\nIdentity by a Delegated Administrator."
      },
      "DelegateNotificationsIds": {
        "type": "object",
        "properties": {
          "editProfileNotificationId": {
            "type": "integer",
            "description": "The id of the notification to send when the profile has been edited.",
            "format": "int32",
            "nullable": true,
            "example": 10231
          },
          "passwordResetNotificationId": {
            "type": "integer",
            "description": "The id of the notification to send when an account password has been reset.",
            "format": "int32",
            "nullable": true,
            "example": 10247
          },
          "enableAccountNotificationId": {
            "type": "integer",
            "description": "The id of the notification to send when an account has been enabled.",
            "format": "int32",
            "nullable": true,
            "example": 12235
          },
          "disableAccountNotificationId": {
            "type": "integer",
            "description": "The id of the notification to send when an account has been disabled.",
            "format": "int32",
            "nullable": true,
            "example": 10331
          }
        },
        "additionalProperties": false
      },
      "DelegateProfileUpdateConfiguration": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "readOnlyScreen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreen"
              }
            ],
            "description": "The screen that should be displayed after locating the end user.",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "A description of this configuration.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of this configuration."
          },
          "notificationConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelegateNotifications"
              }
            ],
            "description": "The set of notifications used to notify the beneficiary and beneficiary when an action on a user's\r\nIdentity by a Delegated Administrator.",
            "nullable": true
          },
          "requireUserVerification": {
            "type": "boolean",
            "description": "Flag that indicates whether the user must be verified before any changes are made to\r\nthe end user's accounts or profile."
          },
          "canViewLifecycleEvents": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can view the lifecycle events of the user."
          },
          "canViewNotificationEvents": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can view the notifications that have\r\nbeen queued or sent to the user."
          },
          "default": {
            "type": "boolean",
            "description": "Flag that indicates whether this is the default configuration."
          },
          "canEditProfile": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can edit an end user's profile."
          },
          "canResetPasswords": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can reset an end user's password."
          },
          "canEnableAccounts": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can enable an end user's account."
          },
          "canDisableAccounts": {
            "type": "boolean",
            "description": "Flag that indicates whether the help user can disable an end user's account."
          },
          "canSeeUserAccess": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can view the end user's access."
          },
          "canDisableAccess": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can disable an end user's identity access."
          },
          "canManageSecurity": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can manage the end user's MFA security\r\nconfiguration."
          },
          "canViewLoginHistory": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can view the end user's login history."
          },
          "canViewPolicyMembership": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can view the end user's policy membership."
          },
          "canViewNotes": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can view notes made about previous\r\nhelp desk calls made by this end user."
          },
          "canCreateTags": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can create help desk note tags."
          },
          "canSeeEndDatedProfiles": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can see end user's that have been\r\nend dated or deprovisioned."
          },
          "canManageAlias": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can manage an end user's aliases."
          },
          "canManageDuoTokens": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can manage an end user's Duo tokens."
          },
          "canManageDuoBypassCodes": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can generate a Duo bypass code to\r\nallow the end user temporary access."
          },
          "canValidateAccounts": {
            "type": "boolean",
            "description": "Flag that indicates whether the help desk user can validate an end user's account\r\nor account password."
          },
          "screen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreen"
              }
            ],
            "description": "Details of the Self Service Dynamic Detail Screen.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileConfigSourceType"
              }
            ],
            "description": "Source of configuration"
          },
          "preProcessWorkflowId": {
            "type": "integer",
            "description": "Id of workflow to execute before user profile is updated.",
            "format": "int32",
            "nullable": true
          },
          "approvalId": {
            "type": "integer",
            "description": "Id of approval to execute when fields that require approval are changed.",
            "format": "int32",
            "nullable": true
          },
          "contactVerificationConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataValidation"
              }
            ],
            "description": "Id of contact verification configuration associated with this configuration. If set,\r\napi/user-management/data-verifications/{id}/sendPin should be invoked and the PIN\r\nconfirmed before updating the profile.",
            "nullable": true
          },
          "profileVerificationConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataValidation"
              }
            ],
            "description": "Id of profile verification configuration associated with this configuration. If set,\r\napi/user-management/data-verifications/{id}/sendPin should be invoked and the PIN\r\nconfirmed before updating the profile.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DelegatedApprovalDetails": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The userId of the user who is delegating their approvals",
            "nullable": true,
            "example": "13214534864132415"
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalDelegation"
              }
            ],
            "description": "The specifics of the delegation.  This consists of the time period and what type\r\nof approvals (new or existing) the delegate may see.",
            "nullable": true
          },
          "user": {
            "type": "object",
            "additionalProperties": { },
            "description": "A map of profile based Product Attributes that define an identity.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The details of one approver delegating their approval responsibility to another user."
      },
      "DelegationEditConfiguration": {
        "enum": [
          "None",
          "Delegate",
          "Dates",
          "All"
        ],
        "type": "string",
        "description": "Define what an approver may edit on a delegation approval request."
      },
      "DelegationScope": {
        "enum": [
          "NewRequests",
          "NewAndOpenRequests",
          "AllRequests"
        ],
        "type": "string",
        "description": "Scope of the delegations."
      },
      "DelegationStatus": {
        "enum": [
          "Off",
          "On",
          "OnPendingApproval",
          "OffPendingApproval",
          "ReassignPending"
        ],
        "type": "string",
        "description": "Status of Delegation."
      },
      "DeliveryMethod": {
        "enum": [
          "Email",
          "Sms",
          "Push"
        ],
        "type": "string"
      },
      "Descriptor": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name of the view model.This is a locale based property.",
            "nullable": true,
            "example": "Identity System"
          },
          "name": {
            "type": "string",
            "description": "Name of the view model.",
            "nullable": true,
            "example": "IdentitySystem"
          },
          "type": {
            "type": "string",
            "description": "Type of the view model.",
            "nullable": true,
            "example": "IdentityAndProvisioning"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The generic definition of a descriptor view model which other view models can inherit."
      },
      "DetailScreen": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScreenSection"
            },
            "description": "The list of sections defined in the detail screen.",
            "nullable": true
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailScreenElement"
            },
            "description": "The list of screen elements in the detail screen that are not within a section.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the detail screen.",
            "nullable": true,
            "example": "Self - Profile Update"
          },
          "description": {
            "type": "string",
            "description": "The description of the detail screen.",
            "nullable": true,
            "example": "My Profile - Update"
          },
          "systemDefault": {
            "type": "boolean",
            "description": "Flag that indicates if the screen element is the system default.",
            "example": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreenType"
              }
            ],
            "description": "The type of detail screen.",
            "example": "ProfileManagement"
          },
          "class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenClass"
              }
            ],
            "description": "The type of the screen.",
            "readOnly": true,
            "example": "Detail"
          },
          "numberOfColumns": {
            "type": "integer",
            "description": "The number of columns for the detail screen.",
            "format": "int32",
            "example": 5
          },
          "orgId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details of the Self Service Dynamic Detail Screen."
      },
      "DetailScreenElement": {
        "type": "object",
        "properties": {
          "editable": {
            "type": "boolean",
            "description": "Flag that indicates if the screen element is editable or read only.",
            "example": false
          },
          "fieldType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenAttributeType"
              }
            ],
            "description": "The type of screen attribute.",
            "example": "User"
          },
          "componentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenElementComponentType"
              }
            ],
            "description": "The type of component used for rendering the screen element.",
            "example": "SelectBox"
          },
          "dateTimeFormat": {
            "type": "string",
            "description": "The format the date should be rendered in. Only available if the ComponentType is Date.",
            "nullable": true,
            "example": "mm/dd/yyyy"
          },
          "layout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenElementLayout"
              }
            ],
            "description": "The grid positioning details of where the screen element should be displayed on the screen in relation to other\r\nscreen elements.",
            "nullable": true
          },
          "attribute": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenElementAttribute"
              }
            ],
            "description": "The attribute details of the product attribute that is backing the screen element.",
            "nullable": true
          },
          "information": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenInstruction"
              }
            ],
            "description": "The configuration information about whether the screen element has any help associated with it.",
            "nullable": true
          },
          "inputValidation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenElementInputValidation"
              }
            ],
            "description": "The Input validation details for the screen element input field.",
            "nullable": true
          },
          "additionalValidation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScreenElementValidation"
            },
            "description": "The additional validation details of the screen element.",
            "nullable": true
          },
          "captcha": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Captcha"
              }
            ],
            "description": "The details of the Captcha element.",
            "nullable": true
          },
          "initialValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenElementValue"
              }
            ],
            "description": "The details of the screen element initial value type and its value.",
            "nullable": true
          },
          "autoExpandMultivaluedList": {
            "type": "boolean",
            "description": "Flag that indicates whether the screen element is an auto expand multi valued list.",
            "example": false
          },
          "workflowId": {
            "type": "integer",
            "description": "The id of the workflow that will be initiated if ComponentType is WorkflowButton.",
            "format": "int32",
            "nullable": true,
            "example": 50
          },
          "requiresApproval": {
            "type": "boolean",
            "description": "Flag that indicates if approval is required to modify to change this screen element value.",
            "example": false
          },
          "mustBeUniqueForNewUser": {
            "type": "boolean",
            "description": "Flag that indicates field must be unique for new user creation. If another user has the same value\r\nfor this attribute, then self-registration/new user creation will fail with a user already\r\nexists error.",
            "example": false
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the detail screen element.",
            "nullable": true,
            "example": "Update or view user profile details."
          },
          "name": {
            "type": "string",
            "description": "The name of the detail screen element.",
            "nullable": true,
            "example": "Person-Firstname"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The definition of a detail screen element."
      },
      "DetailScreenType": {
        "enum": [
          "ProfileManagement",
          "NewUser",
          "SelfRegistration",
          "BeneficiaryDetails",
          "CertificationApproverDetails",
          "CertifierDetails",
          "PinPasswordResetProfileDetails",
          "UserIdRecoveryProfileDetails",
          "ClaimAccountDetails",
          "SelfRegistrationRfiResponseProfileDetails",
          "KioskProfileDetails",
          "ClaimAccountProfileDetails",
          "SystemCertificationBeneficiaryDetails"
        ],
        "type": "string",
        "description": "The type of detail screen."
      },
      "DisplayVisibility": {
        "enum": [
          "Optional",
          "Required",
          "Hide"
        ],
        "type": "string",
        "description": "An indicator as to how an element should be displayed in a UI."
      },
      "DuoActivateUser": {
        "type": "object",
        "properties": {
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoCreatePhone"
              }
            ],
            "description": "The phone to assign to the user while registering.",
            "nullable": true
          },
          "token": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoCreateToken"
              }
            ],
            "description": "The token to assign to the user while registering.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DuoActivateUserResponse": {
        "type": "object",
        "properties": {
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoCreatePhoneResponse"
              }
            ],
            "description": "The phone assigned to the user while registering.",
            "nullable": true
          },
          "token": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoToken"
              }
            ],
            "description": "The token assigned to the user while registering.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DuoActivationCodeResponse": {
        "type": "object",
        "properties": {
          "qrCodeUrl": {
            "type": "string",
            "description": "Url of a QR code that when scanned by the Duo Mobile app, will complete the activation process.",
            "nullable": true,
            "example": "https://duosecurity.com/"
          },
          "duoMobileActivationUrl": {
            "type": "string",
            "description": "Url that when opened by the Duo Mobile app, will complete the activation process.",
            "nullable": true,
            "example": "https://duosecurity.com/"
          },
          "installationUrl": {
            "type": "string",
            "description": "Url that when opened on the phone, will prompt the user to install the Duo Mobile app.  Only\r\npresent when GenerateInstallUrl was set to true on the request.",
            "nullable": true,
            "example": "https://duosecurity.com/"
          },
          "expirationDate": {
            "type": "string",
            "description": "The date/time the activation code expires.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DuoAdmin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the administrator.",
            "nullable": true
          },
          "adminUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuoAdminUnit"
            },
            "description": "The list of administrative units to which the administrator belongs. Empty if the\r\nadministrator is unrestricted.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "The date time that the administrator was created. null if the administrator was\r\ncreated before October 2021.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-21T15:19:47.348Z"
          },
          "email": {
            "type": "string",
            "description": "The administrators email address.",
            "nullable": true,
            "example": "James.Smith@example.com"
          },
          "token": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoToken"
              }
            ],
            "description": "The hardware token associated with the administrator or null if there is no token\r\nattached to the administrator.",
            "nullable": true
          },
          "lastSyncDate": {
            "type": "string",
            "description": "The date time of the last time the administrator was updated via a directory sync.\r\nnull if the administrator has never been synced with an external directory server or\r\nthe directory that originally created the administrator was deleted.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-21T15:19:47.348Z"
          },
          "lastLoginDate": {
            "type": "string",
            "description": "The date time of the last time the administrator's last login. null if they\r\nhave not logged in.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-21T15:19:47.348Z"
          },
          "name": {
            "type": "string",
            "description": "The administrator's full name.",
            "nullable": true,
            "example": "James Smith"
          },
          "passwordChangeRequired": {
            "type": "boolean",
            "description": "Flag that indicates whether the administrator must change their password at\r\nthe next login."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number in E.164 format.",
            "nullable": true,
            "example": "+12395551234"
          },
          "adminUnitRestrictions": {
            "type": "boolean",
            "description": "Is the administrator restricted by an administrative unit assignment?",
            "example": true
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdminRole"
              }
            ],
            "description": "The administrator's role.  Only present if customer's Duo edition includes the\r\nAdministrative Roles feature.",
            "nullable": true,
            "example": "ApplicationManager"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdminStatus"
              }
            ],
            "description": "The administrator account's status.",
            "example": "Active"
          }
        },
        "additionalProperties": false
      },
      "DuoAdminUnit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the administrative unit.",
            "nullable": true,
            "example": "235098JK352"
          },
          "description": {
            "type": "string",
            "description": "The description of the administrative unit.",
            "nullable": true,
            "example": "Fischer Identity LLC"
          },
          "name": {
            "type": "string",
            "description": "The name of the administrative unit.",
            "nullable": true,
            "example": "Fischer Identity"
          },
          "restrictionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdministrationRestrictionType"
              }
            ],
            "description": "Flag that indicates the type of restriction the administrative unit represents.",
            "example": "Group"
          }
        },
        "additionalProperties": false
      },
      "DuoBypassCode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the bypass code",
            "nullable": true,
            "example": "098235UCSD29"
          },
          "createDate": {
            "type": "string",
            "description": "The date time the bypass code was created.",
            "format": "date-time",
            "example": "2023-02-21T15:19:47.348Z"
          },
          "expirationDate": {
            "type": "string",
            "description": "The date time the bypass code expires.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-03-21T15:19:47.348Z"
          },
          "reuseCount": {
            "type": "integer",
            "description": "The number of types the bypass code can be resused. null if the bypass code can be\r\nused indefinitely.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "administratorEmails": {
            "type": "string",
            "description": "The list of email address of the Duo administrator who created the bypass code.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DuoBypassCodeConfiguration": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether to user is allowed to create bypass codes.",
            "example": true
          },
          "duration": {
            "type": "integer",
            "description": "The number of minutes that a bypass code is valid for after creation.",
            "format": "int32",
            "example": 5
          },
          "customCodesAllowed": {
            "type": "boolean",
            "description": "Flag that indicates whether the user can specify the bypass code value when creating\r\ncodes.  If false, the Duo system will generate random code values.",
            "example": false
          },
          "maxCodes": {
            "type": "integer",
            "description": "The maximum number of bypass codes that may be created.",
            "format": "int32",
            "example": 3
          },
          "reuseCount": {
            "type": "integer",
            "description": "The number of types the bypass code can be reused. null if the bypass code can be\r\nused indefinitely.",
            "format": "int32",
            "nullable": true,
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "DuoCreateBypassCode": {
        "type": "object",
        "properties": {
          "reuseCount": {
            "maximum": 31,
            "minimum": 0,
            "type": "integer",
            "description": "The number of types the bypass code can be resused. null if the bypass code can be\r\nused indefinitely.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "count": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "description": "The number of bypass codes to create.  A maximum of 10 codes may be created at a time.\r\nIf Codes is specified, then Count must be null.  If a non-null Count is specified,\r\nrandomly generated code values will be generated.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "codes": {
            "type": "string",
            "description": "A CSV list of codes to use.  If non-null, Count must be 0.",
            "nullable": true,
            "example": "123456789,987654321"
          },
          "preserveExisting": {
            "type": "boolean",
            "description": "Flag to indicate whether existing bypass codes should be preserved when creating new\r\ncodes.",
            "example": true
          },
          "duration": {
            "maximum": 44640,
            "minimum": 0,
            "type": "integer",
            "description": "The number of seconds that a bypass code is valid for.  If 0 is specified, the bypass\r\ncodes generated will never expire.",
            "format": "int32",
            "example": 1800
          }
        },
        "additionalProperties": false
      },
      "DuoCreatePhone": {
        "type": "object",
        "properties": {
          "sendToAttributeId": {
            "type": "integer",
            "description": "The id of a verified email or phone attribute to send the activation code notification.  If null, a\r\nnotification will not be sent.",
            "format": "int32",
            "nullable": true,
            "example": 25
          },
          "extension": {
            "type": "string",
            "description": "The phone extension if necessary.",
            "nullable": true,
            "example": "2341"
          },
          "name": {
            "type": "string",
            "description": "The name of the device.",
            "nullable": true,
            "example": "Company phone"
          },
          "number": {
            "type": "string",
            "description": "The phone number of the device in E.164 format. null if the device is a tablet.",
            "nullable": true,
            "example": "+18005551234"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhonePlatform"
              }
            ],
            "description": "The device's operating system.",
            "example": "Android"
          },
          "postDelay": {
            "type": "integer",
            "description": "The amount of time in seconds to wait after the extension is dialed before speaking\r\nthe prompt.",
            "format": "int32",
            "nullable": true,
            "example": 5
          },
          "preDelay": {
            "type": "integer",
            "description": "The amount of time in seconds to wait after the number picks up before dialing the\r\nextension.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneType"
              }
            ],
            "description": "The type of phone.",
            "example": "Mobile"
          }
        },
        "additionalProperties": false
      },
      "DuoCreatePhoneResponse": {
        "type": "object",
        "properties": {
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoPhone"
              }
            ],
            "description": "The phone that was associated to the user.",
            "nullable": true
          },
          "activationCodeResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoActivationCodeResponse"
              }
            ],
            "description": "The activation code needed to activate the phone in Duo Mobile",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DuoCreateToken": {
        "required": [
          "serialNumber",
          "type"
        ],
        "type": "object",
        "properties": {
          "serialNumber": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The serial number of the token.",
            "example": "9382958"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenType"
              }
            ],
            "description": "The type of hardware token",
            "example": "YubiKey"
          },
          "secret": {
            "type": "string",
            "description": "The token secret. Only applicable (and required) if token type is Hotp6 or Hotp8.",
            "nullable": true,
            "example": "23509823"
          },
          "hotpCounter": {
            "type": "integer",
            "description": "The initial value of the HOTP counter. Only applicable if token type is Hotp6 or Hotp8.",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "yubiKeyPrivateId": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "description": "The YubiKey private id.  Only applicable (and required) if token type is YubiKey.",
            "nullable": true,
            "example": "123456789101"
          },
          "yubiKeyAesKey": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "The YubiKey AES key.  Only applicable (and required) if token type is YubiKey.",
            "nullable": true,
            "example": "12345678910112345678910123456789"
          }
        },
        "additionalProperties": false
      },
      "DuoPhone": {
        "type": "object",
        "properties": {
          "activated": {
            "type": "boolean",
            "description": "Flag that indicates whether phone has been activated for Duo Mobile.",
            "example": true
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneCapability"
            },
            "description": "List of factors that the phone supports for Duo authentication.",
            "nullable": true
          },
          "encrypted": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneEncryptionState"
              }
            ],
            "description": "The encryption status of the device file system.",
            "example": "Encrypted"
          },
          "biometrics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneBiometrics"
              }
            ],
            "description": "Flag that indicates whether the device is configured for biometric verification.",
            "example": "Configured"
          },
          "lastSeenDate": {
            "type": "string",
            "description": "The date time of the last contact between the Duo Mobile app installed on the\r\ndevice and the Duo service. null if the device has not been activated or does not\r\nsupport Duo Mobile.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-21T15:19:47.348Z"
          },
          "model": {
            "type": "string",
            "description": "The model of the phone.",
            "nullable": true,
            "example": "Unknown"
          },
          "smsPasscodesSent": {
            "type": "boolean",
            "description": "Flag that indicates whether SMS passcodes have been sent to this phone."
          },
          "screenLockState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenLock"
              }
            ],
            "description": "Flag that indicates whether screen lock is enabled on the phone.",
            "readOnly": true,
            "example": "Unlocked"
          },
          "tamperState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TamperState"
              }
            ],
            "description": "Flag that indicates whether the phone has been jailbroken or rooted.",
            "readOnly": true,
            "example": "NotTampared"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuoUser"
            },
            "description": "The list of users who are assigned this phone number.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The id of the device.",
            "nullable": true,
            "example": "DPRYWGQEY7KZB1EM0QG0"
          },
          "sendToAttributeId": {
            "type": "integer",
            "description": "The id of a verified email or phone attribute to send the activation code notification.  If null, a\r\nnotification will not be sent.",
            "format": "int32",
            "nullable": true,
            "example": 25
          },
          "extension": {
            "type": "string",
            "description": "The phone extension if necessary.",
            "nullable": true,
            "example": "2341"
          },
          "name": {
            "type": "string",
            "description": "The name of the device.",
            "nullable": true,
            "example": "Company phone"
          },
          "number": {
            "type": "string",
            "description": "The phone number of the device in E.164 format. null if the device is a tablet.",
            "nullable": true,
            "example": "+18005551234"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhonePlatform"
              }
            ],
            "description": "The device's operating system.",
            "example": "Android"
          },
          "postDelay": {
            "type": "integer",
            "description": "The amount of time in seconds to wait after the extension is dialed before speaking\r\nthe prompt.",
            "format": "int32",
            "nullable": true,
            "example": 5
          },
          "preDelay": {
            "type": "integer",
            "description": "The amount of time in seconds to wait after the number picks up before dialing the\r\nextension.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneType"
              }
            ],
            "description": "The type of phone.",
            "example": "Mobile"
          }
        },
        "additionalProperties": false
      },
      "DuoPhoneActivationCode": {
        "type": "object",
        "properties": {
          "sendToAttributeId": {
            "type": "integer",
            "description": "The id of a verified email or phone attribute to send the activation code notification.  If null, a\r\nnotification will not be sent.",
            "format": "int32",
            "nullable": true,
            "example": 25
          },
          "duration": {
            "type": "integer",
            "description": "The length of time (in seconds) that the activation code remains valid.  Default value is\r\n86400 - one day.",
            "format": "int32",
            "example": 300
          },
          "generateInstallUrl": {
            "type": "boolean",
            "description": "Flag to indicate whether an install url should be returned.  Default value is false.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "DuoSecurityState": {
        "type": "object",
        "properties": {
          "duoUserName": {
            "type": "string",
            "description": "The user's duo username",
            "nullable": true,
            "example": "user@email.com"
          },
          "enrolled": {
            "type": "boolean",
            "description": "Flag that indicates whether Duo considers the user as enrolled.",
            "example": true
          },
          "duoAuthenticationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationMethod"
            },
            "description": "The list of valid Duo authentication methods for user.",
            "nullable": true
          },
          "bypassCodeConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoBypassCodeConfiguration"
              }
            ],
            "description": "The bypass code configuration settings.  If the current user's id is not the user\r\nid that was specified in the API's route, then this is the configuration for the\r\nhelpdesk user.  Otherwise, it is the end user's bypass code configuration.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether the security feature is active for the user.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "DuoToken": {
        "required": [
          "serialNumber",
          "type"
        ],
        "type": "object",
        "properties": {
          "admins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuoAdmin"
            },
            "description": "A list of administrators who have access to this token.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenType"
              }
            ],
            "description": "The type of hardware token.",
            "example": "YubiKey"
          },
          "id": {
            "type": "string",
            "description": "The id of the token.",
            "nullable": true,
            "example": "20398592"
          },
          "serialNumber": {
            "minLength": 1,
            "type": "string",
            "description": "The serial number of this token.",
            "example": "20950973"
          }
        },
        "additionalProperties": false
      },
      "DuoUser": {
        "required": [
          "userName"
        ],
        "type": "object",
        "properties": {
          "createDate": {
            "type": "string",
            "description": "The date time the user was created.",
            "format": "date-time",
            "example": "2023-02-21T15:19:47.348Z"
          },
          "enrolled": {
            "type": "boolean",
            "description": "Flag that indicates whether the user has a phone, token, or other WebAuthn\r\nmethod available for authentication.",
            "example": true
          },
          "lastSyncDate": {
            "type": "string",
            "description": "The date time of the last time the user was updated via a directory sync.\r\nnull if the user has never been synced with an external directory server or\r\nthe directory that originally created the user was deleted.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-21T15:19:47.348Z"
          },
          "lastLoginDate": {
            "type": "string",
            "description": "The date time of the last time the user's last login. null if they have not\r\nlogged in.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-21T15:19:47.348Z"
          },
          "phones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuoPhone"
            },
            "description": "The list of phones that the user can use.",
            "nullable": true
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuoToken"
            },
            "description": "The list of tokens the user can use.",
            "nullable": true
          },
          "webAuthMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuoWebAuthnMethod"
            },
            "description": "The list of WebAuthn credentials the user can use.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The id of the user.",
            "nullable": true,
            "example": "29852J@%K#%@"
          },
          "aliases": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The user's aliases. User may have up to eight aliases.  Key will be alias1..8.",
            "nullable": true,
            "example": {
              "alias1": "useralias1",
              "alias2": "useralias2"
            }
          },
          "email": {
            "type": "string",
            "description": "The user's email address.",
            "nullable": true,
            "example": "j.smith@fii.com"
          },
          "firstName": {
            "type": "string",
            "description": "The user's first name.",
            "nullable": true,
            "example": "James"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name.",
            "nullable": true,
            "example": "Smith"
          },
          "realName": {
            "type": "string",
            "description": "The user's real (or full) name.",
            "nullable": true,
            "example": "James Smith"
          },
          "userName": {
            "minLength": 1,
            "type": "string",
            "description": "The user's Duo username.",
            "example": "j.smith@fii.com"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "description": "The status of the user.",
            "example": "Active"
          },
          "notes": {
            "type": "string",
            "description": "Notes about this user.",
            "nullable": true,
            "example": "VP of Sales"
          }
        },
        "additionalProperties": false
      },
      "DuoWebAuthnMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the webAuthn credential method.",
            "nullable": true,
            "example": "WA4ED9AUVMSWUF00KES4"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebAuthnType"
              }
            ],
            "description": "Type of the WebAuthn credential method",
            "example": "Security Key"
          },
          "name": {
            "type": "string",
            "description": "Name of the WebAuthn credential method",
            "nullable": true,
            "example": "YubiKey 5"
          },
          "createDate": {
            "type": "string",
            "description": "The date time the WebAuthn credential was created.",
            "format": "date-time",
            "example": "2023-02-21T15:19:47.348Z"
          }
        },
        "additionalProperties": false
      },
      "DurationUnit": {
        "enum": [
          "Days",
          "Months",
          "Years"
        ],
        "type": "string"
      },
      "EntitlementCreationMethod": {
        "enum": [
          "AutomatedProvisioning",
          "AdministrativeAssociation"
        ],
        "type": "string"
      },
      "EntitlementStatus": {
        "enum": [
          "Deny",
          "Allow",
          "Initiated",
          "Running",
          "Completed",
          "Successful",
          "Failed",
          "Stopping",
          "Stopped",
          "Scheduled",
          "CompletedScheduled",
          "FailedScheduled",
          "Restarted",
          "NoResponse",
          "InvalidCredentials",
          "InvalidDate",
          "PartialSuccess",
          "Added",
          "Removed",
          "AddInProgress",
          "RemoveInProgress",
          "Modified",
          "Renamed",
          "Enabled",
          "Disabled",
          "New",
          "PendingApproval",
          "StartupPending",
          "Unregistered",
          "Escalated",
          "Approved",
          "Rejected",
          "Terminated",
          "Deprovisioned",
          "Cancelled",
          "Reassigned",
          "DeniedViaTimeout",
          "Available",
          "Pending",
          "Assigned",
          "Inactive",
          "AutoApproved",
          "AutoDenied",
          "Skipped",
          "Submitted",
          "Ignored",
          "RunningPostImport",
          "RunningSuccessFailure",
          "Active",
          "WaitingForRetry",
          "Existing",
          "Resolved",
          "ExecutingResource",
          "Revoked",
          "ExcessAccount",
          "ExcessAccountAssociation",
          "ExcessEntitlement",
          "ExcessEntitlementAssociation",
          "MissingAccount",
          "MissingAccountInTarget",
          "MissingEntitlement",
          "MissingEntitlementInTarget",
          "AccountOnlyAssociatedWithEntitlement",
          "MissingEntitlementAssociation",
          "AccountAssociated",
          "EntitlementAssociated"
        ],
        "type": "string"
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "succeeded": {
            "type": "boolean",
            "readOnly": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Generic Event Response View Model"
      },
      "ExpiryNotifyType": {
        "enum": [
          "Expiring",
          "Expired"
        ],
        "type": "string",
        "description": "The type of password expiry notifications for password enforcement."
      },
      "Feature": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PersonaType"
              }
            ],
            "description": "The type of persona this feature can be associated with.",
            "example": "User"
          },
          "id": {
            "type": "string",
            "description": "Id of the feature.",
            "nullable": true,
            "example": "FDAD9492-8721-4E48-9920-3A4B788152A6"
          },
          "name": {
            "type": "string",
            "description": "The name of the feature.",
            "nullable": true,
            "example": "Approvals"
          },
          "shared": {
            "type": "boolean",
            "description": "Flag that indicates this feature can be set on personas that don't match its Type."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the feature.  This is a locale aware property.",
            "nullable": true,
            "example": "Approvals - Manage the authorization of resources and access."
          }
        },
        "additionalProperties": false,
        "description": "Details of an identity feature."
      },
      "FeaturePermission": {
        "type": "object",
        "properties": {
          "add": {
            "type": "boolean",
            "description": "A flag that indicates a user has the authority to create records associated\r\nwith this feature.",
            "example": true
          },
          "delete": {
            "type": "boolean",
            "description": "A flag that indicates a user has the authority to delete records associated\r\nwith this feature.",
            "example": false
          },
          "update": {
            "type": "boolean",
            "description": "A flag that indicates a user has the authority to modify records associated\r\nwith this feature.",
            "example": false
          },
          "read": {
            "type": "boolean",
            "description": "A flag that indicates a user has the authority to view records associated\r\nwith this feature.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the permissions associated with a feature assigned to a given persona."
      },
      "FeaturePermissionCreateUpdate": {
        "type": "object",
        "properties": {
          "featureId": {
            "type": "string",
            "description": "The id of the feature associated with the persona.",
            "nullable": true,
            "example": "FDAD9492-8721-4E48-9920-3A4B788152A6"
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeaturePermission"
              }
            ],
            "description": "The permissions associated with the feature.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of a feature and its permissions that are assigned to a persona."
      },
      "FeaturePermissionRelationship": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PersonaType"
              }
            ],
            "description": "The type of persona this feature can be associated with.",
            "example": "User"
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeaturePermission"
              }
            ],
            "description": "The permissions associated with the feature.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of the feature.",
            "nullable": true,
            "example": "FDAD9492-8721-4E48-9920-3A4B788152A6"
          },
          "name": {
            "type": "string",
            "description": "The name of the feature.",
            "nullable": true,
            "example": "Approvals"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the feature.  This is a locale aware property.",
            "nullable": true,
            "example": "Approvals - Manage the authorization of resources and access."
          }
        },
        "additionalProperties": false,
        "description": "Details of a feature and its permissions that are assigned to a persona."
      },
      "ForgotPasswordConfig": {
        "type": "object",
        "properties": {
          "attribute": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentitySchema"
              }
            ],
            "description": "The attribute Fii.Modules.IdentityCore.ViewModels.Runtime.IdentitySchemaViewModel that represents the different types\r\nof users in the Identity system. It is used to decide which Fii.Modules.IdentityCore.ViewModels.Runtime.Configurations.UserTypeConfigViewModel`2.UserTypes forgot\r\nuser configuration should be used.",
            "nullable": true
          },
          "userTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForgotPasswordUserType"
            },
            "description": "A list of user type configurations that define the user location screen (claim screen), whether\r\nthe user can update their profile, and exit action.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether Identity claim is active or not.",
            "example": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The definition of the Kiosk Forgot Password Configuration."
      },
      "ForgotPasswordUserType": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "redirectUrl": {
            "type": "string",
            "description": "The url that the user should be redirect to when the kiosk process has been completed.\r\nIf null or empty, the user should be prompted to close the browser window.",
            "nullable": true,
            "example": "www.fischeridentity.com"
          },
          "notificationSmsId": {
            "type": "integer",
            "description": "The id of a sms notification that will be sent when the user completes the forgot password process.",
            "format": "int32",
            "nullable": true,
            "example": 10004
          },
          "locateUserScreen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreen"
              }
            ],
            "description": "The screen to be displayed for the user locate process.",
            "nullable": true
          },
          "verificationNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be used when the Secure Link authentication option is selected.",
            "format": "int32",
            "nullable": true,
            "example": 15001
          },
          "notificationEmailId": {
            "type": "integer",
            "description": "The id of an email notification that will be sent when the user completes the process.",
            "format": "int32",
            "nullable": true,
            "example": 10004
          },
          "authenticationOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationOption"
            },
            "description": "A list of available authentication methods that can be used to authenticate the user.",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag that indicates whether this user type is the default type.",
            "example": true
          },
          "displayName": {
            "type": "string",
            "description": "The display value to be shown in the user type drop down. This is a locale aware property.",
            "nullable": true,
            "example": "default"
          },
          "value": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The value associated with the user type drop down.  This should correspond to the value of the attribute\r\ndefined by AttributeId in the user's profile.",
            "example": "Default"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details of a Kiosk user type configurations that define\r\nthe user location screen and the kiosk exit action."
      },
      "ForgotUserNameUserType": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "secondaryLoginAttributes": {
            "type": "boolean",
            "description": "Flag that indicates whether the secondary login name should be added to the notification\r\nthat is sent to the user with their primary login user name.",
            "example": false
          },
          "notificationSmsId": {
            "type": "integer",
            "description": "The id of a sms notification that will be sent when the user completes the forgot userName process.",
            "format": "int32",
            "nullable": true,
            "example": 10004
          },
          "externalRedirectUrl": {
            "type": "string",
            "description": "The url that the user interface should be redirect to once the user name has been recovered if\r\nRetrievalAction is RedirectToExternalUrl.",
            "nullable": true,
            "example": "http://www.fischeridentity.com"
          },
          "retrievalAction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostKioskRetrievalAction"
              }
            ],
            "description": "The action that should occur after the user name has been recovered.",
            "example": "RedirectToExternalUrl"
          },
          "locateUserScreen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreen"
              }
            ],
            "description": "The screen to be displayed for the user locate process.",
            "nullable": true
          },
          "verificationNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be used when the Secure Link authentication option is selected.",
            "format": "int32",
            "nullable": true,
            "example": 15001
          },
          "notificationEmailId": {
            "type": "integer",
            "description": "The id of an email notification that will be sent when the user completes the process.",
            "format": "int32",
            "nullable": true,
            "example": 10004
          },
          "authenticationOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationOption"
            },
            "description": "A list of available authentication methods that can be used to authenticate the user.",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag that indicates whether this user type is the default type.",
            "example": true
          },
          "displayName": {
            "type": "string",
            "description": "The display value to be shown in the user type drop down. This is a locale aware property.",
            "nullable": true,
            "example": "default"
          },
          "value": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The value associated with the user type drop down.  This should correspond to the value of the attribute\r\ndefined by AttributeId in the user's profile.",
            "example": "Default"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details of a Kiosk user type configurations that define\r\nthe user location screen and the kiosk exit action."
      },
      "FormattedNotification": {
        "type": "object",
        "properties": {
          "contentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MailFormat"
              }
            ],
            "description": "Content type of the notification",
            "example": "PlainText"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the notification",
            "nullable": true,
            "example": "Password Change Message"
          },
          "message": {
            "type": "string",
            "description": "Body of the notification",
            "nullable": true,
            "example": "User: Password reset for the following account(s) was attempted on Jun 16, 2023 by..."
          }
        },
        "additionalProperties": false
      },
      "GeneratePassword": {
        "required": [
          "accountIds"
        ],
        "type": "object",
        "properties": {
          "accountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of the accounts for which a compliant password should be generated.",
            "example": [
              104,
              106
            ]
          }
        },
        "additionalProperties": false,
        "description": "Generate Password command view model"
      },
      "GeneratePasswordResponse": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The generated password that meets the password policies.",
            "nullable": true,
            "example": "jK#98@%MseqvB"
          }
        },
        "additionalProperties": false
      },
      "HelpDeskSendVerifyPinRequest": {
        "required": [
          "deliverToAttribute"
        ],
        "type": "object",
        "properties": {
          "deliverToAttribute": {
            "type": "integer",
            "description": "The id of a verified attribute that the notification should be delivered to.",
            "format": "int32",
            "example": 24
          },
          "substitutionValues": {
            "type": "object",
            "additionalProperties": { },
            "description": "The substitution variables and values that should be inserted into the notification\r\nbefore its sent.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HistoryConfiguration": {
        "enum": [
          "Never",
          "Expanded",
          "Collapsed"
        ],
        "type": "string",
        "description": "Control how a history table should be displayed in the ui."
      },
      "IAcceptableUse": {
        "type": "object",
        "properties": {
          "global": {
            "type": "boolean",
            "description": "Flag that indicates whether alert is for all tenants and organizations.  If false, then alert\r\nis only for the current organization.",
            "example": false
          },
          "priority": {
            "type": "integer",
            "description": "The importance of the alert.  The higher the priority, the more important it is.",
            "format": "int32",
            "nullable": true,
            "example": 38
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "promptType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptType"
              }
            ],
            "description": "How often the alert should be displayed when logging in.",
            "example": "Frequency"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the alert's display window if PromptType is Frequency.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-01T18:57:38.817Z"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the alert's display window if PromptType is Frequency.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-14T18:57:38.817Z"
          },
          "frequency": {
            "type": "integer",
            "description": "The number of days between viewings if PromptType is Frequency.",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "completeDate": {
            "type": "string",
            "description": "If this is an acceptable use policy, this is the date the user accepted or declined the policy.\r\nIf this is an information message, this the date the user saw the message.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-01T18:57:38.817Z"
          },
          "complete": {
            "type": "boolean",
            "description": "If this is an acceptable use policy, this indicates whether the user has accepted the policy.\r\nIf this is an information message, this indicates whether the user has seen the message.",
            "example": false
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IActionHistory": {
        "type": "object",
        "properties": {
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestEvent"
              }
            ],
            "description": "The type of approval event that occurred.",
            "example": "Assigned"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IActionHistoryUser"
              }
            ],
            "description": "The User's profile details.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Action History"
      },
      "IActionHistoryUser": {
        "type": "object",
        "properties": {
          "sourceProfileId": {
            "type": "string",
            "nullable": true
          },
          "employeeId": {
            "type": "string",
            "nullable": true
          },
          "employeeType": {
            "type": "string",
            "nullable": true
          },
          "jobDepartment": {
            "type": "string",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "newUser": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "The User's profile details."
      },
      "IApprovalDateDetail": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "Date and time when this approval expires for this approver.",
            "format": "date-time",
            "example": "2022-06-03T15:19:47.348Z"
          },
          "createDate": {
            "type": "string",
            "description": "The date approval was requested.",
            "format": "date-time",
            "example": "2022-06-03T15:19:47.348Z"
          },
          "completionDate": {
            "type": "string",
            "description": "The date and time when the request was completed.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-03T15:19:47.348Z"
          }
        },
        "additionalProperties": false,
        "description": "Approval resource time details"
      },
      "IApprovalDetail": {
        "type": "object",
        "properties": {
          "dates": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IDateRange"
              }
            ],
            "description": "Date range access to resource is requested.  If StartDate is null, then immediate access is\r\ndesired.  If EndDate is null, then permanent access is desired.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalDetailType"
              }
            ],
            "description": "The detail type",
            "example": "Group"
          },
          "workItemId": {
            "type": "integer",
            "description": "The Approval work item Id",
            "format": "int32",
            "example": 5
          },
          "resourceId": {
            "type": "integer",
            "description": "The id of the resource",
            "format": "int32",
            "example": 10002
          },
          "originalApproverUserId": {
            "type": "string",
            "description": "The userId of the person originally assigned to approve the item.",
            "nullable": true,
            "example": "134653214554"
          },
          "currentApproverUserId": {
            "type": "string",
            "description": "The userId of the person currently assigned to approve the item.\r\nIf the original approver has escalated/reassigned the approval to another user, then this field\r\nwill hold the userId of the user who received the reassignment.",
            "nullable": true,
            "example": "6543412354"
          },
          "approvedByUserId": {
            "type": "string",
            "description": "The userId of the person who did an approval action (approve, deny, terminated) on the item.",
            "nullable": true,
            "example": "1231243123"
          },
          "routingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingType"
              }
            ],
            "description": "The type of routing the approval is under.",
            "example": "Serial"
          },
          "minimumApproverCount": {
            "type": "integer",
            "description": "The minimum number of approvers necessary to approve the request.  Only applicable if RoutingType\r\nis parallel.",
            "format": "int32",
            "nullable": true,
            "example": 5
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IActionHistory"
            },
            "description": "The approval history on this resource.",
            "nullable": true
          },
          "approverPermissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IApprovalDetailPermissions"
              }
            ],
            "description": "The type of operations that the approver may perform on this approval detail item besides approve and deny.",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IApprovalStatus"
              }
            ],
            "description": "Status of approval",
            "nullable": true
          },
          "dateDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IApprovalDateDetail"
              }
            ],
            "description": "The details for when the approval was created, completed, or expired.",
            "nullable": true
          },
          "delegators": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of userIds that represent the user's who delegated this approval to the user.",
            "nullable": true,
            "example": [
              "12536797440328515840526104290952630734"
            ]
          },
          "riskScore": {
            "type": "integer",
            "description": "Risk Score associated with the resource. The value range is from 1-100.",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Approval resource details"
      },
      "IApprovalDetailPermissions": {
        "type": "object",
        "properties": {
          "canEscalate": {
            "type": "boolean",
            "description": "Flag that indicates whether an approver can escalate the request.",
            "example": false
          },
          "canEdit": {
            "type": "boolean",
            "description": "Flag that indicates whether an approver can edit the request.",
            "example": true
          },
          "canViewOptionalAttributes": {
            "type": "boolean",
            "description": "Flag that indicates whether an approver can see any optional attributes attached to the approval resource.",
            "example": false
          },
          "canEditPermission": {
            "type": "boolean",
            "description": "Flag that indicates if the permissions on the resource can be edited by the approver.",
            "example": true
          },
          "accessPeriodConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISelfServiceRequestDateConfig"
              }
            ],
            "description": "Configuration that defines what the approver may do to the access period dates.",
            "nullable": true,
            "example": true
          },
          "allowMultiplePermissionSelection": {
            "type": "boolean",
            "description": "Flag that indicates if multiple permissions can be selected on the resource.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The type of operations that the approver may perform on this approval detail item besides approve and deny."
      },
      "IApprovalStatus": {
        "type": "object",
        "properties": {
          "timeRemaining": {
            "type": "string",
            "description": "The amount of time remaining to process the approval before it expires",
            "format": "date-span",
            "example": "1.00:00:00"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalStatus"
              }
            ]
          }
        },
        "additionalProperties": false,
        "description": "Describes the account status"
      },
      "IApprovalType": {
        "type": "object",
        "properties": {
          "origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalInitiatedFrom"
              }
            ],
            "description": "The feature that generated the approval.",
            "example": "SelfServiceProvisioning"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalRequestType"
              }
            ],
            "description": "The action (add, modify, delete, etc) that is being requested.",
            "example": "Modify"
          }
        },
        "additionalProperties": false,
        "description": "Describes the type of approval"
      },
      "ICacheEntry": {
        "type": "object",
        "properties": {
          "key": {
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "nullable": true
          },
          "absoluteExpiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "absoluteExpirationRelativeToNow": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "slidingExpiration": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "expirationTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IChangeToken"
            },
            "nullable": true,
            "readOnly": true
          },
          "postEvictionCallbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostEvictionCallbackRegistration"
            },
            "nullable": true,
            "readOnly": true
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheItemPriority"
              }
            ]
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IChangeToken": {
        "type": "object",
        "properties": {
          "hasChanged": {
            "type": "boolean",
            "readOnly": true
          },
          "activeChangeCallbacks": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IChangedProperty": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "originalValue": {
            "nullable": true
          },
          "propertyType": {
            "type": "string",
            "nullable": true
          },
          "changeType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataOperationType"
              }
            ]
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ICustomAttributeProvider": {
        "type": "object",
        "additionalProperties": false
      },
      "IDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start date for the item",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "End date for the item",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Encapsulates start and end dates"
      },
      "IInformationAlert": {
        "type": "object",
        "properties": {
          "global": {
            "type": "boolean",
            "description": "Flag that indicates whether alert is for all tenants and organizations.  If false, then alert\r\nis only for the current organization.",
            "example": false
          },
          "priority": {
            "type": "integer",
            "description": "The importance of the alert.  The higher the priority, the more important it is.",
            "format": "int32",
            "nullable": true,
            "example": 38
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "promptType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptType"
              }
            ],
            "description": "How often the alert should be displayed when logging in.",
            "example": "Frequency"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the alert's display window if PromptType is Frequency.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-01T18:57:38.817Z"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the alert's display window if PromptType is Frequency.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-14T18:57:38.817Z"
          },
          "frequency": {
            "type": "integer",
            "description": "The number of days between viewings if PromptType is Frequency.",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "completeDate": {
            "type": "string",
            "description": "If this is an acceptable use policy, this is the date the user accepted or declined the policy.\r\nIf this is an information message, this the date the user saw the message.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-01T18:57:38.817Z"
          },
          "complete": {
            "type": "boolean",
            "description": "If this is an acceptable use policy, this indicates whether the user has accepted the policy.\r\nIf this is an information message, this indicates whether the user has seen the message.",
            "example": false
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IItemListIdDetailResult[Persona]": {
        "type": "object",
        "properties": {
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Persona"
              }
            ],
            "description": "Details of an identity persona.",
            "nullable": true
          },
          "id": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IItemListIdDetailResult[UserGroup]": {
        "type": "object",
        "properties": {
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserGroup"
              }
            ],
            "description": "Details of the identity user group.",
            "nullable": true
          },
          "id": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPagedList[Approval]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Approval"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[IItemListIdDetailResult[Persona]]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IItemListIdDetailResult[Persona]"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[IItemListIdDetailResult[UserGroup]]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IItemListIdDetailResult[UserGroup]"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[LoginHistory]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoginHistory"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[NotificationEvent]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationEvent"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[Persona]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Persona"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[UserAccount]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccount"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[UserGroup]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[UserMember]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMember"
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IPagedList[UserProfile]": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": { },
              "description": "A map of profile based Product Attributes that define an identity."
            },
            "nullable": true,
            "readOnly": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IResult": {
        "type": "object",
        "properties": {
          "result": {
            "nullable": true,
            "readOnly": true
          },
          "request": {
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IResultMessage"
            },
            "nullable": true
          },
          "changedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IChangedProperty"
            },
            "nullable": true,
            "readOnly": true
          },
          "primaryKey": {
            "nullable": true
          },
          "serviceSession": {
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "nullable": true
          },
          "succeeded": {
            "type": "boolean",
            "readOnly": true
          },
          "concurrencyStamp": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IResultMessage": {
        "type": "object",
        "properties": {
          "level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageLevel"
              }
            ],
            "readOnly": true
          },
          "id": {
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ISelfServiceRequestDateConfig": {
        "type": "object",
        "properties": {
          "dateStyle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestDateType"
              }
            ]
          },
          "allowPermanentEndDates": {
            "type": "boolean"
          },
          "approverCanOverrideDurations": {
            "type": "boolean"
          },
          "maxUnitOfMeasure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DurationUnit"
              }
            ],
            "nullable": true
          },
          "maxDuration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "defaultUnitOfMeasure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DurationUnit"
              }
            ],
            "nullable": true
          },
          "defaultDuration": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IUserProfileSummary": {
        "type": "object",
        "properties": {
          "sourceProfileId": {
            "type": "string",
            "nullable": true
          },
          "employeeId": {
            "type": "string",
            "nullable": true
          },
          "employeeType": {
            "type": "string",
            "nullable": true
          },
          "jobDepartment": {
            "type": "string",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "newUser": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IdentityClaimConfig": {
        "type": "object",
        "properties": {
          "attribute": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentitySchema"
              }
            ],
            "description": "The attribute Fii.Modules.IdentityCore.ViewModels.Runtime.IdentitySchemaViewModel that represents the different types\r\nof users in the Identity system. It is used to decide which Fii.Modules.IdentityCore.ViewModels.Runtime.Configurations.UserTypeConfigViewModel`2.UserTypes forgot\r\nuser configuration should be used.",
            "nullable": true
          },
          "userTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityClaimUserType"
            },
            "description": "A list of user type configurations that define the user location screen (claim screen), whether\r\nthe user can update their profile, and exit action.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether Identity claim is active or not.",
            "example": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The definition of an Identity Claim Configuration."
      },
      "IdentityClaimUserType": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "updateProfileScreen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreen"
              }
            ],
            "description": "The screen to be displayed for the profile update.",
            "nullable": true
          },
          "profileVerification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataValidation"
              }
            ],
            "description": "The profile verification configuration that should be invoked when profile edit is enabled.",
            "nullable": true
          },
          "contactVerification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataValidation"
              }
            ],
            "description": "The contact verification configuration that should be invoked when profile edit is enabled.",
            "nullable": true
          },
          "profileUpdateEnabled": {
            "type": "boolean",
            "description": "A flag that indicates whether Identity claim supports profile update.",
            "example": true
          },
          "showUserId": {
            "type": "boolean",
            "description": "A flag that indicates whether the user's userId should be displayed during the claiming process.",
            "example": false
          },
          "login2FAOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Login2FAOption"
            },
            "description": "A list of available second factor authentication methods that may need to be configured during claiming\r\nso the user can login in.  If the option ends with Optional, then the second factor setup may be skipped\r\nduring the claiming process.",
            "nullable": true
          },
          "redirectUrl": {
            "type": "string",
            "description": "The url that the user should be redirected to when the claiming process has been completed.  If null or empty,\r\nthe user should be prompted to close the browser window.",
            "nullable": true,
            "example": "www.fischeridentity.com"
          },
          "alreadyClaimedNotificationId": {
            "type": "integer",
            "description": "The Already Claimed notification id",
            "format": "int32",
            "nullable": true,
            "example": 153
          },
          "locateUserScreen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreen"
              }
            ],
            "description": "The screen to be displayed for the user locate process.",
            "nullable": true
          },
          "verificationNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be used when the Secure Link authentication option is selected.",
            "format": "int32",
            "nullable": true,
            "example": 15001
          },
          "notificationEmailId": {
            "type": "integer",
            "description": "The id of an email notification that will be sent when the user completes the process.",
            "format": "int32",
            "nullable": true,
            "example": 10004
          },
          "authenticationOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationOption"
            },
            "description": "A list of available authentication methods that can be used to authenticate the user.",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag that indicates whether this user type is the default type.",
            "example": true
          },
          "displayName": {
            "type": "string",
            "description": "The display value to be shown in the user type drop down. This is a locale aware property.",
            "nullable": true,
            "example": "default"
          },
          "value": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The value associated with the user type drop down.  This should correspond to the value of the attribute\r\ndefined by AttributeId in the user's profile.",
            "example": "Default"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The definition of a user type configuration that defines the user location screen (claim screen),\r\nwhether the user can update their profile, and the profile and contact verification configurations and exit action."
      },
      "IdentityGroupStatus": {
        "enum": [
          "EvaluationPending",
          "Evaluating",
          "EvaluationFailed",
          "ReadyToUse"
        ],
        "type": "string",
        "description": "The status of an identity group"
      },
      "IdentityGroupType": {
        "enum": [
          "Legacy",
          "Static",
          "Dynamic",
          "ExternalLdap",
          "GroupOfGroups"
        ],
        "type": "string",
        "description": "Flag that indicates how the group members are found/obtained."
      },
      "IdentitySchema": {
        "type": "object",
        "properties": {
          "isProfileType": {
            "type": "boolean",
            "description": "Flag that Indicates if the attribute type is of type profile.",
            "readOnly": true,
            "example": true
          },
          "attributeMapTypes": {
            "type": "object",
            "properties": {
              "Profile": {
                "type": "string"
              },
              "Account": {
                "type": "string"
              },
              "Entitlement": {
                "type": "string"
              },
              "Directory": {
                "type": "string"
              },
              "External": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "description": "The list of mapped attributes or columns for each type of attribute.",
            "nullable": true,
            "readOnly": true,
            "example": {
              "profile": "PERSON_DOB"
            }
          },
          "listSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchemaListSettings"
              }
            ],
            "description": "The settings of the list elements to determine how the list values are determined.",
            "nullable": true
          },
          "attributeReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeReference"
            },
            "description": "The list of other dependent attribute references that are used to compute or verify its value.",
            "nullable": true
          },
          "externalSchema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LdapSystemSchema"
              }
            ],
            "description": "The external ldap configuration if that is configured.",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeCategory"
            },
            "description": "List of categories of the attribute",
            "nullable": true
          },
          "attributeType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeType"
              }
            ],
            "description": "The type of product attribute prefix value.",
            "example": "Person"
          },
          "contentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeContentType"
              }
            ],
            "description": "The content type of the product attribute.",
            "example": "Text"
          },
          "description": {
            "type": "string",
            "description": "The description of the product attribute. This is a locale aware property.",
            "nullable": true,
            "example": "Firstname of the Person"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the product attribute. This is a locale aware property.",
            "nullable": true,
            "example": "First Name"
          },
          "name": {
            "type": "string",
            "description": "The name of the product attribute.",
            "nullable": true,
            "example": "Person-FirstName"
          },
          "valueProvider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeValueProvider"
              }
            ],
            "description": "The ways that a value is provided or restricted for the attribute.",
            "example": "List"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The consolidated view of product attributes."
      },
      "IdentitySchemaSearch": {
        "type": "object",
        "properties": {
          "connectedSystem": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Descriptor"
              }
            ],
            "description": "The details of the connected system for the product attributes of value type Dynamic List.",
            "nullable": true
          },
          "attributeName": {
            "type": "string",
            "description": "The name of the product attribute.",
            "nullable": true,
            "example": "Person-City"
          },
          "searchBase": {
            "type": "string",
            "description": "The base DN of the search.",
            "nullable": true,
            "example": "ou=people,dc=example,dc=com"
          },
          "searchScope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LdapSearchScope"
              }
            ],
            "description": "The LDAP search scope. This indicates how many levels the in the LDAP directory the search should span from the\r\nsearch base DN.",
            "nullable": true,
            "example": "OneLevel"
          },
          "filter": {
            "type": "string",
            "description": "The filter expression to search.",
            "nullable": true,
            "example": "gn=Jo*"
          }
        },
        "additionalProperties": false,
        "description": "The search settings that are used to get the values for the attribute."
      },
      "IllegalScreenEditDetail": {
        "required": [
          "editAttemptTime",
          "elements",
          "screenName"
        ],
        "type": "object",
        "properties": {
          "screenName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the screen where the illegal edit occurred.",
            "example": "Update Profile"
          },
          "screenId": {
            "type": "integer",
            "description": "If the screen was a Dynamic User Interface (DUI) based screen, the id of the screen\r\ntemplate that was displayed.",
            "format": "int32",
            "nullable": true,
            "example": 10923
          },
          "editAttemptTime": {
            "type": "string",
            "description": "The date and time the illegal edit attempt occurred.",
            "format": "date-time",
            "example": "2023-02-21T15:19:47.348Z"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModifiedScreenElement"
            },
            "description": "The list of screen elements in the detail screen that are not within a section."
          }
        },
        "additionalProperties": false,
        "description": "Details of an attempt to edit one or more non editable screen elements."
      },
      "ImageFeatureType": {
        "enum": [
          "Icon",
          "PortalSettings",
          "Background",
          "FavIcon",
          "Avatar"
        ],
        "type": "string",
        "description": "The feature type for which the image is used."
      },
      "InformationAlertAction": {
        "enum": [
          "MarkAsRead",
          "MarkAsUnRead"
        ],
        "type": "string"
      },
      "InitialValueResponse": {
        "type": "object",
        "properties": {
          "value": {
            "description": "Initial value of the screen element",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Screen element initial value query response"
      },
      "InstructionalTextType": {
        "enum": [
          "None",
          "Text",
          "Icon",
          "ConfirmationMessage"
        ],
        "type": "string",
        "description": "The type of the instructional text for the screen element."
      },
      "JsonPatchDocument`1": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation`1"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KioskSendContinueNotification": {
        "required": [
          "sendToAttributeId",
          "substitutionValues",
          "userTypeId"
        ],
        "type": "object",
        "properties": {
          "userTypeId": {
            "minLength": 1,
            "type": "string",
            "description": "The id of the user type configuration that should be used to send the notification.",
            "example": "54"
          },
          "sendToAttributeId": {
            "type": "integer",
            "description": "The id of a verified attribute that the notification should be delivered to.",
            "format": "int32",
            "example": 24
          },
          "substitutionValues": {
            "type": "object",
            "additionalProperties": { },
            "description": "The substitution variables and values that should be inserted into the notification\r\nbefore its sent.  This must contain a variable named 'PORTAL_URL' whose value\r\nis a URL that the FAM server should redirect to when the user clicks on the link\r\nin the notification.",
            "example": {
              "Person-Firstname": "John",
              "Person-Lastname": "Smith",
              "PORTAL_URL": "localhost:1234"
            }
          }
        },
        "additionalProperties": false
      },
      "KioskSendNotificationToAttributeResult": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "sentTo": {
            "type": "string",
            "nullable": true
          },
          "deliveryMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationDeliveryMethod"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "KioskSendRequest": {
        "required": [
          "deliverToAttributes",
          "userTypeId"
        ],
        "type": "object",
        "properties": {
          "userTypeId": {
            "minLength": 1,
            "type": "string",
            "description": "The id of the user type that should be used to send the notification.",
            "example": "e58c56be-b406-4c6d-b577-6424a2a54ca8"
          },
          "deliverToAttributes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of verified attribute ids that the notification should be delivered to."
          },
          "substitutionValues": {
            "type": "object",
            "additionalProperties": { },
            "description": "The substitution variables and values that should be inserted into the notification\r\nbefore its sent.",
            "nullable": true,
            "example": {
              "PORTAL_URL": "https://www.portal.fischeridentity.com/test/portal/my/home"
            }
          }
        },
        "additionalProperties": false
      },
      "LdapConnectedSystemSearch": {
        "type": "object",
        "properties": {
          "connectedSystemAccountIdAttribute": {
            "type": "string",
            "description": "The LDAP attribute of user, the value of which is stored in the group dn as membership.",
            "nullable": true
          },
          "memberUserAttribute": {
            "type": "string",
            "description": "The user ldap attribute, the value of which is stored as Account Id in Identity Access Records",
            "nullable": true
          },
          "membershipSearchDN": {
            "type": "string",
            "description": "The ldap DN to search for group members.",
            "nullable": true
          },
          "membershipSearchScope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LdapSearchScope"
              }
            ],
            "description": "LDAP Search scope (OBJECT - 0, ONELEVEL - 1, SUBTREE - 2)"
          },
          "membershipAttribute": {
            "type": "string",
            "description": "The Ldap attribute of Group DN, in which the user value is stored as membership.",
            "nullable": true
          },
          "maxFetchItems": {
            "type": "integer",
            "description": "Maximum number of ldap records to be fetched.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The search criteria for an LDAP query."
      },
      "LdapGroupConfiguration": {
        "required": [
          "accountIdAttribute",
          "groupDn",
          "groupMemberAttribute",
          "memberUserAttribute",
          "searchScope",
          "systemId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the ldap group member configuration.",
            "nullable": true,
            "example": "152A69492-8721-4E48-9920-3A4B788FDAD"
          },
          "systemId": {
            "type": "integer",
            "description": "Id of the connected system associated from which the group members will be obtained.",
            "format": "int32",
            "example": 1001
          },
          "groupDn": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The dn for the group member search.",
            "example": "cn=Groups,ou=People,dc=example,dc=com"
          },
          "accountIdAttribute": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The user ldap attribute whose value is stored the FUA account id column.",
            "example": "dn"
          },
          "groupMemberAttribute": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The ldap attribute of the Group DN, whose value indicates membership in the group.",
            "example": "member"
          },
          "memberUserAttribute": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The ldap attribute of the user, the value of which is stored as the group DN's membership value.",
            "example": "Other1-Other_18"
          },
          "searchScope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LdapSearchScope"
              }
            ],
            "description": "The search scope applied when searching for members.",
            "example": "SubtreeLevel"
          },
          "identityGroupId": {
            "type": "string",
            "description": "The id of the identity group that owns this configuration.",
            "nullable": true,
            "example": "BC132EEC-931A-4554-8188-7E88F1436D2B"
          }
        },
        "additionalProperties": false,
        "description": "The configuration details of an identity group when the GroupType is ExternalLdap. The\r\ngroup members will obtained from a search against an external LDAP system."
      },
      "LdapSearchScope": {
        "enum": [
          "OneLevel",
          "SubtreeLevel"
        ],
        "type": "string",
        "description": "The LDAP search scope. This indicates how many levels the in the LDAP directory the search should span from the\r\nsearch base DN."
      },
      "LdapSystemSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Ldap System schema attribute.",
            "nullable": true,
            "example": "employeeNumber"
          },
          "parent": {
            "type": "string",
            "description": "Name of the Ldap System schema attribute parent object class name.",
            "nullable": true,
            "example": "user"
          },
          "valueType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeSchemaValueType"
              }
            ],
            "description": "Flag that Indicates if the attribute is single or a multi-value attribute.",
            "example": "SingleValue"
          },
          "connectedSystem": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Descriptor"
              }
            ],
            "description": "The details of the schema definition of connected system.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LdapTreeNode": {
        "type": "object",
        "properties": {
          "dn": {
            "type": "string",
            "description": "The Dn of the current node in the ldap tree.",
            "nullable": true
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of child node DNs that are directly under the current node.",
            "nullable": true,
            "example": [
              "ou=Groups,dc=example,dc=com",
              "ou=TestNodes,dc=example,dc=com"
            ]
          }
        },
        "additionalProperties": false
      },
      "ListElementAttribute": {
        "type": "object",
        "properties": {
          "contentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeContentType"
              }
            ],
            "description": "The content type or format of the product attribute.",
            "example": "Number"
          },
          "name": {
            "type": "string",
            "description": "The name of the product attribute.",
            "nullable": true,
            "example": "Person-Firstname"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the product attribute. This is a locale aware property.",
            "nullable": true,
            "example": "First Name"
          },
          "description": {
            "type": "string",
            "description": "The description of the product attribute. This is a locale aware property..",
            "nullable": true,
            "example": "Firstname of the Person"
          }
        },
        "additionalProperties": false,
        "description": "The details of a Listing Screen Element Attribute."
      },
      "ListScreen": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListScreenElement"
            },
            "description": "The list of screen elements in the listing screen.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingScreenType"
              }
            ],
            "description": "The type of dynamic listing screen.",
            "example": "UserMatchDetails"
          },
          "class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenClass"
              }
            ],
            "description": "The type of the screen.",
            "readOnly": true,
            "example": "Listing"
          },
          "numberOfColumns": {
            "type": "integer",
            "description": "The number of columns for the listing screen.",
            "format": "int32",
            "example": 5
          },
          "description": {
            "type": "string",
            "description": "The description of the listing screen.",
            "nullable": true,
            "example": "Users - Search and Select Users"
          },
          "name": {
            "type": "string",
            "description": "The name of the listing screen.",
            "nullable": true,
            "example": "Profile Mgmt - User Search"
          },
          "systemDefault": {
            "type": "boolean",
            "description": "Flag that indicates if the listing screen element is the system default.",
            "example": true
          },
          "orgId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details of a Listing Screen."
      },
      "ListScreenElement": {
        "type": "object",
        "properties": {
          "attribute": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListElementAttribute"
              }
            ],
            "description": "The details of the product attribute that is backing the listing screen element.",
            "nullable": true
          },
          "headerSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListScreenElementHeader"
              }
            ],
            "description": "The header column settings for the listing screen element.",
            "nullable": true
          },
          "dateTimeFormat": {
            "type": "string",
            "description": "The format the date should be rendered in. Only available if the ComponentType is Date.",
            "nullable": true,
            "example": "mm/dd/yyyy"
          },
          "order": {
            "type": "integer",
            "description": "Order of the listing screen element.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the listing screen element.",
            "nullable": true,
            "example": "Person-Firstname"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the listing screen element. This is a locale aware property.",
            "nullable": true,
            "example": "First Name"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The definition of a listing screen element."
      },
      "ListScreenElementHeader": {
        "type": "object",
        "properties": {
          "sortable": {
            "type": "boolean",
            "description": "Flag that indicates if the Listing screen element column is sortable.",
            "nullable": true,
            "example": true
          },
          "searchable": {
            "type": "boolean",
            "description": "Flag that indicates if the Listing screen element column is searchable.",
            "nullable": true,
            "example": true
          },
          "sortState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenColumnSort"
              }
            ],
            "description": "The direction a column in a listing screen should be sorted if it is sortable.",
            "example": "Ascending"
          },
          "componentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenElementComponentType"
              }
            ],
            "description": "The type of component used for rendering the screen element.",
            "example": "SelectBox"
          },
          "listSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListScreenListSettings"
              }
            ],
            "description": "The details of how the list values of a screen element are determined.",
            "nullable": true
          },
          "attributeReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeReference"
            },
            "description": "The list of dependent attribute references that are used to compute or verify its value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of a Listing Screen Element header column information."
      },
      "ListScreenListSettings": {
        "type": "object",
        "properties": {
          "listSource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeListSource"
              }
            ],
            "description": "The source of a list based attribute value.",
            "example": "Static"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedListItem"
            },
            "description": "The list of possible values for this screen element if the product attribute defines\r\nthem as static.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details of the list settings to determine how the list values are determined."
      },
      "ListingScreenType": {
        "enum": [
          "ApprovalUserSearchList",
          "BeneficiarySearchList",
          "UserManagementSearchList",
          "ManagerSearchList",
          "BeneficiaryHeaderDetails",
          "BeneficiaryAutoSuggestSearchList",
          "CertifierSearchList",
          "UserMatchDetails",
          "SponsorSearchList"
        ],
        "type": "string",
        "description": "The type of dynamic listing screen."
      },
      "LocateUserContext": {
        "enum": [
          "Claim",
          "ForgotPassword",
          "ForgotUserId"
        ],
        "type": "string",
        "description": "The context in which the user is trying to be located."
      },
      "LocatedUserProfile": {
        "type": "object",
        "properties": {
          "externalUserId": {
            "type": "string",
            "description": "The external Id of the user.",
            "nullable": true,
            "example": "082EE518-79CD-4E18-9A64-F9DF236A54E1"
          },
          "claimed": {
            "type": "boolean",
            "description": "Flag that indicates the claim status of the user.",
            "nullable": true,
            "example": true
          },
          "verifiedAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerifiedAttributeValue"
            },
            "description": "List of verified product attributes.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Id of the user.",
            "nullable": true,
            "example": "-5381197172083136038145596963650931316"
          }
        },
        "additionalProperties": false,
        "description": "The user profile details of the located user."
      },
      "Login2FAOption": {
        "enum": [
          "None",
          "Totp",
          "TotpOptional",
          "Duo",
          "DuoOptional"
        ],
        "type": "string"
      },
      "LoginContext": {
        "enum": [
          "SelfService",
          "Kiosk",
          "IdentityClaim"
        ],
        "type": "string",
        "description": "The Portal feature that the request is originating from."
      },
      "LoginEventSource": {
        "enum": [
          "AdminUI",
          "SelfService",
          "Portal"
        ],
        "type": "string"
      },
      "LoginEventType": {
        "enum": [
          "Login",
          "Logoff",
          "RestLogin",
          "PortalLogin",
          "CasLogin"
        ],
        "type": "string",
        "description": "The feature that attempted a login."
      },
      "LoginHistory": {
        "type": "object",
        "properties": {
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoginEventType"
              }
            ],
            "description": "The feature that attempted a login.",
            "example": "Login"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoginEventSource"
              }
            ],
            "description": "The identity client that was used to login.",
            "example": "Admin"
          },
          "userId": {
            "type": "string",
            "description": "The userId of the user that generated the login event.",
            "nullable": true,
            "example": "29825098253798572352343"
          },
          "serverName": {
            "type": "string",
            "description": "The name of the server that processed the login.",
            "nullable": true,
            "example": "Identity"
          },
          "serverInstanceName": {
            "type": "string",
            "description": "The name instance of the server that processed the login.",
            "nullable": true,
            "example": "IaaS-1"
          },
          "comment": {
            "type": "string",
            "description": "A description of the login event.",
            "nullable": true,
            "example": "User login successful"
          },
          "operationTime": {
            "type": "string",
            "description": "The date and time of the login.",
            "format": "date-time",
            "example": "2022-06-01T18:57:38.817Z"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoginStatus"
              }
            ],
            "description": "The status of an attempted login.",
            "example": "Successful"
          },
          "ipAddress": {
            "type": "string",
            "description": "The ip address of the client that attempted a login.",
            "nullable": true,
            "example": "0:0:0:0:0:0:0:1"
          },
          "successFactors": {
            "type": "string",
            "description": "The authentication factors that were successfully completed as part of login.",
            "nullable": true,
            "example": "Pin"
          },
          "failedFactor": {
            "type": "string",
            "description": "The authentication factor that failed that caused the login failure.",
            "nullable": true,
            "example": "Duo"
          },
          "client": {
            "type": "string",
            "description": "The authentication client that was used to authenticate.",
            "nullable": true,
            "example": "Duo"
          },
          "provider": {
            "type": "string",
            "description": "The authentication factor that failed that caused the login failure.",
            "nullable": true,
            "example": "Duo"
          },
          "userName": {
            "type": "string",
            "description": "The login user name that was used during authentication.",
            "nullable": true,
            "example": "jSmith1234"
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoginOperation"
              }
            ],
            "description": "The login operation.  Either login or logoff.",
            "example": "Login"
          }
        },
        "additionalProperties": false
      },
      "LoginOperation": {
        "enum": [
          "Login",
          "Logoff"
        ],
        "type": "string"
      },
      "LoginStatus": {
        "enum": [
          "Successful",
          "Failure"
        ],
        "type": "string",
        "description": "The status of an attempted login."
      },
      "MailFormat": {
        "enum": [
          "PlainText",
          "Html"
        ],
        "type": "string"
      },
      "MemberInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberTypes"
              }
            ],
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectedType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "module": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Module"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberType": {
        "enum": [
          "Automated",
          "AdminOverriden",
          "Requested",
          "Inherited",
          "AutomatedInherited",
          "AdminOverridenInherited",
          "RequestedInherited"
        ],
        "type": "string"
      },
      "MemberTypes": {
        "enum": [
          "Constructor",
          "Event",
          "Field",
          "Method",
          "Property",
          "TypeInfo",
          "Custom",
          "NestedType",
          "All"
        ],
        "type": "string"
      },
      "MessageLevel": {
        "enum": [
          "Trace",
          "Debug",
          "Information",
          "Warning",
          "Error",
          "Critical",
          "None",
          "Success",
          "Failure"
        ],
        "type": "string"
      },
      "MethodAttributes": {
        "enum": [
          "ReuseSlot",
          "PrivateScope, Private",
          "PrivateScope, FamANDAssem",
          "PrivateScope, Assembly",
          "PrivateScope, Family",
          "PrivateScope, FamORAssem",
          "PrivateScope, Public",
          "PrivateScope, MemberAccessMask",
          "PrivateScope, UnmanagedExport",
          "PrivateScope, Static",
          "PrivateScope, Final",
          "PrivateScope, Virtual",
          "PrivateScope, HideBySig",
          "PrivateScope, VtableLayoutMask",
          "PrivateScope, CheckAccessOnOverride",
          "PrivateScope, Abstract",
          "PrivateScope, SpecialName",
          "PrivateScope, RTSpecialName",
          "PrivateScope, PinvokeImpl",
          "PrivateScope, HasSecurity",
          "PrivateScope, RequireSecObject",
          "PrivateScope, ReservedMask"
        ],
        "type": "string"
      },
      "MethodImplAttributes": {
        "enum": [
          "Managed",
          "Native",
          "OPTIL",
          "CodeTypeMask",
          "Unmanaged",
          "NoInlining",
          "ForwardRef",
          "Synchronized",
          "NoOptimization",
          "PreserveSig",
          "AggressiveInlining",
          "AggressiveOptimization",
          "InternalCall",
          "MaxMethodImplVal"
        ],
        "type": "string"
      },
      "MethodInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberTypes"
              }
            ],
            "readOnly": true
          },
          "returnParameter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParameterInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "returnType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "returnTypeCustomAttributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ICustomAttributeProvider"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodAttributes"
              }
            ],
            "readOnly": true
          },
          "methodImplementationFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodImplAttributes"
              }
            ],
            "readOnly": true
          },
          "callingConvention": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CallingConventions"
              }
            ],
            "readOnly": true
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RuntimeMethodHandle"
              }
            ],
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectedType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "module": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Module"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModifiedScreenElement": {
        "required": [
          "name",
          "newValue"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the detail screen element was modified.  Specify a value of 0 if the edit occurred\r\non a non DUI screen.",
            "format": "int32",
            "example": 10938
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the screen element that was edited.",
            "example": "Email Address"
          },
          "oldValue": {
            "type": "string",
            "description": "The original value of screen element.",
            "nullable": true,
            "example": "Smith"
          },
          "newValue": {
            "minLength": 1,
            "type": "string",
            "description": "The new value of screen element.",
            "example": "Jones"
          }
        },
        "additionalProperties": false,
        "description": "The details of the attempted screen modification."
      },
      "Module": {
        "type": "object",
        "properties": {
          "assembly": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Assembly"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "moduleVersionId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "scopeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "moduleHandle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModuleHandle"
              }
            ],
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModuleHandle": {
        "type": "object",
        "properties": {
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NewUserTypeConfiguration": {
        "type": "object",
        "properties": {
          "resourceRequired": {
            "type": "boolean",
            "description": "Flag that indicates if a resource is required for new user type.",
            "example": false
          },
          "groupTreeId": {
            "type": "integer",
            "description": "A Self Service resource tree that contains the set of resources that will be allocated to the user upon\r\nregistration.",
            "format": "int32",
            "nullable": true,
            "example": 10001
          },
          "approvalId": {
            "type": "integer",
            "description": "The id of an approval that should be initiated when this new user request is submitted.",
            "format": "int32",
            "nullable": true,
            "example": 10932
          },
          "preProcessWorkflowId": {
            "type": "integer",
            "description": "The id of a workflow that should be initiated when this new user request is submitted. This workflow\r\nwill be launched before any approval or provisioning occurs. This allows the workflow to gather any\r\nadditional information necessary for the provisioning process.",
            "format": "int32",
            "nullable": true,
            "example": 10283
          },
          "screen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreen"
              }
            ],
            "description": "The screen definition that contains the information that must be submitted for a\r\nnew user of this type.",
            "nullable": true
          },
          "submitMessage": {
            "type": "string",
            "description": "The confirmation message that should be displayed when the registration request has been\r\nsuccessfully submitted. This is a locale aware property.",
            "nullable": true,
            "example": "Your registration is successful"
          },
          "requestDateConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ISelfServiceRequestDateConfig"
              }
            ],
            "description": "Configuration that states how request dates should be displayed and their limits.",
            "nullable": true
          },
          "passwordEnforcementConfigId": {
            "type": "integer",
            "description": "The id of the password enforcement configuration associated with this user type. If not set, any password defined\r\non the request will not be validated when the request is submitted.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "passwordEnforcementConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelfRegistrationPasswordEnforcement"
              }
            ],
            "description": "ViewModel for PasswordEnforcementConfig to be used as a read only model.",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "Flag that indicates whether this new user type is the default type to be displayed when a\r\nnew user request is first presented to the user.",
            "example": false
          },
          "displayName": {
            "type": "string",
            "description": "The value to be displayed to the user if this new user type is selected for a registration.\r\nThis is a locale aware property.",
            "nullable": true,
            "example": "student"
          },
          "value": {
            "type": "string",
            "description": "The value to be stored in the new user product attribute when this new user type is selected.",
            "nullable": true,
            "example": "student"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details about the new user type configuration."
      },
      "Note": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "Note written by OBO.",
            "example": "Verified user's identity and unlocked their account and sent a one time pin to let them reset their password."
          },
          "helpDeskUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IUserProfileSummary"
              }
            ],
            "description": "Summary detail of the help desk user who created the note.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "The date the note was created.",
            "format": "date-time",
            "example": "2022-06-03T15:19:47.348Z"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteTag"
            },
            "description": "List of tags associated with the note.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The userId of the user the help desk was working with.",
            "nullable": true,
            "example": "163587687654313"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "NoteTag": {
        "required": [
          "name",
          "systemDefault"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the note tag.",
            "nullable": true,
            "example": "User had locked their account and cannot login."
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The name of the note tag.",
            "example": "Locked Account"
          },
          "systemDefault": {
            "type": "boolean",
            "description": "Flag that indicates if the note tag element is the system default.",
            "example": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "NotificationCategory": {
        "enum": [
          "Action",
          "Expiry",
          "Status",
          "Other"
        ],
        "type": "string"
      },
      "NotificationDeliveryMethod": {
        "enum": [
          "Email",
          "Sms",
          "Both"
        ],
        "type": "string"
      },
      "NotificationEvent": {
        "required": [
          "id",
          "recipients",
          "sender"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "Unique Id of the notification event",
            "example": "dcd5b5c8-48d8-4e7b-b8df-f502afa7141d"
          },
          "notificationId": {
            "type": "integer",
            "description": "Id of the notification template",
            "format": "int32",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "Id of parent notification. Applicable to reminder and resend notifications",
            "nullable": true,
            "example": "0ba7ef28-9168-4702-aa7a-6117f8e63414"
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationPriority"
              }
            ],
            "description": "Priority of the notification",
            "example": "High"
          },
          "reminder": {
            "type": "boolean",
            "description": "Indicates whether this notification is a reminder or not",
            "nullable": true
          },
          "consolidatedNotificationId": {
            "type": "integer",
            "description": "Id of the consolidated notification template",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationEventType"
              }
            ],
            "description": "Type of notification",
            "example": "Approval"
          },
          "feature": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationFeature"
              }
            ],
            "description": "Feature associated with notification",
            "nullable": true,
            "example": "Password expiry"
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationCategory"
              }
            ],
            "description": "Category associated with notification",
            "nullable": true,
            "example": "Action"
          },
          "messageSection": {
            "type": "string",
            "description": "Message section to which the notification is associated when consolidation happens",
            "nullable": true,
            "example": "Login"
          },
          "senderName": {
            "type": "string",
            "description": "Name of sender",
            "nullable": true,
            "example": "John Doe"
          },
          "sender": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "description": "Email Id of sender",
            "example": "john.doe@exmaple.com"
          },
          "replyToAddress": {
            "type": "string",
            "description": "Address being replied to",
            "nullable": true,
            "example": "jane.doe@exmaple.com"
          },
          "recipientId": {
            "type": "string",
            "description": "Pbw User Id of the recipient",
            "nullable": true,
            "example": "-136287082523861124964089501451370904422"
          },
          "recipients": {
            "maxItems": 1024,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Email addresses of the recipients",
            "example": [
              "name@email.com"
            ]
          },
          "ccAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Carbon copy email recipients",
            "nullable": true,
            "example": [
              "name@email.com"
            ]
          },
          "bccAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Blind carbon copy email recipients",
            "nullable": true,
            "example": [
              "name@email.com"
            ]
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "File(s) attached to a notification",
            "nullable": true,
            "example": [
              "fileName"
            ]
          },
          "notifyAttemptTime": {
            "type": "string",
            "description": "Date/time at which the notification will be sent",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-22T12:26:00Z"
          },
          "sentTime": {
            "type": "string",
            "description": "Time the notification was sent",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-22T12:26:00Z"
          },
          "failedTime": {
            "type": "string",
            "description": "Time the pending notification failed",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-22T13:26:56Z"
          },
          "retryCount": {
            "type": "integer",
            "description": "Number of attempts made to send the notification",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "failureReason": {
            "type": "string",
            "description": "Reason why the notification failed to send",
            "nullable": true,
            "example": "Couldn't connect to host, port: localhost, 25;"
          },
          "uniqueFeatureKey": {
            "type": "integer",
            "description": "Unique feature key to update the end time when the request completes to stop sending reminders",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "workflowInstanceId": {
            "type": "string",
            "description": "Workflow instance id",
            "nullable": true,
            "example": "WF5229751766277954562"
          },
          "parameters": {
            "type": "string",
            "description": "Values used for substitution as json string",
            "nullable": true,
            "example": "{\"repeatedVariables\":[{\"Account-ID\":\"CN=Dev user,..."
          },
          "formattedNotification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FormattedNotification"
              }
            ],
            "description": "Formatted notification associated with this event",
            "nullable": true
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationEventSource"
              }
            ],
            "description": "Source of the notification event",
            "nullable": true,
            "example": "Administrator"
          },
          "deliveryMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryMethod"
              }
            ],
            "description": "The method that will be used to deliver the message.",
            "example": "Email"
          },
          "createDate": {
            "type": "string",
            "description": "Date/Time at which the notification was created",
            "format": "date-time",
            "example": "2023-06-23T15:29:42.546Z"
          },
          "endDate": {
            "type": "string",
            "description": "Date when the notification will no longer be valid",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-23T15:29:42.546Z"
          },
          "name": {
            "type": "string",
            "description": "The name of the notification template.",
            "nullable": true,
            "example": "Password Has Expired Message"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationStatus"
              }
            ],
            "description": "Current status of the notification",
            "example": "Pending"
          }
        },
        "additionalProperties": false
      },
      "NotificationEventResend": {
        "type": "object",
        "properties": {
          "recipientAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Addresses of the recipients of the notification to be resent",
            "nullable": true
          },
          "ccAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Email addresses in the carbon copy list",
            "nullable": true
          },
          "bccAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Email addresses in the blind carbon copy list",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationEventSource": {
        "enum": [
          "Administrator",
          "HelpDeskAdministrator",
          "DelegatedAdministratorOrUser",
          "UserSelfServiceOperation",
          "WorkflowDrivenChaining",
          "TriggerDriven",
          "Scheduled",
          "SystemOperations",
          "ApprovalRequest",
          "PolicyEvaluationBased",
          "UserSelfServiceProvisioning",
          "HighlyPrivilegedAccount",
          "IdPFederation",
          "SpmLv2Psp",
          "Rest",
          "PinAuthentication",
          "Kiosk",
          "ForgotUserId",
          "CasLogin",
          "JustInTimeProvisioning",
          "Cobia",
          "OIDC",
          "ProfileOperation",
          "NotificationService",
          "IdentityApi",
          "GroupEngine",
          "PasswordFilter",
          "Compliance",
          "IdentityPortal",
          "SelfRegistration",
          "WorkflowAndConnectivityStudio"
        ],
        "type": "string"
      },
      "NotificationEventType": {
        "enum": [
          "Resource",
          "Approval",
          "Password",
          "Hpam",
          "SelfService",
          "Policy",
          "HA",
          "License",
          "Compliance",
          "Workflow",
          "Scheduler",
          "General",
          "PineMail",
          "Mapper",
          "Psa",
          "Reports",
          "Sms",
          "QrCode",
          "Duo",
          "ClaimStart",
          "ClaimBene",
          "ForgotPasswordStart",
          "RecoverBene",
          "ForgotUsernameStart",
          "SimulatedEmail",
          "Push"
        ],
        "type": "string"
      },
      "NotificationFeature": {
        "enum": [
          "PasswordExpiry",
          "PasswordExpired",
          "Approval",
          "Policy",
          "Compliance",
          "SelfService",
          "Workflow",
          "Resource",
          "Hpam",
          "Password",
          "Claim"
        ],
        "type": "string"
      },
      "NotificationPriority": {
        "enum": [
          "Low",
          "Normal",
          "High"
        ],
        "type": "string"
      },
      "NotificationStatus": {
        "enum": [
          "New",
          "Pending",
          "Stopped",
          "Sending",
          "Sent",
          "Failed",
          "WaitingForRetry",
          "QueuedInGig"
        ],
        "type": "string"
      },
      "Operation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Operation`1": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderedListItem": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the ordered list item.",
            "nullable": true,
            "example": "FL"
          },
          "order": {
            "type": "integer",
            "description": "The order of the ordered list item.",
            "format": "int32",
            "example": 1
          },
          "value": {
            "type": "string",
            "description": "The value of the ordered list item.",
            "nullable": true,
            "example": "FL"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The definition of an ordered list that defines a display value, actual value, and order for the values of a\r\nmulti-valued attribute."
      },
      "Organization": {
        "required": [
          "code",
          "displayName",
          "name"
        ],
        "type": "object",
        "properties": {
          "tenantCode": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The tenant code of the organization.",
            "nullable": true,
            "example": "FIILLC"
          },
          "admins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUserProfileSummary"
            },
            "description": "The list of administrators of this organization.",
            "nullable": true
          },
          "globalAdministratorEmailAddress": {
            "type": "string",
            "description": "Generic Email address used by all features to send notification if not specified individually.",
            "nullable": true,
            "example": "Admin@yourdomain.com"
          },
          "maximumConcurrentWorkflows": {
            "type": "integer",
            "description": "Maximum number of concurrent workflow instances that can be executed.",
            "format": "int32",
            "example": 100
          },
          "ldapUserBaseDn": {
            "type": "string",
            "description": "Base LDAP DN where users are stored.",
            "nullable": true,
            "example": "ou=people,dc=example,dc=com"
          },
          "ldapOrganizationAttribute": {
            "type": "string",
            "description": "The LDAP attribute used to filter the organization.",
            "nullable": true,
            "example": "o"
          },
          "ldapOrganizationAttributeValue": {
            "type": "string",
            "description": "The value of the Fii.Items.ViewModels.OrganizationViewModel.LdapOrganizationAttribute.",
            "nullable": true,
            "example": "ou"
          },
          "code": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier within the organization's tenant that identifies this organization.",
            "example": "DEV"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The description of the organization.",
            "nullable": true,
            "example": "This is the development test FII of the organization"
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The display name of the organization.",
            "example": "Development"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of organization.",
            "example": "Development"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationStatus"
              }
            ],
            "description": "The status of the organization.",
            "example": "Disabled"
          },
          "tenantId": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The id of the tenant that owns this organization.",
            "nullable": true,
            "example": "FIILLC-DEV"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details of an organization."
      },
      "OrganizationStatus": {
        "enum": [
          "Enabled",
          "Disabled",
          "Exporting",
          "Importing",
          "Purging",
          "Purged"
        ],
        "type": "string",
        "description": "The status of the organization."
      },
      "ParameterAttributes": {
        "enum": [
          "None",
          "In",
          "Out",
          "Lcid",
          "Retval",
          "Optional",
          "HasDefault",
          "HasFieldMarshal",
          "Reserved3",
          "Reserved4",
          "ReservedMask"
        ],
        "type": "string"
      },
      "ParameterInfo": {
        "type": "object",
        "properties": {
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParameterAttributes"
              }
            ],
            "readOnly": true
          },
          "member": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parameterType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isIn": {
            "type": "boolean",
            "readOnly": true
          },
          "isLcid": {
            "type": "boolean",
            "readOnly": true
          },
          "isOptional": {
            "type": "boolean",
            "readOnly": true
          },
          "isOut": {
            "type": "boolean",
            "readOnly": true
          },
          "isRetval": {
            "type": "boolean",
            "readOnly": true
          },
          "defaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "rawDefaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "hasDefaultValue": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PasswordEnforcement": {
        "required": [
          "enabled",
          "mutuallyExclusive",
          "name",
          "passwordPolicyId",
          "syncPasswords"
        ],
        "type": "object",
        "properties": {
          "passwordPolicyId": {
            "type": "integer",
            "description": "Id of the password policy.",
            "format": "int32",
            "example": 10001
          },
          "priority": {
            "type": "integer",
            "description": "Password enforcement configurations are created with an assigned priority. Password\r\npolicies in higher priority enforcement configuration will be set as the enforced password policy\r\nwhen a user qualifies for multiple enforcement configurations. Two password enforcement\r\nconfigurations cannot have the same priority. Priority value range is from 1 to 100 with 100 as the\r\nhighest priority.",
            "format": "int32",
            "example": 100
          },
          "syncPasswords": {
            "type": "boolean",
            "description": "Flag that indicates that, if the connected systems account of a user in a password enforcement have a common\r\npassword.",
            "example": true
          },
          "mutuallyExclusive": {
            "type": "boolean",
            "description": "Flag that indicates that the end user cannot use the same password to reset connected system accounts belonging to\r\ndifferent enforcements.",
            "example": true
          },
          "notifyDaysAtSelfServiceLogin": {
            "type": "integer",
            "description": "Notify user that the password is about to expire X day(s) before expiry at Self-Service login.",
            "format": "int32",
            "example": 30
          },
          "systems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordEnforcementSystem"
            },
            "description": "The list of connected systems configured for the password enforcement.",
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordEnforcementNotification"
            },
            "description": "The list of notifications send out on password expiry.",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordEnforcementUserGroup"
            },
            "description": "The list of the user groups who qualify for this password enforcement configuration.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the password enforcement. This is a locale aware property.",
            "nullable": true,
            "example": "PEC Policy with simple password policy"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the password enforcement. This is a locale aware property.",
            "nullable": true,
            "example": "PEC Policy"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates if the password enforcement is enabled. Only enabled enforcements will be\r\nevaluated during the password enforcement evaluation for a user.",
            "example": true
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "Name of the password enforcement.",
            "example": "Simple passwords"
          },
          "orgId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details about the password policy enforcement."
      },
      "PasswordEnforcementConfiguration": {
        "type": "object",
        "properties": {
          "systemId": {
            "type": "integer",
            "description": "The id of a connected system that is a member of this reset configuration.",
            "format": "int32",
            "example": 1048
          },
          "notifyDaysAtSelfServiceLogin": {
            "type": "integer",
            "description": "The number of days before expiration that the user should be notified via a login alert that\r\ntheir password is about to expire.",
            "format": "int32",
            "example": 10
          },
          "passwordPolicyId": {
            "type": "integer",
            "description": "The id of the password reset policy that defines the password content rules that must be\r\nmet when the password is reset.",
            "format": "int32",
            "example": 10001
          },
          "syncPasswords": {
            "type": "boolean",
            "description": "A flag that indicates whether all systems in the reset configuration should share the same\r\npassword.  If true, when the password is reset, all user accounts in the systems defined\r\nin the configuration will have their password reset to the new value.  If false, only the\r\naccounts that the user selected in the reset configuration will have their password reset.",
            "example": true
          },
          "mutuallyExclusive": {
            "type": "boolean",
            "description": "A flag that indicates whether the same password can be used across multiple reset configurations.\r\nIf true, a user may not attempt to reset their password for two systems that are in different\r\nreset configurations to the same value.  If false, the user may use the same password across\r\ndifferent configurations.",
            "example": true
          },
          "scramblePasswordOnExpiry": {
            "type": "boolean",
            "description": "A flag that indicates whether the Identity system should reset the password to a randomly\r\ngenerated password for any accounts in this reset configuration that have expired.  If true,\r\naccounts that have expired passwords will be reset.  If false, the expired account will be\r\nleft alone.",
            "example": false
          },
          "primary": {
            "type": "boolean",
            "description": "A flag that indicates this is the primary system in the reset configuration.  Accounts on the\r\nprimary system will be reset first.  If the system is unable to reset the password for the\r\nprimary system accounts, then it will not attempt to reset the passwords of any accounts in\r\nthe remaining systems in the reset configuration.",
            "example": true
          },
          "visible": {
            "type": "boolean",
            "description": "A flag that indicates whether the user should see this system when accounts and systems are\r\ndisplayed as part of the reset password user interface.",
            "example": false
          },
          "userGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of user group ids that define the set of users who qualify for this reset configuration.",
            "nullable": true,
            "example": [
              10004,
              10005
            ]
          },
          "passwordResetRequestorNotificationId": {
            "type": "integer",
            "description": "The reset password notification id where the notification is sent after a Self-Service password is reset by the\r\nrequestor.",
            "format": "int32",
            "nullable": true,
            "example": 1500
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the reset configuration.  This is a locale aware property.",
            "nullable": true,
            "example": "Internal Systems password policy"
          },
          "enabled": {
            "type": "boolean",
            "description": "A flag that indicates whether this reset configuration is active.  If false, the password policy\r\nshould not be enforced when a user tries to reset a password in this configuration.  Setting this\r\nto false may also change the evaluation process and cause the user to qualify for another reset\r\nconfiguration that has the same system in it with a lower priority.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The name of the password reset configuration.",
            "nullable": true,
            "example": "InternalPasswordPolicy"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of this password reset configuration.  The priority is used to resolve situations where\r\na system is defined in multiple reset configurations and the user qualifies for both.  The system\r\nwill select the reset configuration with the highest priority in this situation.",
            "format": "int32",
            "example": 39
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A system in a password reset enforcement configuration.  This defines how the system is referenced\r\nas part of the reset configuration and defines the users who have accounts on the system that\r\nqualified for the configuration."
      },
      "PasswordEnforcementNotification": {
        "required": [
          "expiryNotifyType",
          "passwordEnforcementId"
        ],
        "type": "object",
        "properties": {
          "passwordEnforcementId": {
            "type": "integer",
            "description": "The id of the password enforcement these notification settings are associated with.",
            "format": "int32",
            "example": 1
          },
          "notificationId": {
            "type": "integer",
            "description": "The id of the email notification to send out for password expiry.",
            "format": "int32",
            "example": 28
          },
          "smsNotificationId": {
            "type": "integer",
            "description": "The id of the sms notification to send out for password expiry.",
            "format": "int32",
            "nullable": true,
            "example": 38
          },
          "notifyDaysBeforeExpiry": {
            "type": "integer",
            "description": "The number of days prior to password expiry to send the notification.",
            "format": "int32",
            "nullable": true,
            "example": 30
          },
          "expiryNotifyType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpiryNotifyType"
              }
            ],
            "description": "The type of password expiry notifications.",
            "example": "Expiring"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The details of the notifications sent out on password expiry."
      },
      "PasswordEnforcementSystem": {
        "required": [
          "master",
          "passwordEnforcementId",
          "scramblePasswordOnExpiry",
          "visible"
        ],
        "type": "object",
        "properties": {
          "passwordEnforcementId": {
            "type": "integer",
            "description": "The id of the password enforcement.",
            "format": "int32",
            "example": 1
          },
          "systemId": {
            "type": "integer",
            "description": "The id of the connected system configured for the password enforcement.",
            "format": "int32",
            "example": 1009
          },
          "visible": {
            "type": "boolean",
            "description": "Flag that indicates the visibility of user accounts in password reset screens.",
            "example": true
          },
          "scramblePasswordOnExpiry": {
            "type": "boolean",
            "description": "Flag that indicates the password will be scrambled if the password expires. If set, the user will not be able to\r\nuse their expired password to access the system.",
            "example": true
          },
          "master": {
            "type": "boolean",
            "description": "Flag that indicates that the selected connected system is the Master connected system of the password enforcement\r\nconfiguration.\r\nWhen the Password Sync Option is enabled, the Master system in a password enforcement configuration will be the\r\nfirst connected system to get its password reset. If the Master system password reset fails, then reset of all\r\nother connected systems in the password enforcement configuration will be skipped. The Master indicator will be\r\ndisplayed in all the areas that allow accounts in password enforcement configuration to be selected for password\r\nreset.",
            "example": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The details of the connected systems configured for the password enforcement."
      },
      "PasswordEnforcementUserGroup": {
        "required": [
          "passwordEnforcementId",
          "userGroupId"
        ],
        "type": "object",
        "properties": {
          "passwordEnforcementId": {
            "type": "integer",
            "description": "The id of the password enforcement.",
            "format": "int32",
            "example": 10001
          },
          "userGroupId": {
            "type": "integer",
            "description": "The id of the user group that qualifies for this configuration.",
            "format": "int32",
            "example": 10001
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details of which users qualify for a password enforcement configuration."
      },
      "PasswordPolicy": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordPolicyDetail"
            },
            "description": "The password validation rules that make up this password policy.",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the password policy.",
            "nullable": true,
            "example": "Default Complex Password Policy"
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The name of the password policy.",
            "example": "Complex Passwords"
          },
          "systemDefault": {
            "type": "boolean",
            "description": "Flag that indicates if the password policy is the system default.",
            "example": true
          },
          "orgId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details of the password policy."
      },
      "PasswordPolicyAttributeDetail": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The attribute display name. This is a locale aware property.",
            "nullable": true,
            "example": "First Name"
          },
          "name": {
            "type": "string",
            "description": "The attribute name.",
            "nullable": true,
            "example": "Person-Firstname"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A product attribute whose user specific value should not be used within their password."
      },
      "PasswordPolicyDetail": {
        "required": [
          "conditional",
          "type",
          "visible"
        ],
        "type": "object",
        "properties": {
          "attribute": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PasswordPolicyAttributeDetail"
              }
            ],
            "description": "If Type is ExcludeUserAttributes, this is the attribute whose value should be excluded\r\nfrom use in the password.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PasswordPolicyRuleType"
              }
            ],
            "description": "The type of password validation rule.",
            "example": "MinimumLength"
          },
          "value": {
            "maxLength": 512,
            "type": "string",
            "description": "The value associated with the password rule.  For example, the minimum or maximum length\r\nof the password, or what characters should be excluded from use.  The value will be\r\ndependent on Type.",
            "nullable": true,
            "example": "32"
          },
          "visible": {
            "type": "boolean",
            "description": "Flag that indicates whether the user should see this password rule.",
            "example": true
          },
          "conditional": {
            "type": "boolean",
            "description": "Flag that indicates whether this rule is part of a quorum condition.  A quorum condition\r\nis one where a minimum number of rules must be satisfied for the password to be considered\r\na valid password.  For example, 3 out of 4 rules marked Conditional must pass for the\r\npassword to be considered valid.",
            "example": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details of the password policy."
      },
      "PasswordPolicyRuleType": {
        "enum": [
          "InternalRule",
          "MinimumLength",
          "MaximumLength",
          "AllowLettersOnly",
          "MustStartWithLetter",
          "MinimumLetterCount",
          "MaximumLetterCount",
          "RequireMixedCase",
          "MinimumUpperCaseCount",
          "MinimumLowerCaseCount",
          "AllowNumbersOnly",
          "MustStartWithNumber",
          "MinimumNumberCount",
          "MaximumNumberCount",
          "ExcludeRepeatingCharacter",
          "ExcludeDictionaryWords",
          "ExcludeUserAttributes",
          "ExcludeShiftedUserAttributes",
          "MinimumSpecialCharacters",
          "ExcludeCharacters",
          "AllowPasswordReuse",
          "PasswordHistoryCount",
          "ExternalScript",
          "FunctionName",
          "ExternalRule",
          "MaximumPasswordAge",
          "CustomPolicyDescription",
          "PasswordStartsWithWord",
          "MinimumDictionaryWordLength",
          "UserAttributeLength",
          "MaximumCharacterPairs",
          "MaximumCharacterRepeat",
          "DictionaryEndsWith",
          "ExcludeRearrangeUserAttr",
          "ExcludeUserId",
          "ExcludeShiftedUserId",
          "ExcludeShiftedUserIds",
          "MinimumUserIdLength",
          "DictionaryContainsLettersOnly",
          "MinimumPasswordAge",
          "MinimumConditionalRuleCount",
          "AllowedCharacters",
          "PasswordScoreEnabled",
          "MinimumPasswordScore"
        ],
        "type": "string",
        "description": "Password Policy Rule Types"
      },
      "PasswordReset": {
        "required": [
          "accountIds",
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "The new password to set on the accounts referenced by AccountIds.  If the accounts referenced\r\nby AccountIds are in a system that qualifies for a password reset configuration, then the\r\npassword must meet the password content rules defined in the configuration before the password\r\nwill be reset.  An error will be returned if the password does not meet the password content\r\nrules if they are configured.",
            "example": "TestPa$$word3"
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of the accounts whose password should be reset.",
            "example": [
              101,
              103
            ]
          },
          "requestorNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be sent to the requestor when the password is reset.",
            "format": "int32",
            "example": 10003
          },
          "beneficiaryNotificationId": {
            "type": "integer",
            "description": "The id of the notification to be sent to the account owner when the password is reset.",
            "format": "int32",
            "example": 10004
          }
        },
        "additionalProperties": false,
        "description": "Reset Password command view model"
      },
      "PasswordResetBy": {
        "enum": [
          "None",
          "External",
          "OboUserOnly",
          "UsersAndOboUser"
        ],
        "type": "string",
        "description": "Specifies who can reset the password."
      },
      "PasswordResetConfiguration": {
        "type": "object",
        "properties": {
          "resyncEnabled": {
            "type": "boolean",
            "description": "Flag that indicates whether password resync should be displayed in the Portal UI"
          },
          "enforcements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordEnforcementConfiguration"
            },
            "description": "A list of systems and their password enforcement configuration details.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A system in a password reset enforcement configuration.  This defines how the system is referenced\r\nas part of the reset configuration and defines the users who have accounts on the system that\r\nqualified for the configuration."
      },
      "PasswordResetResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "passwordRuleStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordRuleStatus"
            },
            "nullable": true
          },
          "succeeded": {
            "type": "boolean",
            "readOnly": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PasswordRuleStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "rulePassed": {
            "type": "boolean"
          },
          "ruleData": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "nullable": true
          },
          "succeeded": {
            "type": "boolean",
            "readOnly": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Persona": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the persona.",
            "nullable": true,
            "example": "FDAD9492-8721-4E48-9920-3A4B788152A6"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PersonaType"
              }
            ],
            "description": "The type of persona.",
            "example": "User"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The list of groups that qualify who is a member of this persona.",
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeaturePermissionRelationship"
            },
            "description": "The list of features and the permissions associated with each feature that are\r\nassigned to this persona.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the persona.  This is a locale aware property.",
            "nullable": true,
            "example": "Users who can manage the authorization of resources and access."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the persona.  This is a locale aware property.",
            "nullable": true,
            "example": "Approvers"
          },
          "enabled": {
            "type": "boolean",
            "description": "A flag that indicates whether this persona is active.",
            "example": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the persona.",
            "example": "Approvers"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of this persona.  Used to determine the importance of the persona's affiliation.",
            "format": "int32",
            "example": 10
          },
          "systemDefault": {
            "type": "boolean",
            "description": "A flag that indicates whether this persona is an internal or system defined persona.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "Details of an identity persona."
      },
      "PersonaCreate": {
        "required": [
          "displayName",
          "groups",
          "name"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PersonaType"
              }
            ],
            "description": "The type of persona.",
            "example": "EndUser"
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "The English (en) locale version of the description.",
            "nullable": true,
            "example": "Users who can manage the authorization of resources and access."
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The English (en) locale version of the display name.",
            "example": "Approvers"
          },
          "enabled": {
            "type": "boolean",
            "description": "A flag that indicates whether this persona is active.",
            "example": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the persona.",
            "example": "Approvers"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of this persona.  Used to determine the importance of the persona's affiliation.",
            "format": "int32",
            "example": 10
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeaturePermissionCreateUpdate"
            },
            "description": "The list of features and the permissions associated with each feature that are assigned to this\r\npersona.  This list is required if the Type is not 'Default'.  All features assigned to this\r\npersona must be of the same type as the persona type.",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of additional group ids that qualify who is a member of this persona."
          }
        },
        "additionalProperties": false
      },
      "PersonaLocale": {
        "required": [
          "displayName",
          "locale"
        ],
        "type": "object",
        "properties": {
          "locale": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "The locale of the persona display name and description.",
            "example": "en"
          },
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "The description of the persona in the locale specified by the Locale property.",
            "nullable": true,
            "example": "Users who can manage the authorization of resources and access."
          },
          "displayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The display name of the persona in the locale specified by the Locale property.",
            "example": "Approvers"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The locale specific information associated with a persona."
      },
      "PersonaType": {
        "enum": [
          "Identity",
          "EndUser",
          "DelegatedAdministrator",
          "Administrator"
        ],
        "type": "string",
        "description": "Flag that indicates the type of user associated with a persona."
      },
      "PersonaUpdate": {
        "required": [
          "groups",
          "name"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PersonaType"
              }
            ],
            "description": "The type of persona.",
            "example": "User"
          },
          "enabled": {
            "type": "boolean",
            "description": "A flag that indicates whether this persona is active.",
            "example": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the persona.",
            "example": "Approvers"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of group ids that qualify who is a member of this persona."
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeaturePermissionCreateUpdate"
            },
            "description": "The list of features and the permissions associated with each feature that are assigned to this\r\npersona.  This list is required if the Type is not 'Default'.  All features assigned to this\r\npersona must be of the same type as the persona type.",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "description": "The priority of this persona.  Used to determine the importance of the persona's affiliation.",
            "format": "int32",
            "example": 10
          }
        },
        "additionalProperties": false,
        "description": "Details of an identity persona that can be modified."
      },
      "PhoneBiometrics": {
        "enum": [
          "Unknown",
          "Configured",
          "Disabled"
        ],
        "type": "string"
      },
      "PhoneCapability": {
        "enum": [
          "Auto",
          "Push",
          "Phone",
          "Sms",
          "MobileOneTimePin"
        ],
        "type": "string"
      },
      "PhoneEncryptionState": {
        "enum": [
          "Unknown",
          "Unencrypted",
          "Encrypted"
        ],
        "type": "string"
      },
      "PhonePlatform": {
        "enum": [
          "Unknown",
          "Android",
          "Ios",
          "Windows7",
          "BlackBerry",
          "JavaJ2Me",
          "Plam",
          "Symbian",
          "WindowsMobile",
          "Generic"
        ],
        "type": "string"
      },
      "PhoneType": {
        "enum": [
          "Unknown",
          "Mobile",
          "Landline"
        ],
        "type": "string"
      },
      "PinNotificationResponse": {
        "type": "object",
        "properties": {
          "expiresOn": {
            "type": "string",
            "description": "The date and time at which the PIN will expire.",
            "format": "date-time",
            "example": "2023-04-18 20:31:46.216"
          },
          "pinLength": {
            "type": "integer",
            "description": "The length of the generated pin.",
            "format": "int32",
            "example": 6
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of attributes that caused a PIN to be sent.",
            "nullable": true,
            "example": [
              "Person-Email1",
              "Person-HomePhone"
            ]
          },
          "emailSentTo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list email address that were sent a PIN.",
            "nullable": true,
            "example": [
              "john.smith@example.com",
              "jane.doe@example.com"
            ]
          },
          "smsSentTo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of SMS destinations that were sent a PIN.",
            "nullable": true,
            "example": [
              "8885551234",
              "8885559876"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "PIN information returned from server."
      },
      "PlatformType": {
        "enum": [
          "Ldap",
          "Jdbc",
          "Trigger",
          "File",
          "Apps",
          "Mapper",
          "Security",
          "Os",
          "Email"
        ],
        "type": "string",
        "description": "The type of application the connected system represents."
      },
      "PolicyApprovalType": {
        "enum": [
          "None",
          "Automated",
          "Requested",
          "Always"
        ],
        "type": "string"
      },
      "PolicyDetail": {
        "type": "object",
        "properties": {
          "approvalType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyApprovalType"
              }
            ],
            "description": "The approval type of the policy.",
            "example": "Automated"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the policy.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-06T12:44:20.838Z"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the policy.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-06T12:44:20.838Z"
          },
          "description": {
            "type": "string",
            "description": "The description of the policy.",
            "nullable": true,
            "example": "Identity Policy"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the policy that is being displayed",
            "nullable": true,
            "example": "Identity Policy"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether the policy is enabled.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The name of the policy",
            "nullable": true,
            "example": "Identity Policy"
          },
          "systemDefault": {
            "type": "boolean",
            "description": "Flag that indicates if the policy is the system default.",
            "example": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PolicyMemberStatus": {
        "enum": [
          "Deny",
          "Allow",
          "Failed",
          "AddInProgress",
          "RemoveInProgress",
          "Cancelled",
          "RemoveApprovalInProgress",
          "Inactive"
        ],
        "type": "string"
      },
      "PolicyMembership": {
        "type": "object",
        "properties": {
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyDetail"
              }
            ],
            "description": "Details of the policy",
            "nullable": true
          },
          "memberType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberType"
              }
            ],
            "description": "The membership type of the policy.",
            "example": "Requested"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyMemberStatus"
              }
            ],
            "description": "Status of the policy.",
            "example": "Active"
          }
        },
        "additionalProperties": false
      },
      "PolicyResource": {
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Id of the policy that provisioned the resource.",
            "format": "int32",
            "example": 10723
          },
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyResourceDetail"
              }
            ],
            "description": "Details of the resource",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PolicyResourceDetail": {
        "required": [
          "name",
          "systemId"
        ],
        "type": "object",
        "properties": {
          "resourceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceType"
              }
            ],
            "description": "The type of the resource",
            "example": "Account"
          },
          "riskScore": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "Risk Score associated with the resource. The value range is from 1-100.",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "systemId": {
            "type": "integer",
            "description": "The id of the system the resource is associated with.",
            "format": "int32",
            "example": 1008
          },
          "description": {
            "type": "string",
            "description": "Description of the resource. This is a locale aware property.",
            "nullable": true,
            "example": "Resource for testing new features"
          },
          "displayName": {
            "type": "string",
            "description": "Name of the resource that will be displayed. This is a locale aware property.",
            "nullable": true,
            "example": "Test resource"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Name of the resource.",
            "example": "ResourceT1"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PostEvictionCallbackRegistration": {
        "type": "object",
        "properties": {
          "evictionCallback": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostEvictionDelegate"
              }
            ],
            "nullable": true
          },
          "state": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostEvictionDelegate": {
        "type": "object",
        "properties": {
          "target": {
            "nullable": true,
            "readOnly": true
          },
          "method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MethodInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PostKioskRetrievalAction": {
        "enum": [
          "BackToOrigin",
          "RedirectToExternalUrl"
        ],
        "type": "string",
        "description": "Action to take once userId recovery is completed."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProductLocale": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ISO language code for the locale.",
            "nullable": true,
            "example": "en-US"
          },
          "description": {
            "type": "string",
            "description": "A description of the locale.",
            "nullable": true,
            "example": "English (US)"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether the locale is supported by the system.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The name of the locale.",
            "nullable": true,
            "example": "English"
          }
        },
        "additionalProperties": false,
        "description": "Basic locale information"
      },
      "ProductType": {
        "enum": [
          "Provisioning",
          "IdentityManagement",
          "IdentityAndProvisioning"
        ],
        "type": "string",
        "description": "The type of services a connected system supports."
      },
      "ProfileConfigSourceType": {
        "enum": [
          "SelfUpdate",
          "IdentityClaim",
          "SelfRegistration",
          "DelegatedAdministratorUpdate"
        ],
        "type": "string"
      },
      "ProfileGroupConfiguration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the dynamic group configuration.",
            "nullable": true,
            "example": "152A69492-8721-4E48-9920-3A4B788FDAD"
          },
          "filter": {
            "type": "string",
            "description": "The search filter to be used to obtain the list of group members.",
            "nullable": true,
            "example": "(User.Employee-Type equals literal.Development)"
          },
          "identityGroupId": {
            "type": "string",
            "description": "The id of the identity group that owns this configuration.",
            "nullable": true,
            "example": "BC132EEC-931A-4554-8188-7E88F1436D2B"
          }
        },
        "additionalProperties": false,
        "description": "The configuration details of an identity group when the GroupType is Dynamic. The\r\ngroup members will obtained from a search against the user identity database."
      },
      "PromptType": {
        "enum": [
          "Always",
          "Once",
          "Frequency"
        ],
        "type": "string",
        "description": "How often the alert should be displayed when logging in."
      },
      "ProvisionOption": {
        "enum": [
          "Administrative",
          "Automated"
        ],
        "type": "string",
        "description": "The provisioning option which specifies how the connected system functions."
      },
      "ReassignConfiguration": {
        "enum": [
          "None",
          "Approver",
          "Escalate",
          "Both"
        ],
        "type": "string",
        "description": "Type of reassignment that an approver is allowed to perform."
      },
      "RemoteQuery": {
        "type": "object",
        "properties": {
          "managerId": {
            "type": "string",
            "description": "The userId of the manager to use in any 'Manager.' dependent attribute substitutions.",
            "nullable": true,
            "example": "139173351463857259395846403198890878268"
          },
          "userId": {
            "type": "string",
            "description": "The userId of the user to use in any 'User.' or 'Resource.' substitutions",
            "nullable": true,
            "example": "139173351463857259395846403198890878268"
          },
          "requestorId": {
            "type": "string",
            "description": "The userId of the requestor to use in any 'Requestor.' dependent attribute substitutions.",
            "nullable": true,
            "example": "139173351463857259395846403198890878268"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": { }
            },
            "description": "Product Attribute values to be used if the remote query has any substitutions.\r\nThe attributes map key is the user type (user, manager, requestor, etc.) and the value of each map\r\nmember is another map whose key is the Product Attribute name and the value is the value to be substituted.\r\nThis is where dependent product attribute values that are on the same screen can be specified.",
            "nullable": true,
            "example": {
              "user": {
                "Person-EmailAlias2": "new@email.address.com",
                "Employee-MobilePhone": "555-555-1234"
              },
              "manager": {
                "Person-EmailAlias1": "manager@email.address.com"
              }
            }
          }
        },
        "additionalProperties": false,
        "description": "Screen element initial value query input"
      },
      "RequestAccountProcessState": {
        "enum": [
          "EntitlementProcessed",
          "AccountProcessed",
          "NotApplicable"
        ],
        "type": "string"
      },
      "RequestChangeType": {
        "enum": [
          "Add",
          "Modify",
          "Delete",
          "SetEndDate",
          "MakePermanent",
          "ChangeResource",
          "ChangePermission",
          "EndDateProcessing",
          "Suspend",
          "DisableAccess",
          "RemoveEntitlements",
          "Remediate",
          "AddEntitlements",
          "TransferAccess",
          "EnableAccess"
        ],
        "type": "string"
      },
      "RequestDateType": {
        "enum": [
          "StartAndEnd",
          "StartOnly",
          "EndOnly",
          "None"
        ],
        "type": "string"
      },
      "RequestEnableDisableAccess": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason why identity access is being enabled or disabled.",
            "nullable": true,
            "example": "Sabbatical"
          }
        },
        "additionalProperties": false
      },
      "RequestEvent": {
        "enum": [
          "Submitted",
          "Assigned",
          "Reassigned",
          "RequestedInfo",
          "Reply",
          "Modified",
          "Comment",
          "Approved",
          "Denied",
          "Allocated",
          "Revoked",
          "Failed",
          "Cancelled",
          "AdminReassigned",
          "Error",
          "InProcess",
          "Skipped",
          "PolicyEvaluation",
          "Inheritance",
          "SoDEnforcement",
          "Stopped",
          "Restarted",
          "Forwarded",
          "Processed",
          "Renamed",
          "Pending",
          "AdminNotified",
          "Enabled",
          "Disabled",
          "Queued"
        ],
        "type": "string",
        "description": "The type of approval event that occurred."
      },
      "RequestResourceType": {
        "enum": [
          "Group",
          "Resource",
          "Policy",
          "Hpam"
        ],
        "type": "string"
      },
      "RequestType": {
        "enum": [
          "Access",
          "Hpam",
          "SelfClaiming",
          "SelfRegistration",
          "ProfileUpdate",
          "Recertification",
          "HpamRecertification",
          "ChangeProfile",
          "DisableEntitlementAccess",
          "ResourceModification"
        ],
        "type": "string"
      },
      "ResourceType": {
        "enum": [
          "Account",
          "Entitlement",
          "NonIt"
        ],
        "type": "string"
      },
      "RfiType": {
        "enum": [
          "Requestor",
          "Beneficiary",
          "Approver"
        ],
        "type": "string"
      },
      "RoutingType": {
        "enum": [
          "Serial",
          "Parallel",
          "Hierarchical"
        ],
        "type": "string"
      },
      "RuntimeMethodHandle": {
        "type": "object",
        "properties": {
          "value": {
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SchemaListSettings": {
        "type": "object",
        "properties": {
          "listSource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeListSource"
              }
            ],
            "description": "The source of a list based attribute value.",
            "example": "Static"
          },
          "maxResults": {
            "type": "integer",
            "description": "The maximum number of values to return in the list.",
            "format": "int32",
            "example": 100
          },
          "searchSetting": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentitySchemaSearch"
              }
            ],
            "description": "The search settings that are used to get the values for the attribute.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedListItem"
            },
            "description": "The list of possible values if the product attribute defines\r\nthem as static.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The definition of settings to determine how the list values are determined."
      },
      "ScreenAttributeType": {
        "enum": [
          "User",
          "Manager",
          "SpecialField"
        ],
        "type": "string",
        "description": "The type of screen attribute."
      },
      "ScreenClass": {
        "enum": [
          "Detail",
          "Listing",
          "ViewDetail"
        ],
        "type": "string",
        "description": "The type of the screen."
      },
      "ScreenColumnSort": {
        "enum": [
          "None",
          "Ascending",
          "Descending"
        ],
        "type": "string",
        "description": "The direction a column in a listing screen should be sorted if it is sortable."
      },
      "ScreenElementAttribute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the product attribute. If the attribute is Special Fields this field will be empty.",
            "format": "int32",
            "nullable": true,
            "example": 10045
          },
          "valueProvider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeValueProvider"
              }
            ],
            "description": "The way a multi valued attribute value should be presented in a UI for input.",
            "example": "List"
          },
          "references": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeReferences"
              }
            ],
            "description": "The list of other dependent attribute references that are used to compute or verify its value.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderedListItem"
            },
            "description": "The list of possible values for this screen element if the product attribute defines\r\nthem as static.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the product attribute.",
            "nullable": true,
            "example": "Person-Firstname"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the product attribute. This is a locale specific value.",
            "nullable": true,
            "example": "First Name"
          },
          "description": {
            "type": "string",
            "description": "The description of the product attribute. This is a locale specific value.",
            "nullable": true,
            "example": "Firstname of the Person"
          },
          "contentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeContentType"
              }
            ],
            "description": "The content type or format.",
            "example": "Text"
          }
        },
        "additionalProperties": false,
        "description": "The details of the product attribute that is backing the screen element."
      },
      "ScreenElementComponentType": {
        "enum": [
          "TextInput",
          "SelectBox",
          "Blankspace",
          "Label",
          "Password",
          "Date",
          "Hidden",
          "Confirm",
          "MergedField",
          "Captcha",
          "Text",
          "ManagerSelectLink",
          "ManagerSelectButton",
          "RadioButtons",
          "CustomJavaScript",
          "MultivaluedSelection",
          "WorkflowButton"
        ],
        "type": "string",
        "description": "The type of component used for rendering the screen element."
      },
      "ScreenElementInitialValueType": {
        "enum": [
          "None",
          "SameAsRequestor",
          "Literal",
          "JavaScript",
          "MergedField",
          "DatabaseQuery",
          "LdapQuery",
          "CurrentDate"
        ],
        "type": "string",
        "description": "The initial value type of the screen element."
      },
      "ScreenElementInputValidation": {
        "type": "object",
        "properties": {
          "minLength": {
            "type": "integer",
            "description": "The minimum length of the input field.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "maxLength": {
            "type": "integer",
            "description": "The maximum length of the input field.",
            "format": "int32",
            "nullable": true,
            "example": 50
          },
          "minValue": {
            "type": "number",
            "description": "The minimum value of the input field.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "maxValue": {
            "type": "number",
            "description": "The maximum value of the input field.",
            "format": "double",
            "nullable": true,
            "example": 100
          },
          "required": {
            "type": "boolean",
            "description": "Flag that indicates if the input field is required.",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "The validation message to display if the value does not meet the validation requirements.\r\nThis is a locale aware property.",
            "nullable": true,
            "example": "Please enter a valid name."
          }
        },
        "additionalProperties": false,
        "description": "The Input validation for the screen element. This should be part of the validators as well."
      },
      "ScreenElementLayout": {
        "type": "object",
        "properties": {
          "span": {
            "type": "integer",
            "description": "The column span of the screen element container.",
            "format": "int32",
            "example": 1
          },
          "rowNumber": {
            "type": "integer",
            "description": "The row number of the screen element.",
            "format": "int32",
            "example": 1
          },
          "columnNumber": {
            "type": "integer",
            "description": "The column number of the screen element.",
            "format": "int32",
            "example": 2
          },
          "multivaluedListSize": {
            "type": "integer",
            "description": "The size of the multi valued list for the multi item screen element.",
            "format": "int32",
            "nullable": true,
            "example": 5
          },
          "order": {
            "type": "integer",
            "description": "The screen element position in the container column.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false,
        "description": "The screen element layout details which specifies how the element should be displayed."
      },
      "ScreenElementValidation": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidationType"
              }
            ],
            "description": "The type of validation used for a screen elements data.",
            "nullable": true,
            "example": "RegularExpression"
          },
          "message": {
            "type": "string",
            "description": "The validation message to display if the value does not meet the validation requirements.\r\nThis is locale aware property.",
            "nullable": true,
            "example": "Please enter a valid email"
          },
          "order": {
            "type": "integer",
            "description": "The display order of the validation control.",
            "format": "int32",
            "example": 1
          },
          "value": {
            "type": "string",
            "description": "The value of the validation query.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The validation details of the screen element."
      },
      "ScreenElementValue": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenElementInitialValueType"
              }
            ],
            "description": "The initial value type of the screen element.",
            "example": "Literal"
          },
          "value": {
            "type": "string",
            "description": "The initial value of the screen element.",
            "nullable": true,
            "example": "Sales"
          }
        },
        "additionalProperties": false,
        "description": "Details of the screen element initial value type and its values."
      },
      "ScreenInstruction": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstructionalTextType"
              }
            ],
            "description": "The type of the instructional text for the screen element.",
            "example": "Text"
          },
          "value": {
            "type": "string",
            "description": "The instructional text for the screen element to display.",
            "nullable": true,
            "example": "Please add a valid email address"
          }
        },
        "additionalProperties": false,
        "description": "Configuration information about whether the screen element has any help associated with it."
      },
      "ScreenLock": {
        "enum": [
          "Unknown",
          "Unlocked",
          "Locked"
        ],
        "type": "string"
      },
      "ScreenSection": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailScreenElement"
            },
            "description": "The list of detail screen elements that are included in this section.",
            "nullable": true
          },
          "layout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScreenSectionLayout"
              }
            ],
            "description": "The layout details on how the screen section should be displayed.",
            "nullable": true
          },
          "internalSection": {
            "type": "boolean",
            "description": "Flag that indicates that this is an internally generated section."
          },
          "label": {
            "type": "string",
            "description": "The label text of the screen section. This is a locale aware property.",
            "nullable": true,
            "example": "Manager's Information"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details of the dynamic screen section properties."
      },
      "ScreenSectionLayout": {
        "type": "object",
        "properties": {
          "rowNumber": {
            "type": "integer",
            "description": "The row number of the screen element.",
            "format": "int32",
            "example": 1
          },
          "columnNumber": {
            "type": "integer",
            "description": "The column number of the screen element.",
            "format": "int32",
            "example": 2
          },
          "numberOfColumns": {
            "type": "integer",
            "description": "The number of columns in the screen section.",
            "format": "int32",
            "example": 1
          },
          "span": {
            "type": "integer",
            "description": "The span value of the screen section.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false,
        "description": "Information about how the screen section should be displayed."
      },
      "SecurityPersona": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PersonaType"
              }
            ],
            "description": "The type of persona.",
            "example": "User"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityPersonaFeature"
            },
            "description": "The list of features and the permissions associated with each feature that are\r\nassigned to this persona.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SecurityPersonaFeature": {
        "type": "object",
        "properties": {
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeaturePermission"
              }
            ],
            "description": "The permissions associated with the feature.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the feature.",
            "nullable": true,
            "example": "Approvals"
          }
        },
        "additionalProperties": false
      },
      "SecurityRuleSet": {
        "enum": [
          "None",
          "Level1",
          "Level2"
        ],
        "type": "string"
      },
      "SecurityState": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether the security feature is active for the user.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "SelfProfileUpdateConfiguration": {
        "type": "object",
        "properties": {
          "editProfileBeneficiaryNotificationId": {
            "type": "integer",
            "description": "Get the id of notification to send to the beneficiary when profile update is completed.",
            "format": "int32",
            "nullable": true
          },
          "screen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailScreen"
              }
            ],
            "description": "Details of the Self Service Dynamic Detail Screen.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileConfigSourceType"
              }
            ],
            "description": "Source of configuration"
          },
          "preProcessWorkflowId": {
            "type": "integer",
            "description": "Id of workflow to execute before user profile is updated.",
            "format": "int32",
            "nullable": true
          },
          "approvalId": {
            "type": "integer",
            "description": "Id of approval to execute when fields that require approval are changed.",
            "format": "int32",
            "nullable": true
          },
          "contactVerificationConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataValidation"
              }
            ],
            "description": "Id of contact verification configuration associated with this configuration. If set,\r\napi/user-management/data-verifications/{id}/sendPin should be invoked and the PIN\r\nconfirmed before updating the profile.",
            "nullable": true
          },
          "profileVerificationConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataValidation"
              }
            ],
            "description": "Id of profile verification configuration associated with this configuration. If set,\r\napi/user-management/data-verifications/{id}/sendPin should be invoked and the PIN\r\nconfirmed before updating the profile.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SelfRegistration": {
        "required": [
          "accessPeriod",
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "additionalProperties": { },
            "description": "The user information that should be used to populate the user's identity."
          },
          "accessPeriod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelfRegistrationAvailability"
              }
            ],
            "description": "The start and end dates for the Identity access."
          },
          "reason": {
            "type": "string",
            "description": "The reason why identity access is being requested.",
            "nullable": true,
            "example": "New Hire"
          },
          "notificationEmailAddress": {
            "type": "string",
            "description": "The email address that should be used to send notifications about the access request.",
            "nullable": true,
            "example": "example@example.com"
          }
        },
        "additionalProperties": false,
        "description": "Details of a self registration request."
      },
      "SelfRegistrationAvailability": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The date when the new user should be given access. The date must be equal to today or in the future as dates in the\r\npast will not be accepted.",
            "format": "date-time",
            "nullable": true,
            "example": "05-12-2029"
          },
          "endDate": {
            "type": "string",
            "description": "The last day the user should have access.  If null, access is permanent.",
            "format": "date-time",
            "nullable": true,
            "example": "05-12-2079"
          }
        },
        "additionalProperties": false,
        "description": "Details of the self registration availability period."
      },
      "SelfRegistrationConfiguration": {
        "type": "object",
        "properties": {
          "registrationEmailDisplay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayVisibility"
              }
            ],
            "description": "Inform the ui whether to show an input field for an e-mail address so that notifications can be\r\nsent to this address to inform the user of their registration status.  If the value is hide, then\r\nnotifications most likely won't be sent.",
            "example": "Optional"
          },
          "submitCommentDisplay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayVisibility"
              }
            ],
            "description": "Inform the ui as to whether a reason for the request must be entered as part of the registration process.",
            "example": "Optional"
          },
          "managerSearchFilter": {
            "type": "string",
            "description": "If the user can select a manager as part of self registration, this contains the filter that\r\nshould be used to limit the user's manager selection.",
            "nullable": true,
            "example": "filter=Person-Firstname sw Jo and Employee-Email1 co abc"
          },
          "requestForInformationEmailAttributeName": {
            "type": "string",
            "description": "The product attribute that contains the email address that should be used for request for information requests.",
            "nullable": true,
            "example": "Person-Email1"
          },
          "showPasswordPolicy": {
            "type": "boolean",
            "description": "If a password is one of the self registration fields they must fill out, then this property\r\ndirects the ui to show the password policy so that the user may enter a valid password.",
            "example": true
          },
          "attribute": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentitySchema"
              }
            ],
            "description": "The attribute that holds the new user type value.  Changing the value of this attribute\r\nwill typically change the dynamic profile screen that is displayed to gather the new user profile\r\ninformation.",
            "nullable": true
          },
          "userTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewUserTypeConfiguration"
            },
            "description": "A list of possible new user types.  For example, employee versus contractor.  Or student versus teacher.\r\nEach type can have its own profile information screen, approval rules, pre-process workflow, post-approval\r\nworkflow, submission message, and other properties.  The Value property of the NewUserType selected should\r\nbe stored in the profile attribute represented by the NewUserAttributeTypeName.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether the self registration feature is enabled or not.",
            "example": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SelfRegistrationPasswordEnforcement": {
        "type": "object",
        "properties": {
          "passwordPolicyId": {
            "type": "integer",
            "description": "Id of the password policy.",
            "format": "int32",
            "example": 1001
          },
          "priority": {
            "type": "integer",
            "description": "Password enforcement configurations are created with an assigned priority. Password\r\npolicies in higher priority enforcement configuration will be set as the enforced password policy\r\nwhen a user qualifies for multiple enforcement configurations. Two password enforcement\r\nconfigurations cannot have the same priority. Priority value range is from 1 to 100 with 100 as the\r\nhighest priority.",
            "format": "int32",
            "example": 100
          },
          "syncPassword": {
            "type": "boolean",
            "description": "Flag that indicates that, if the connected systems account of a user in a password enforcement have a common\r\npassword."
          },
          "mutuallyExclusive": {
            "type": "boolean",
            "description": "Flag that indicates that the end user cannot use the same password to reset connected system accounts belonging to\r\ndifferent enforcements."
          },
          "notifyDaysAtSelfServiceLogin": {
            "type": "integer",
            "description": "Notify user that the password is about to expire X day(s) before expiry at Self-Service login.",
            "format": "int32",
            "example": 30
          },
          "description": {
            "type": "string",
            "description": "Description of the password enforcement. This is a locale aware property.",
            "nullable": true,
            "example": "Simple password policy"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the password enforcement. This is a locale aware property.",
            "nullable": true,
            "example": "Corporate password policy"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates if the password enforcement is enabled. Only enabled enforcements will be\r\nevaluated during the password enforcement evaluation for a user."
          },
          "name": {
            "type": "string",
            "description": "Name of the password enforcement.",
            "nullable": true
          },
          "orgId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Details of the self registration password enforcement."
      },
      "SelfServiceRequest": {
        "required": [
          "changeType",
          "status",
          "type",
          "userId"
        ],
        "type": "object",
        "properties": {
          "changeType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestChangeType"
              }
            ],
            "description": "The action (add/modify/delete/change...) that should be performed."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestType"
              }
            ],
            "description": "The type of request."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "description": "The status of the request."
          },
          "reason": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "The reason (supplied by the user) the request was made.",
            "nullable": true
          },
          "configId": {
            "type": "integer",
            "description": "The id of the self service configuration that was used to make the request.",
            "format": "int32",
            "nullable": true
          },
          "selfRegistrationConfigId": {
            "type": "integer",
            "description": "The id of the self registration configuration that was used to make the request if\r\nType is SelfRegistration.",
            "format": "int32",
            "nullable": true
          },
          "beneficiaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfServiceRequestBeneficiary"
            },
            "description": "The users for whom the request is for.",
            "nullable": true
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfServiceRequestResource"
            },
            "description": "The resources that are being requested.",
            "nullable": true
          },
          "resourceNames": {
            "type": "string",
            "description": "The display names of the resources being requested.",
            "nullable": true
          },
          "userId": {
            "minLength": 1,
            "type": "string",
            "description": "The id of the user who made the request."
          },
          "orgId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SelfServiceRequestBeneficiary": {
        "required": [
          "newUser",
          "requestId",
          "status",
          "userId"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "integer",
            "description": "The id of the SelfServiceRequest that this beneficiary is associated with.",
            "format": "int32"
          },
          "newUser": {
            "type": "boolean",
            "description": "Flag that indicates that the beneficiary is a new user."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "description": "The status of the request."
          },
          "internalStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "description": "The internal status of the request.",
            "nullable": true
          },
          "cancelable": {
            "type": "boolean",
            "description": "Flag that indicates whether the request may be canceled.  Requests may be canceled only\r\nwhen they are pending approval."
          },
          "showSeeDetails": {
            "type": "boolean",
            "description": "Display \"See Details\" for the status of the request for this user."
          },
          "preProcessWorkflowJobId": {
            "type": "integer",
            "description": "The id of the workflow that should be invoked before any request processing takes place.",
            "format": "int32",
            "nullable": true
          },
          "previousUserId": {
            "type": "string",
            "description": "The userId of the beneficiary if the beneficiary is being re-instated.",
            "nullable": true
          },
          "identityAccountApprovalId": {
            "type": "integer",
            "description": "The id of the approval that should be created once the pre-process workflow has completed.",
            "format": "int32",
            "nullable": true
          },
          "postApprovalWorkflowJobId": {
            "type": "integer",
            "description": "The id of the workflow that should be invoked after all request processing takes place.",
            "format": "int32",
            "nullable": true
          },
          "permanentEndDateAllowed": {
            "type": "boolean",
            "description": "Flag that indicates whether permanent end dates are allowed. Used to control whether approvers\r\nmay change the access end date if they are allowed to modify the request."
          },
          "maxDuration": {
            "type": "integer",
            "description": "Maximum account duration in days.  0/null means no restriction.",
            "format": "int32",
            "nullable": true
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfServiceRequestBeneficiaryResource"
            },
            "description": "The list of resources to be acted upon (add/modify/remove) for this user.",
            "nullable": true
          },
          "userId": {
            "minLength": 1,
            "type": "string",
            "description": "The userId of the beneficiary of this request."
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SelfServiceRequestBeneficiaryResource": {
        "required": [
          "beneficiaryId",
          "jobInstanceId",
          "resourceId",
          "status"
        ],
        "type": "object",
        "properties": {
          "beneficiaryId": {
            "type": "integer",
            "format": "int32"
          },
          "resourceId": {
            "type": "integer",
            "format": "int32"
          },
          "jobInstanceId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "description": "FISCIDM.PRODUCT_STATUS values"
          },
          "internalStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "nullable": true
          },
          "approvalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "originalStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "originalEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approverCanEditPermissions": {
            "type": "boolean"
          },
          "accountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dependentResourceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "changeType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestChangeType"
              }
            ]
          },
          "accountProcessState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestAccountProcessState"
              }
            ]
          },
          "userDn": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "systemId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "previousEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastExpirationNotificationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvalRuleId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "externalRequestId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "externalRequestStatus": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "externalRequestStage": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "overrideGracePeriod": {
            "type": "boolean",
            "nullable": true
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfServiceRequestHistory"
            },
            "nullable": true
          },
          "userId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "userName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SelfServiceRequestHistory": {
        "type": "object",
        "properties": {
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestEvent"
              }
            ],
            "description": "The type of event that happened on the request."
          },
          "date": {
            "type": "string",
            "description": "The date/time the event happened.",
            "format": "date-time"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "A description of what happened.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The userId of the user that caused the event.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A history item of a self service request."
      },
      "SelfServiceRequestResource": {
        "required": [
          "requestId",
          "type"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "integer",
            "description": "The id of the request this resource belongs to.",
            "format": "int32"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestResourceType"
              }
            ],
            "description": "The type of resource."
          },
          "resourceId": {
            "type": "integer",
            "description": "The id of the resource/policy that was requested.",
            "format": "int32",
            "nullable": true
          },
          "groupTreeId": {
            "type": "integer",
            "description": "The id of the self service group that was requested if Type is Group.",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SelfServiceUrlConfig": {
        "type": "object",
        "properties": {
          "autoLoginUrl": {
            "type": "string",
            "description": "External url for the identity self-service auto login page.",
            "nullable": true,
            "example": "www.fischeridentity.com"
          }
        },
        "additionalProperties": false
      },
      "SendClaimContinueNotification": {
        "required": [
          "sendToAttributeId",
          "substitutionValues",
          "userTypeId"
        ],
        "type": "object",
        "properties": {
          "userTypeId": {
            "type": "integer",
            "description": "The id of the user type configuration that should be used to send the notification.",
            "format": "int32",
            "example": 54
          },
          "sendToAttributeId": {
            "type": "integer",
            "description": "The id of a verified attribute that the notification should be delivered to.",
            "format": "int32",
            "example": 24
          },
          "substitutionValues": {
            "type": "object",
            "additionalProperties": { },
            "description": "The substitution variables and values that should be inserted into the notification\r\nbefore its sent.  This must contain a variable named 'PORTAL_URL' whose value\r\nis a URL that the FAM server should redirect to when the user clicks on the link\r\nin the notification.",
            "example": {
              "Person-Firstname": "John",
              "Person-Lastname": "Smith",
              "PORTAL_URL": "localhost:1234"
            }
          }
        },
        "additionalProperties": false,
        "description": "The data necessary to send an email to the user that allows them to complete the authentication process."
      },
      "SendClaimPinNotification": {
        "required": [
          "sendToAttributeId",
          "userTypeId"
        ],
        "type": "object",
        "properties": {
          "userTypeId": {
            "type": "integer",
            "description": "The id of the user type configuration that should be used to send the notification.",
            "format": "int32",
            "example": 54
          },
          "sendToAttributeId": {
            "type": "integer",
            "description": "The id of a verified attribute that the notification should be delivered to.",
            "format": "int32",
            "example": 24
          }
        },
        "additionalProperties": false,
        "description": "The data necessary to send an email to the user that allows them to complete the user authorization process."
      },
      "Status": {
        "enum": [
          "Deny",
          "Allow",
          "Initiated",
          "Running",
          "Completed",
          "Successful",
          "Failed",
          "Stopping",
          "Stopped",
          "Scheduled",
          "CompletedScheduled",
          "FailedScheduled",
          "Restarted",
          "NoResponse",
          "InvalidCredentials",
          "InvalidDate",
          "PartialSuccess",
          "Added",
          "Removed",
          "AddInProgress",
          "RemoveInProgress",
          "Modified",
          "Renamed",
          "Enabled",
          "Disabled",
          "New",
          "PendingApproval",
          "StartupPending",
          "Unregistered",
          "Escalated",
          "Approved",
          "Rejected",
          "Terminated",
          "Deprovisioned",
          "RequestForInformationSent",
          "RequestForInformationReceived",
          "Cancelled",
          "Reassigned",
          "Denied",
          "EscalatedViaTimeout",
          "DeniedViaTimeout",
          "WorkItemApproved",
          "WorkItemDenied",
          "WorkItemEscalated",
          "WorkItemEscalatedToNextLevel",
          "AddApprovalInProgress",
          "RemoveApprovalInProgress",
          "ModifyInProgress",
          "Available",
          "Pending",
          "Assigned",
          "Inactive",
          "AutoApproved",
          "AutoDenied",
          "Skipped",
          "Submitted",
          "Ignored",
          "RunningPostImport",
          "RunningSuccessFailure",
          "Active",
          "WaitingForRetry",
          "Existing",
          "Resolved",
          "ExecutingResource",
          "Revoked",
          "AdminNotified",
          "Exporting",
          "Importing",
          "Purging",
          "Purged",
          "WorkItemDeniedViaTimeout",
          "DisableInProgress",
          "FailedDueToTimeout",
          "Certified",
          "NodeAssigned",
          "AssessmentInProgress",
          "CertificationInProgress",
          "RemediationInProgress",
          "AssessmentCompleted",
          "CertificationCompleted",
          "RemediationCompleted",
          "CotEvaluationStarted",
          "InDefinitionOnly",
          "NotAMemberOfPolicy",
          "ExcessAccount",
          "ExcessAccountAssociation",
          "ExcessEntitlement",
          "ExcessEntitlementAssociation",
          "MissingAccount",
          "MissingAccountInTarget",
          "MissingEntitlement",
          "MissingEntitlementInTarget",
          "AccountOnlyAssociatedWithEntitlement",
          "MissingEntitlementAssociation",
          "WorkItemParallelApproved",
          "CancelApprovalRequest",
          "ExcessEntitlementInTarget",
          "ExcessPolicyMembership",
          "ExecutingPolicy",
          "PendingReview",
          "ExecutingWorkflows",
          "ExecutingComplianceJobs",
          "ComplianceExceptionCorrected",
          "WaitingForPreProcess",
          "ExecutingPreProcess",
          "ExceptionRemediated",
          "ExceptionOverridden",
          "ExceptionDoesNotExist",
          "ExecutingReoccurred",
          "SeeHistory",
          "DeniedBySoD",
          "WaitingForDependency",
          "AutoCorrected",
          "DependencyError",
          "ApprovalNoLongerValid",
          "DependencyPending",
          "DependencySuccess",
          "AssociationFailed",
          "NoMatchingIdentity",
          "AccountAssociated",
          "EntitlementAssociated",
          "LoadingUsers",
          "EvaluatingPolicy",
          "LoadingPolicy",
          "AutoEscalated",
          "EvaluationPending",
          "EvaluationCompleted",
          "InGracePeriod",
          "PasswordExpired",
          "Notified",
          "WorkItemEscalatedDueToFailureToMeetQuorum",
          "WorkItemDeniedDueToFailureToMeetQuorum",
          "Matched",
          "WaitingForPostApproval",
          "ExecutingPostApproval",
          "ProfileApprovalRequestCanceled",
          "ProfileApprovalRequestCancelInProgress",
          "Deleted",
          "WorkItemCancelledDueToApproverBeingDisabled",
          "Consolidate",
          "ApprovedWaitingForConsolidation",
          "OverrideAutoApprovedWaitingForConsolidation",
          "DeniedWaitingForConsolidation",
          "AutoDeniedWaitingForConsolidation",
          "DeniedWaitingForConsolidationDueToTimeout",
          "FailedWaitingForConsolidation",
          "CancelledWaitingForConsolidation",
          "WorkItemDeniedDueToApproverBeingDisabled",
          "Deploying",
          "Deployed",
          "Rotating",
          "Expired",
          "Archived",
          "Destroyed",
          "ExecutingPostMatchWorkflow",
          "RotationScriptFailed",
          "Rotated",
          "CancelledRestartNotSupported",
          "GenericSsoStatus",
          "ResourceQueuedForExternalProcessing",
          "ResourceExternalProcessingInProgress",
          "NotAvailable"
        ],
        "type": "string",
        "description": "FISCIDM.PRODUCT_STATUS values"
      },
      "TamperState": {
        "enum": [
          "Unknown",
          "NotTampered",
          "Tampered"
        ],
        "type": "string"
      },
      "TokenType": {
        "enum": [
          "Hotp6",
          "Hotp8",
          "YubiKey",
          "DuoD100"
        ],
        "type": "string"
      },
      "TotpResponse": {
        "type": "object",
        "properties": {
          "organization": {
            "type": "string",
            "description": "The name of the organization the user is in.",
            "nullable": true,
            "example": "ACME Universal"
          },
          "userName": {
            "type": "string",
            "description": "The name of the user associated with the totp secret.",
            "nullable": true,
            "example": "Smith, John"
          },
          "secretKey": {
            "type": "string",
            "description": "The totp secret key value.",
            "nullable": true,
            "example": "4TW7GMP7I4RMPUSD"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserAccount": {
        "required": [
          "creationMethod",
          "startDate",
          "systemId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "systemId": {
            "type": "integer",
            "description": "The id of a connected system that is a member of this user account.",
            "format": "int32",
            "example": 1001
          },
          "userId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The userId of the user who owns the accounts.",
            "example": "134534786454321354867"
          },
          "userDn": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The UserDn is the user's LDAP.",
            "nullable": true,
            "example": "CN=John Smith,ou=JJS,ou=People,dc=example,dc=com"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the account is enabled.",
            "example": false
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates if the account is locked.",
            "example": false
          },
          "lastLoginDate": {
            "type": "string",
            "description": "LastLoginDate is the date and time the user has last logged into the account.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-06T13:20:46.216Z"
          },
          "passwordChangeBy": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "PasswordChangeBy indicates who was the last one to modify the password.",
            "nullable": true,
            "example": "admin"
          },
          "passwordChangeDate": {
            "type": "string",
            "description": "PasswordChangeDate is the date and time the password was changed.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-06 13:20:46.216"
          },
          "passwordChangeStatus": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "PasswordChangeStatus indicates the status on modified password.",
            "nullable": true,
            "example": "Successful"
          },
          "successfulPasswordChangeDate": {
            "type": "string",
            "description": "SuccessfulPasswordChangeDate is the date and time the password was successfully changed.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-06 13:20:46.216"
          },
          "passwordChangeUserId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "PBWUSERID of the user who did the last successful password change.",
            "nullable": true,
            "example": "145845415689559902770647531755352206593"
          },
          "resetAttempts": {
            "type": "integer",
            "description": "The amount of password reset attempts that were made.",
            "format": "int32",
            "nullable": true,
            "example": 6
          },
          "loginAttempts": {
            "type": "integer",
            "description": "The amount of password login attempts that were made.",
            "format": "int32",
            "nullable": true,
            "example": 5
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the account.",
            "format": "date-time",
            "example": "2022-06-05 13:20:46.216"
          },
          "endDate": {
            "type": "string",
            "description": "The date the account will end or be terminated.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-07 13:20:46.216"
          },
          "creationMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountCreationMethod"
              }
            ],
            "description": "The method by which the account was created.",
            "example": "Automated"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "description": "The current status of the account.",
            "nullable": true,
            "example": "Deny"
          },
          "passwordExpirationDate": {
            "type": "string",
            "description": "The date the account's password expires.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-05 13:20:46.216"
          },
          "passwordEnforcementPriority": {
            "type": "integer",
            "description": "Priority of the password enforcement configuration associated with this account.",
            "format": "int32",
            "nullable": true,
            "example": 100
          },
          "processStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "description": "Status of the evaluation/password expiration process.",
            "nullable": true,
            "example": "Initiated"
          },
          "accountUserId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Account ID of the User.",
            "nullable": true,
            "example": "CN=John Smith,ou=JJS,ou=People,dc=example,dc=com"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Account description of the user.",
            "nullable": true,
            "example": "This is a student account."
          },
          "userName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Account UserName of the user.",
            "nullable": true,
            "example": "John Smith"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserAccountStatus": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "description": "The id of the user account.",
            "format": "int32",
            "example": 1001
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the account is enabled on the connected system."
          },
          "expired": {
            "type": "boolean",
            "description": "Indicates if the account is expired on the connected system.",
            "example": false
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates if the account is locked on the connected system.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "UserActionType": {
        "enum": [
          "Disable",
          "Enable"
        ],
        "type": "string",
        "description": "The type of actions that can be performed on a user."
      },
      "UserAttributeVerification": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeContentType"
              }
            ],
            "description": "The type of product attribute that has been verified.",
            "example": "Phone"
          },
          "dateVerified": {
            "type": "string",
            "description": "The date and time the attribute was verified.",
            "format": "date-time",
            "example": "2022-05-23T16:42:37"
          },
          "attributeId": {
            "type": "integer",
            "description": "The id of the Product Attribute that requires validation.",
            "format": "int32",
            "example": 1
          },
          "value": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The value of the attribute that was verified.",
            "nullable": true,
            "example": "test@email.com"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserEntitlement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the entitlement",
            "format": "int32",
            "example": 10001
          },
          "accountUserId": {
            "type": "string",
            "description": "Account ID of the User.",
            "nullable": true,
            "example": "CN=test user,ou=test,ou=People,dc=example,dc=com"
          },
          "entitlement": {
            "type": "string",
            "description": "Entitlement ID of the user entitlement.",
            "nullable": true,
            "example": "Student"
          },
          "creationMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementCreationMethod"
              }
            ],
            "description": "The creation method of the entitlement.",
            "example": "0=Provisioning, 1=Override, default =0"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntitlementType"
              }
            ],
            "description": "Type of user entitlement",
            "example": "Group"
          },
          "description": {
            "type": "string",
            "description": "The description of the user entitlement.",
            "nullable": true,
            "example": "This entitlement is for students."
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the entitlement.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-30T13:11:57.304Z"
          },
          "name": {
            "type": "string",
            "description": "The name of the user entitlement",
            "nullable": true,
            "example": "Student"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the entitlement.",
            "format": "date-time",
            "example": "2023-01-30T13:11:57.304Z"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementStatus"
              }
            ],
            "description": "Current status of the entitlement",
            "nullable": true
          },
          "systemId": {
            "type": "integer",
            "description": "Id of the system the entitlement originated from.",
            "format": "int32",
            "example": 10001
          }
        },
        "additionalProperties": false
      },
      "UserEntitlementType": {
        "enum": [
          "Group",
          "Role",
          "Attribute",
          "ResourcePermission",
          "OptionalApprovalAttribute"
        ],
        "type": "string"
      },
      "UserGroup": {
        "required": [
          "accessPeriod",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the user group created.",
            "nullable": true,
            "example": "FDAD9492-8721-4E48-9920-3A4B788152A6"
          },
          "psaGroupId": {
            "type": "integer",
            "description": "The id of the legacy security user group id that defines the group members.",
            "format": "int32",
            "nullable": true,
            "example": 10001
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityGroupType"
              }
            ],
            "description": "Flag that indicates how the group members are found/obtained.",
            "example": "Static"
          },
          "groupOfGroupConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserGroupCollection"
              }
            ],
            "description": "The details of the member group when GroupType is GroupOfGroups.",
            "nullable": true
          },
          "ldapFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LdapGroupConfiguration"
              }
            ],
            "description": "The details of the member group when GroupType is ExternalLdap.",
            "nullable": true
          },
          "dynamicFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileGroupConfiguration"
              }
            ],
            "description": "The details of the member group when GroupType is Dynamic.",
            "nullable": true
          },
          "accessPeriod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserGroupDateRange"
              }
            ],
            "description": "The date range when the member's association to the group starts and ends."
          },
          "description": {
            "type": "string",
            "description": "A description of the user group.",
            "nullable": true,
            "example": "Group for Sales - Security Administrators"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether this identity group is active or not.",
            "example": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the user group.",
            "example": "Sales - Security Administrators"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityGroupStatus"
              }
            ],
            "description": "The status of an identity group",
            "example": "Pending"
          },
          "systemDefault": {
            "type": "boolean",
            "description": "Flag that indicates whether this user was granted membership via a legacy\r\nidentity group.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the identity user group."
      },
      "UserGroupCollection": {
        "type": "object",
        "properties": {
          "memberGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupCollectionMember"
            },
            "description": "The list of identity group ids of the member groups when GroupType is GroupOfGroups.",
            "nullable": true
          },
          "identityGroupId": {
            "type": "string",
            "description": "The id of the identity group that owns this configuration.",
            "nullable": true,
            "example": "BC132EEC-931A-4554-8188-7E88F1436D2B"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The configuration details of an identity group when the GroupType is GroupOfGroups."
      },
      "UserGroupCollectionMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the group collection member.",
            "nullable": true,
            "example": "152A69492-8721-4E48-9920-3A4B788FDAD"
          },
          "memberGroupId": {
            "type": "string",
            "description": "The identity group id that is the member group when GroupType is GroupOfGroups .",
            "nullable": true,
            "example": "E19330A1-DAD7-45B4-8E0D-02A73E09384E"
          },
          "memberGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserGroup"
              }
            ],
            "description": "The details of the member group.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The member group details of an identity group collection when the GroupType is GroupOfGroups."
      },
      "UserGroupDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The start date when the member's association to a user group starts.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-03T15:19:47.348Z"
          },
          "endDate": {
            "type": "string",
            "description": "The date and time when the member’s association to the user group will end.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-09-03T15:19:47.348Z"
          }
        },
        "additionalProperties": false,
        "description": "The date range details of user groups member's association with the group."
      },
      "UserIdRecoveryConfig": {
        "type": "object",
        "properties": {
          "attribute": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentitySchema"
              }
            ],
            "description": "The attribute Fii.Modules.IdentityCore.ViewModels.Runtime.IdentitySchemaViewModel that represents the different types\r\nof users in the Identity system. It is used to decide which Fii.Modules.IdentityCore.ViewModels.Runtime.Configurations.UserTypeConfigViewModel`2.UserTypes forgot\r\nuser configuration should be used.",
            "nullable": true
          },
          "userTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForgotUserNameUserType"
            },
            "description": "A list of user type configurations that define the user location screen (claim screen), whether\r\nthe user can update their profile, and exit action.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag that indicates whether Identity claim is active or not.",
            "example": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserListContext": {
        "enum": [
          "DefaultContext",
          "ManagerSearch",
          "SignupManagerSearch",
          "SponsorSearch",
          "DelegateSearch",
          "ApprovalReassignmentSearch",
          "HelpDeskUserSearch"
        ],
        "type": "string",
        "description": "The context from which the GET /users API is being called from."
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "additionalClaims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Claim"
            },
            "description": "Additional claims from an Issuer. Consisting of both the Issuer, OriginalIssuer, Properties, Subject, Value, and\r\nType.",
            "nullable": true
          },
          "profile": {
            "type": "object",
            "additionalProperties": { },
            "description": "Product attributes of the user.",
            "nullable": true,
            "example": "Person-Firstname"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Roles of the user",
            "nullable": true
          },
          "personas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityPersona"
            },
            "description": "The list of personas the user qualifies for.",
            "nullable": true,
            "example": {
              "name": "John Smith",
              "qualifier": "New User"
            }
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "nullable": true
          },
          "lastLoginDate": {
            "type": "string",
            "description": "The date and time of the last user login.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-07T13:30:29.224Z"
          },
          "passwordExpiryDate": {
            "type": "string",
            "description": "Date account password expires on",
            "format": "date-time",
            "nullable": true,
            "example": "2022-06-07T13:30:29.224Z"
          },
          "userLoginId": {
            "type": "string",
            "description": "The user's login Id",
            "nullable": true,
            "example": "user@email.com"
          },
          "dateTimeFormat": {
            "type": "string",
            "description": "The display format that should be used when displaying date and time values.",
            "nullable": true,
            "example": "MM/dd/yy HH12:mm"
          },
          "orgCode": {
            "type": "string",
            "description": "The code of the current user's organization.",
            "nullable": true,
            "example": "ORG"
          },
          "orgId": {
            "type": "integer",
            "description": "The Id of the current user's organization.",
            "format": "int32",
            "example": 2
          },
          "tenantCode": {
            "type": "string",
            "description": "The code of the Tenant that owns the organization.",
            "nullable": true,
            "example": "FIILLC"
          },
          "tenantId": {
            "type": "string",
            "description": "The Id of the Tenant that owns the organization.",
            "nullable": true,
            "example": "FIILLC-FII"
          },
          "userId": {
            "type": "string",
            "description": "UserId of the user containing the login information.",
            "nullable": true,
            "example": "1341654684765213215647"
          }
        },
        "additionalProperties": false
      },
      "UserMatchCount": {
        "type": "object",
        "properties": {
          "pending": {
            "type": "integer",
            "description": "The number of user match requests assigned to this user that are pending user action.",
            "format": "int32",
            "example": 3
          },
          "total": {
            "type": "integer",
            "description": "The total number of user match requests assigned to this user.",
            "format": "int32",
            "example": 7
          }
        },
        "additionalProperties": false
      },
      "UserMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the user member.",
            "nullable": true,
            "example": "FDAD9492-8721-4E48-9920-3A4B788152A6"
          },
          "profile": {
            "type": "object",
            "additionalProperties": { },
            "description": "The details of the user.  This property must be specified on the Expand query options\r\nas it won't be returned by default.  The Profile will be a map of the user's profile\r\nmapped attributes:\r\n<br>\r\n    {\r\n<br>\r\n    \"Identity-Claimed\": false,\r\n<br>\r\n    \"Identity-PBWUSERID\": \"115133058575676108314314263953846388147\",\r\n<br>\r\n    \"Person-Firstname\": \"John\",\r\n<br>\r\n    \"Person-Lastname\": \"Smith\",\r\n<br>\r\n    \"Person-SourceProfileID\": \"jsmith\",\r\n<br>\r\n    \"Employee-StartDate\": \"2022-09-22T12:00:53Z\"\r\n<br>\r\n    }\r\n",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserProfileAlias": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the UserProfileAlias record",
            "format": "int32",
            "example": 10001
          },
          "alias": {
            "type": "string",
            "description": "Name of the alias",
            "nullable": true,
            "example": "John.Doe"
          },
          "configId": {
            "type": "integer",
            "description": "Id of the Alias Configuration record",
            "format": "int32",
            "example": 10002
          },
          "domainId": {
            "type": "integer",
            "description": "Id of the Alias Domain record",
            "format": "int32",
            "example": 10003
          },
          "destinationAddress": {
            "type": "string",
            "description": "Email of the destination address",
            "nullable": true,
            "example": "helpdesk@email.com"
          },
          "primary": {
            "type": "boolean",
            "description": "Indicator that shows if the alias is primary or not",
            "example": 1
          },
          "editable": {
            "type": "boolean",
            "description": "Indicator indicating if the alias is editable",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "UserSecurity": {
        "type": "object",
        "properties": {
          "timeBasedOneTimePin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecurityState"
              }
            ],
            "description": "Configuration for time based one time pins (TOTP).",
            "nullable": true
          },
          "duo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DuoSecurityState"
              }
            ],
            "description": "Configuration for Duo security devices and tokens.",
            "nullable": true
          },
          "webAuthentication": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecurityState"
              }
            ],
            "description": "Configuration for Web Authentication (WebAuthn).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSetting": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "A string that can be used to categorize and group related settings together in the Portal UI.",
            "example": "Theme"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value of the user specific customization setting.",
            "example": "dark"
          },
          "enabled": {
            "type": "boolean",
            "description": "A flag that indicates whether the setting is active or not.",
            "example": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A user specific configuration setting that was set in the Portal UI."
      },
      "UserStatus": {
        "enum": [
          "Active",
          "Bypass",
          "Disabled"
        ],
        "type": "string"
      },
      "ValidatePassword": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "The new password to test.",
            "example": "TestPa$$word1"
          }
        },
        "additionalProperties": false,
        "description": "Test a password against a password policy action"
      },
      "ValidationResult": {
        "type": "object",
        "properties": {
          "succeeded": {
            "type": "boolean",
            "description": "Flag indicating if the validation succeeded or not",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "The error message of a failed remote validation query.",
            "nullable": true,
            "example": "The field maxlength is 32 characters."
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Validation Result"
      },
      "ValidationType": {
        "enum": [
          "None",
          "Email",
          "RegularExpression",
          "JavaScript",
          "Database",
          "Directory",
          "Unique"
        ],
        "type": "string",
        "description": "The types of validations used for a screen elements data."
      },
      "VerifiedAttributeValue": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeContentType"
              }
            ],
            "description": "The type of product attribute that has been verified.",
            "example": "Email"
          },
          "attributeId": {
            "type": "integer",
            "description": "The id of the Product Attribute that requires validation.",
            "format": "int32",
            "example": 1
          },
          "value": {
            "type": "string",
            "description": "The value of the attribute that was verified.",
            "nullable": true,
            "example": "test@email.com"
          }
        },
        "additionalProperties": false
      },
      "WebAuthnType": {
        "enum": [
          "SecurityKey",
          "TouchId"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter JWT Bearer token **_only_**",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "OAuth 2": {
        "type": "oauth2",
        "description": "For more information, see https://developers.getbase.com/docs/rest/articles/oauth2/requests",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://ebs-v80-qa-20-sso.fischeridentitydev.com/auth/realms/qa/protocol/openid-connect/token",
            "scopes": { }
          }
        }
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    },
    {
      "OAuth 2": [ ]
    }
  ]
}